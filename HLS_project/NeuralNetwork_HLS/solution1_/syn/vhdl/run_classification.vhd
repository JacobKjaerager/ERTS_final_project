-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity run_classification is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bias_s_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    bias_s_ce0 : OUT STD_LOGIC;
    bias_s_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    weights_s_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    weights_s_ce0 : OUT STD_LOGIC;
    weights_s_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of run_classification is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000001000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000010000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000100000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000001000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000010000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000100000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000001000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000010000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000100000000000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000001000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000010000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000100000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (26 downto 0) := "000000000001000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (26 downto 0) := "000000000010000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (26 downto 0) := "000000000100000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (26 downto 0) := "000000001000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (26 downto 0) := "000000010000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (26 downto 0) := "000000100000000000000000000";
    constant ap_ST_fsm_pp2_stage1 : STD_LOGIC_VECTOR (26 downto 0) := "000001000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (26 downto 0) := "000010000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (26 downto 0) := "000100000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (26 downto 0) := "001000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (26 downto 0) := "010000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (26 downto 0) := "100000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv7_46 : STD_LOGIC_VECTOR (6 downto 0) := "1000110";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv13_15E0 : STD_LOGIC_VECTOR (12 downto 0) := "1010111100000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv7_50 : STD_LOGIC_VECTOR (6 downto 0) := "1010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv8_46 : STD_LOGIC_VECTOR (7 downto 0) := "01000110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv13_1324 : STD_LOGIC_VECTOR (12 downto 0) := "1001100100100";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv8_8C : STD_LOGIC_VECTOR (7 downto 0) := "10001100";
    constant ap_const_lv16_64 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001100100";
    constant ap_const_lv10_2BC : STD_LOGIC_VECTOR (9 downto 0) := "1010111100";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv14_2904 : STD_LOGIC_VECTOR (13 downto 0) := "10100100000100";
    constant ap_const_lv13_46 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000110";
    constant ap_const_lv14_46 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal resArray1_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal resArray1_ce0 : STD_LOGIC;
    signal resArray1_we0 : STD_LOGIC;
    signal resArray1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal resArray1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal resArray2_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal resArray2_ce0 : STD_LOGIC;
    signal resArray2_we0 : STD_LOGIC;
    signal resArray2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal resArray2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten_reg_290 : STD_LOGIC_VECTOR (12 downto 0);
    signal outNeurons_1_i1_reg_301 : STD_LOGIC_VECTOR (6 downto 0);
    signal inNeurons_0_i1_reg_312 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten1_reg_345 : STD_LOGIC_VECTOR (12 downto 0);
    signal outNeurons_1_i3_reg_356 : STD_LOGIC_VECTOR (6 downto 0);
    signal inNeurons_0_i6_reg_367 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten2_reg_400 : STD_LOGIC_VECTOR (9 downto 0);
    signal outNeurons_1_i_reg_411 : STD_LOGIC_VECTOR (3 downto 0);
    signal inNeurons_0_i_reg_422 : STD_LOGIC_VECTOR (6 downto 0);
    signal reg_466 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal exitcond_flatten_reg_1020 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_state17_pp1_stage1_iter0 : BOOLEAN;
    signal ap_block_state19_pp1_stage1_iter1 : BOOLEAN;
    signal ap_block_state21_pp1_stage1_iter2 : BOOLEAN;
    signal ap_block_pp1_stage1_flag00011001 : BOOLEAN;
    signal exitcond_flatten1_reg_1113 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp1_iter1_exitcond_flatten1_reg_1113 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage1 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_state31_pp2_stage1_iter0 : BOOLEAN;
    signal ap_block_state33_pp2_stage1_iter1 : BOOLEAN;
    signal ap_block_state35_pp2_stage1_iter2 : BOOLEAN;
    signal ap_block_pp2_stage1_flag00011001 : BOOLEAN;
    signal exitcond_flatten2_reg_1211 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter1_exitcond_flatten2_reg_1211 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_470 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal reg_474 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal tmp_fu_479_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_1001 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal exitcond1_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal outNeurons_fu_490_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal outNeurons_reg_1010 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond_flatten_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_exitcond_flatten_reg_1020 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_exitcond_flatten_reg_1020 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_507_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal indvar_flatten_next_reg_1024 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal inNeurons_0_i1_mid2_fu_519_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal inNeurons_0_i1_mid2_reg_1029 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_6_mid2_v_fu_533_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_6_mid2_v_reg_1036 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_reg_pp0_iter1_tmp_6_mid2_v_reg_1036 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state5_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state9_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_pp0_stage1_flag00011001 : BOOLEAN;
    signal inNeurons_fu_555_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal inNeurons_reg_1053 : STD_LOGIC_VECTOR (6 downto 0);
    signal input_r_load_reg_1058 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_564_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_1068 : STD_LOGIC_VECTOR (31 downto 0);
    signal resArray1_addr_1_reg_1073 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_fu_585_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_reg_1081 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal resArray1_addr_2_reg_1086 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond_i1_fu_579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_604_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_1094 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal exitcond7_fu_608_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal outNeurons_1_fu_614_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal outNeurons_1_reg_1103 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond_flatten1_fu_670_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state16_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state18_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state20_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state22_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_pp1_stage0_flag00011001 : BOOLEAN;
    signal ap_reg_pp1_iter2_exitcond_flatten1_reg_1113 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next1_fu_676_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal indvar_flatten_next1_reg_1117 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal inNeurons_0_i6_mid2_fu_688_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal inNeurons_0_i6_mid2_reg_1122 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_12_mid2_v_fu_702_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_12_mid2_v_reg_1129 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_reg_pp1_iter1_tmp_12_mid2_v_reg_1129 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_reg_pp1_iter2_tmp_12_mid2_v_reg_1129 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp23_cast_mid2_v_fu_713_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp23_cast_mid2_v_reg_1136 : STD_LOGIC_VECTOR (12 downto 0);
    signal inNeurons_1_fu_719_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal inNeurons_1_reg_1141 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_742_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_reg_1161 : STD_LOGIC_VECTOR (31 downto 0);
    signal resArray2_addr_1_reg_1166 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_1_fu_764_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_1_reg_1174 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal resArray2_addr_2_reg_1179 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond_i_fu_758_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_783_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_reg_1187 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal exitcond4_fu_787_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal outNeurons_3_fu_793_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal outNeurons_3_reg_1196 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_60_i1_fu_818_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_60_i1_reg_1206 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal exitcond_flatten2_fu_828_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state30_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state32_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state34_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state36_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_pp2_stage0_flag00011001 : BOOLEAN;
    signal ap_reg_pp2_iter2_exitcond_flatten2_reg_1211 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next2_fu_834_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal indvar_flatten_next2_reg_1215 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal inNeurons_0_i_mid2_fu_846_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal inNeurons_0_i_mid2_reg_1220 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_23_mid2_v_fu_860_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_23_mid2_v_reg_1228 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_pp2_iter1_tmp_23_mid2_v_reg_1228 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_pp2_iter2_tmp_23_mid2_v_reg_1228 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_49_i1_fu_905_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_49_i1_reg_1235 : STD_LOGIC_VECTOR (13 downto 0);
    signal inNeurons_2_fu_911_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal inNeurons_2_reg_1240 : STD_LOGIC_VECTOR (6 downto 0);
    signal resArray2_load_2_reg_1255 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_928_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_reg_1265 : STD_LOGIC_VECTOR (31 downto 0);
    signal resArray1_addr_5_reg_1270 : STD_LOGIC_VECTOR (6 downto 0);
    signal max_index_cast_fu_943_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_index_cast_reg_1275 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal exitcond_fu_947_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_958_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_reg_1288 : STD_LOGIC_VECTOR (3 downto 0);
    signal max_1_reg_1293 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal max_1_max_0_i_fu_969_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal max_index_max_index_s_fu_976_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_block_pp0_stage1_flag00011011 : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state16 : STD_LOGIC;
    signal ap_block_pp1_stage1_flag00011011 : BOOLEAN;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state30 : STD_LOGIC;
    signal ap_block_pp2_stage1_flag00011011 : BOOLEAN;
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal outNeurons_0_i2_reg_279 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal indvar_flatten_phi_fu_294_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal outNeurons_1_i1_phi_fu_305_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal inNeurons_0_i1_phi_fu_316_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_0_i1_reg_323 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal outNeurons_0_i1_reg_334 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal indvar_flatten1_phi_fu_349_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_pp1_stage0_flag00000000 : BOOLEAN;
    signal outNeurons_1_i3_phi_fu_360_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal inNeurons_0_i6_phi_fu_371_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_0_i_reg_378 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal outNeurons_0_i_reg_389 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal indvar_flatten2_phi_fu_404_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp2_stage0_flag00000000 : BOOLEAN;
    signal outNeurons_1_i_phi_fu_415_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal inNeurons_0_i_phi_fu_426_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal max_0_i_reg_433 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_index_0_i_reg_443 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_index_reg_455 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_49_i_cast_fu_551_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1_flag00000000 : BOOLEAN;
    signal tmp_9_fu_544_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_mid2_fu_569_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_591_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_57_i_cast_fu_630_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_49_i9_cast_fu_734_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_727_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_mid2_fu_748_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp1_stage1_flag00000000 : BOOLEAN;
    signal tmp_15_fu_770_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_57_i1_cast_fu_809_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_49_i20_cast_fu_920_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_916_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_mid2_fu_933_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp2_stage1_flag00000000 : BOOLEAN;
    signal tmp_24_fu_953_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_496_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_573_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_596_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_824_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_937_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal tmp_6_fu_665_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_752_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_775_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_fu_513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal outNeurons_s_fu_527_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_983_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal neuron_assign_fu_620_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_57_i_fu_624_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_fu_635_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_fu_647_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_cast_fu_643_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl1_cast_fu_655_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_60_i_fu_659_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond3_fu_682_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal outNeurons_2_fu_696_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp23_cast_mid2_v_v_fu_710_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_992_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal neuron_assign_1_fu_799_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_57_i1_fu_803_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_60_i1_fu_818_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond5_fu_840_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal outNeurons_4_fu_854_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp2_mid2_v_fu_868_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl1_i_fu_884_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl1_i15_cast_fu_891_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_i_fu_877_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal neuronIndex_fu_895_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_46_i17_cast_fu_901_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp2_mid2_fu_871_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_25_fu_964_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_983_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_983_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_983_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_992_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_992_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_992_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal grp_fu_983_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_983_p20 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_992_p00 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_992_p20 : STD_LOGIC_VECTOR (13 downto 0);

    component NeuralNetwork_muldEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component NeuralNetwork_muleOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component NeuralNetwork_macfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component NeuralNetwork_macg8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (12 downto 0);
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component run_classificatiobkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    resArray1_U : component run_classificatiobkb
    generic map (
        DataWidth => 32,
        AddressRange => 70,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => resArray1_address0,
        ce0 => resArray1_ce0,
        we0 => resArray1_we0,
        d0 => resArray1_d0,
        q0 => resArray1_q0);

    resArray2_U : component run_classificatiobkb
    generic map (
        DataWidth => 32,
        AddressRange => 70,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => resArray2_address0,
        ce0 => resArray2_ce0,
        we0 => resArray2_we0,
        d0 => resArray2_d0,
        q0 => resArray2_q0);

    NeuralNetwork_muldEe_U0 : component NeuralNetwork_muldEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 8,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => input_r_load_reg_1058,
        din1 => reg_466,
        ce => ap_const_logic_1,
        dout => grp_fu_564_p2);

    NeuralNetwork_muldEe_U1 : component NeuralNetwork_muldEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 8,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_474,
        din1 => reg_466,
        ce => ap_const_logic_1,
        dout => grp_fu_742_p2);

    NeuralNetwork_muleOg_U2 : component NeuralNetwork_muleOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 8,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_466,
        din1 => resArray2_load_2_reg_1255,
        ce => ap_const_logic_1,
        dout => grp_fu_928_p2);

    NeuralNetwork_macfYi_U3 : component NeuralNetwork_macfYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 8,
        din2_WIDTH => 7,
        dout_WIDTH => 13)
    port map (
        din0 => grp_fu_983_p0,
        din1 => grp_fu_983_p1,
        din2 => grp_fu_983_p2,
        dout => grp_fu_983_p3);

    NeuralNetwork_macg8j_U4 : component NeuralNetwork_macg8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 8,
        din2_WIDTH => 13,
        dout_WIDTH => 14)
    port map (
        din0 => grp_fu_992_p0,
        din1 => grp_fu_992_p1,
        din2 => grp_fu_992_p2,
        dout => grp_fu_992_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_484_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011011 = ap_const_boolean_0))) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state4 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011011 = ap_const_boolean_0))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_484_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state16))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond7_fu_608_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_block_pp1_stage1_flag00011011 = ap_const_boolean_0))) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state16)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_condition_pp1_exit_iter0_state16 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_block_pp1_stage1_flag00011011 = ap_const_boolean_0))) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_block_pp1_stage1_flag00011011 = ap_const_boolean_0)))) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond7_fu_608_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state30))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state26) and (exitcond4_fu_787_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_block_pp2_stage1_flag00011011 = ap_const_boolean_0))) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state30)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_condition_pp2_exit_iter0_state30 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_block_pp2_stage1_flag00011011 = ap_const_boolean_0))) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_block_pp2_stage1_flag00011011 = ap_const_boolean_0)))) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state26) and (exitcond4_fu_787_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv8_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state39) and (exitcond_fu_947_p2 = ap_const_lv1_1))) then 
                    ap_return_preg <= max_index_0_i_reg_443;
                end if; 
            end if;
        end if;
    end process;


    i_0_i1_reg_323_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i_0_i1_reg_323 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                i_0_i1_reg_323 <= i_reg_1081;
            end if; 
        end if;
    end process;

    i_0_i_reg_378_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                i_0_i_reg_378 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                i_0_i_reg_378 <= i_1_reg_1174;
            end if; 
        end if;
    end process;

    inNeurons_0_i1_reg_312_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_484_p2 = ap_const_lv1_1))) then 
                inNeurons_0_i1_reg_312 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (exitcond_flatten_reg_1020 = ap_const_lv1_0))) then 
                inNeurons_0_i1_reg_312 <= inNeurons_reg_1053;
            end if; 
        end if;
    end process;

    inNeurons_0_i6_reg_367_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond7_fu_608_p2 = ap_const_lv1_1))) then 
                inNeurons_0_i6_reg_367 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten1_reg_1113))) then 
                inNeurons_0_i6_reg_367 <= inNeurons_1_reg_1141;
            end if; 
        end if;
    end process;

    inNeurons_0_i_reg_422_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) and (exitcond4_fu_787_p2 = ap_const_lv1_1))) then 
                inNeurons_0_i_reg_422 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten2_reg_1211))) then 
                inNeurons_0_i_reg_422 <= inNeurons_2_reg_1240;
            end if; 
        end if;
    end process;

    indvar_flatten1_reg_345_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond7_fu_608_p2 = ap_const_lv1_1))) then 
                indvar_flatten1_reg_345 <= ap_const_lv13_0;
            elsif (((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten1_reg_1113))) then 
                indvar_flatten1_reg_345 <= indvar_flatten_next1_reg_1117;
            end if; 
        end if;
    end process;

    indvar_flatten2_reg_400_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) and (exitcond4_fu_787_p2 = ap_const_lv1_1))) then 
                indvar_flatten2_reg_400 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten2_reg_1211))) then 
                indvar_flatten2_reg_400 <= indvar_flatten_next2_reg_1215;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_290_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_484_p2 = ap_const_lv1_1))) then 
                indvar_flatten_reg_290 <= ap_const_lv13_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (exitcond_flatten_reg_1020 = ap_const_lv1_0))) then 
                indvar_flatten_reg_290 <= indvar_flatten_next_reg_1024;
            end if; 
        end if;
    end process;

    max_0_i_reg_433_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                max_0_i_reg_433 <= max_1_max_0_i_fu_969_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                max_0_i_reg_433 <= resArray1_q0;
            end if; 
        end if;
    end process;

    max_index_0_i_reg_443_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                max_index_0_i_reg_443 <= max_index_max_index_s_fu_976_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                max_index_0_i_reg_443 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    max_index_reg_455_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                max_index_reg_455 <= i_2_reg_1288;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                max_index_reg_455 <= ap_const_lv4_1;
            end if; 
        end if;
    end process;

    outNeurons_0_i1_reg_334_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond_i1_fu_579_p2 = ap_const_lv1_1))) then 
                outNeurons_0_i1_reg_334 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                outNeurons_0_i1_reg_334 <= outNeurons_1_reg_1103;
            end if; 
        end if;
    end process;

    outNeurons_0_i2_reg_279_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                outNeurons_0_i2_reg_279 <= outNeurons_reg_1010;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                outNeurons_0_i2_reg_279 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    outNeurons_0_i_reg_389_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) and (exitcond_i_fu_758_p2 = ap_const_lv1_1))) then 
                outNeurons_0_i_reg_389 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                outNeurons_0_i_reg_389 <= outNeurons_3_reg_1196;
            end if; 
        end if;
    end process;

    outNeurons_1_i1_reg_301_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_484_p2 = ap_const_lv1_1))) then 
                outNeurons_1_i1_reg_301 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (exitcond_flatten_reg_1020 = ap_const_lv1_0))) then 
                outNeurons_1_i1_reg_301 <= tmp_6_mid2_v_reg_1036;
            end if; 
        end if;
    end process;

    outNeurons_1_i3_reg_356_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond7_fu_608_p2 = ap_const_lv1_1))) then 
                outNeurons_1_i3_reg_356 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten1_reg_1113))) then 
                outNeurons_1_i3_reg_356 <= tmp_12_mid2_v_reg_1129;
            end if; 
        end if;
    end process;

    outNeurons_1_i_reg_411_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) and (exitcond4_fu_787_p2 = ap_const_lv1_1))) then 
                outNeurons_1_i_reg_411 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten2_reg_1211))) then 
                outNeurons_1_i_reg_411 <= tmp_23_mid2_v_reg_1228;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp0_iter1_exitcond_flatten_reg_1020 <= exitcond_flatten_reg_1020;
                ap_reg_pp0_iter1_tmp_6_mid2_v_reg_1036 <= tmp_6_mid2_v_reg_1036;
                ap_reg_pp0_iter2_exitcond_flatten_reg_1020 <= ap_reg_pp0_iter1_exitcond_flatten_reg_1020;
                exitcond_flatten_reg_1020 <= exitcond_flatten_fu_501_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp1_iter1_exitcond_flatten1_reg_1113 <= exitcond_flatten1_reg_1113;
                ap_reg_pp1_iter1_tmp_12_mid2_v_reg_1129 <= tmp_12_mid2_v_reg_1129;
                ap_reg_pp1_iter2_exitcond_flatten1_reg_1113 <= ap_reg_pp1_iter1_exitcond_flatten1_reg_1113;
                ap_reg_pp1_iter2_tmp_12_mid2_v_reg_1129 <= ap_reg_pp1_iter1_tmp_12_mid2_v_reg_1129;
                exitcond_flatten1_reg_1113 <= exitcond_flatten1_fu_670_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp2_iter1_exitcond_flatten2_reg_1211 <= exitcond_flatten2_reg_1211;
                ap_reg_pp2_iter1_tmp_23_mid2_v_reg_1228 <= tmp_23_mid2_v_reg_1228;
                ap_reg_pp2_iter2_exitcond_flatten2_reg_1211 <= ap_reg_pp2_iter1_exitcond_flatten2_reg_1211;
                ap_reg_pp2_iter2_tmp_23_mid2_v_reg_1228 <= ap_reg_pp2_iter1_tmp_23_mid2_v_reg_1228;
                exitcond_flatten2_reg_1211 <= exitcond_flatten2_fu_828_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                i_1_reg_1174 <= i_1_fu_764_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state39) and (ap_const_lv1_0 = exitcond_fu_947_p2))) then
                i_2_reg_1288 <= i_2_fu_958_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                i_reg_1081 <= i_fu_585_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten_fu_501_p2))) then
                inNeurons_0_i1_mid2_reg_1029 <= inNeurons_0_i1_mid2_fu_519_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten1_fu_670_p2))) then
                inNeurons_0_i6_mid2_reg_1122 <= inNeurons_0_i6_mid2_fu_688_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten2_fu_828_p2))) then
                inNeurons_0_i_mid2_reg_1220 <= inNeurons_0_i_mid2_fu_846_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_block_pp1_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_0 = exitcond_flatten1_reg_1113))) then
                inNeurons_1_reg_1141 <= inNeurons_1_fu_719_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_block_pp2_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0) and (ap_const_lv1_0 = exitcond_flatten2_reg_1211))) then
                inNeurons_2_reg_1240 <= inNeurons_2_fu_911_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_1020 = ap_const_lv1_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0))) then
                inNeurons_reg_1053 <= inNeurons_fu_555_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0))) then
                indvar_flatten_next1_reg_1117 <= indvar_flatten_next1_fu_676_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0))) then
                indvar_flatten_next2_reg_1215 <= indvar_flatten_next2_fu_834_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0))) then
                indvar_flatten_next_reg_1024 <= indvar_flatten_next_fu_507_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (exitcond_flatten_reg_1020 = ap_const_lv1_0))) then
                input_r_load_reg_1058 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                max_1_reg_1293 <= resArray1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                    max_index_cast_reg_1275(3 downto 0) <= max_index_cast_fu_943_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                outNeurons_1_reg_1103 <= outNeurons_1_fu_614_p2;
                    tmp_s_reg_1094(6 downto 0) <= tmp_s_fu_604_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                outNeurons_3_reg_1196 <= outNeurons_3_fu_793_p2;
                    tmp_17_reg_1187(3 downto 0) <= tmp_17_fu_783_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                outNeurons_reg_1010 <= outNeurons_fu_490_p2;
                    tmp_reg_1001(6 downto 0) <= tmp_fu_479_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (exitcond_flatten_reg_1020 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_block_pp1_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp1_iter1_exitcond_flatten1_reg_1113)) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_block_pp2_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp2_iter1_exitcond_flatten2_reg_1211)))) then
                reg_466 <= weights_s_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state27))) then
                reg_470 <= bias_s_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_block_pp1_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp1_iter1_exitcond_flatten1_reg_1113)) or (ap_const_logic_1 = ap_CS_fsm_state38))) then
                reg_474 <= resArray1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp0_iter1_exitcond_flatten_reg_1020))) then
                resArray1_addr_1_reg_1073 <= tmp_6_mid2_fu_569_p1(7 - 1 downto 0);
                tmp_8_reg_1068 <= grp_fu_564_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_0 = exitcond_i1_fu_579_p2))) then
                resArray1_addr_2_reg_1086 <= tmp_7_fu_591_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_block_pp2_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp2_iter2_exitcond_flatten2_reg_1211))) then
                    resArray1_addr_5_reg_1270(3 downto 0) <= tmp_23_mid2_fu_933_p1(7 - 1 downto 0)(3 downto 0);
                tmp_22_reg_1265 <= grp_fu_928_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_block_pp1_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp1_iter2_exitcond_flatten1_reg_1113))) then
                resArray2_addr_1_reg_1166 <= tmp_12_mid2_fu_748_p1(7 - 1 downto 0);
                tmp_13_reg_1161 <= grp_fu_742_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) and (ap_const_lv1_0 = exitcond_i_fu_758_p2))) then
                resArray2_addr_2_reg_1179 <= tmp_15_fu_770_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_block_pp2_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp2_iter1_exitcond_flatten2_reg_1211))) then
                resArray2_load_2_reg_1255 <= resArray2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_block_pp1_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten1_reg_1113))) then
                tmp23_cast_mid2_v_reg_1136 <= tmp23_cast_mid2_v_fu_713_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_0 = exitcond_flatten1_fu_670_p2))) then
                tmp_12_mid2_v_reg_1129 <= tmp_12_mid2_v_fu_702_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0) and (ap_const_lv1_0 = exitcond_flatten2_fu_828_p2))) then
                tmp_23_mid2_v_reg_1228 <= tmp_23_mid2_v_fu_860_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_block_pp2_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_flatten2_reg_1211))) then
                tmp_49_i1_reg_1235 <= tmp_49_i1_fu_905_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                    tmp_60_i1_reg_1206(15 downto 2) <= tmp_60_i1_fu_818_p2(15 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = exitcond_flatten_fu_501_p2))) then
                tmp_6_mid2_v_reg_1036 <= tmp_6_mid2_v_fu_533_p3;
            end if;
        end if;
    end process;
    tmp_reg_1001(31 downto 7) <= "0000000000000000000000000";
    tmp_s_reg_1094(31 downto 7) <= "0000000000000000000000000";
    tmp_17_reg_1187(31 downto 4) <= "0000000000000000000000000000";
    tmp_60_i1_reg_1206(1 downto 0) <= "00";
    resArray1_addr_5_reg_1270(6 downto 4) <= "000";
    max_index_cast_reg_1275(7 downto 4) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_CS_fsm_state2, exitcond1_fu_484_p2, exitcond_flatten_fu_501_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_state11, exitcond_i1_fu_579_p2, ap_CS_fsm_state13, exitcond7_fu_608_p2, exitcond_flatten1_fu_670_p2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_state24, exitcond_i_fu_758_p2, ap_CS_fsm_state26, exitcond4_fu_787_p2, exitcond_flatten2_fu_828_p2, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_CS_fsm_state39, exitcond_fu_947_p2, ap_block_pp0_stage0_flag00011011, ap_block_pp0_stage1_flag00011011, ap_enable_reg_pp0_iter2, ap_block_pp1_stage0_flag00011011, ap_block_pp1_stage1_flag00011011, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3, ap_block_pp2_stage0_flag00011011, ap_block_pp2_stage1_flag00011011, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_484_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten_fu_501_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten_fu_501_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if (((ap_block_pp0_stage1_flag00011011 = ap_const_boolean_0) and not(((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond_i1_fu_579_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (exitcond7_fu_608_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_pp1_stage0 => 
                if (((ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and not(((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter3) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten1_fu_670_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter3) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten1_fu_670_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((ap_block_pp1_stage1_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (exitcond_i_fu_758_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state26) and (exitcond4_fu_787_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_pp2_stage0 => 
                if (((ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0) and not(((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter3) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter0) and (ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten2_fu_828_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                elsif ((((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter3) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_enable_reg_pp2_iter0) and (ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0) and (exitcond_flatten2_fu_828_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_pp2_stage1 => 
                if ((ap_block_pp2_stage1_flag00011011 = ap_const_boolean_0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                end if;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state39) and (exitcond_fu_947_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(4);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(11);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(12);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(20);
    ap_CS_fsm_pp2_stage1 <= ap_CS_fsm(21);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(5);
    ap_CS_fsm_state11 <= ap_CS_fsm(6);
    ap_CS_fsm_state12 <= ap_CS_fsm(7);
    ap_CS_fsm_state13 <= ap_CS_fsm(8);
    ap_CS_fsm_state14 <= ap_CS_fsm(9);
    ap_CS_fsm_state15 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(13);
    ap_CS_fsm_state24 <= ap_CS_fsm(14);
    ap_CS_fsm_state25 <= ap_CS_fsm(15);
    ap_CS_fsm_state26 <= ap_CS_fsm(16);
    ap_CS_fsm_state27 <= ap_CS_fsm(17);
    ap_CS_fsm_state28 <= ap_CS_fsm(18);
    ap_CS_fsm_state29 <= ap_CS_fsm(19);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state37 <= ap_CS_fsm(22);
    ap_CS_fsm_state38 <= ap_CS_fsm(23);
    ap_CS_fsm_state39 <= ap_CS_fsm(24);
    ap_CS_fsm_state40 <= ap_CS_fsm(25);
    ap_CS_fsm_state41 <= ap_CS_fsm(26);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp1_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp1_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp1_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp2_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp2_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp2_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state4_assign_proc : process(exitcond_flatten_fu_501_p2)
    begin
        if ((exitcond_flatten_fu_501_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state16_assign_proc : process(exitcond_flatten1_fu_670_p2)
    begin
        if ((exitcond_flatten1_fu_670_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state16 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state16 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state30_assign_proc : process(exitcond_flatten2_fu_828_p2)
    begin
        if ((exitcond_flatten2_fu_828_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state30 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state30 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state39, exitcond_fu_947_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state39) and (exitcond_fu_947_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1) and (ap_const_logic_0 = ap_enable_reg_pp0_iter2))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp1_iter0) and (ap_const_logic_0 = ap_enable_reg_pp1_iter1) and (ap_const_logic_0 = ap_enable_reg_pp1_iter2) and (ap_const_logic_0 = ap_enable_reg_pp1_iter3))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter3)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp2_iter0) and (ap_const_logic_0 = ap_enable_reg_pp2_iter1) and (ap_const_logic_0 = ap_enable_reg_pp2_iter2) and (ap_const_logic_0 = ap_enable_reg_pp2_iter3))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state39, exitcond_fu_947_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state39) and (exitcond_fu_947_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state39, exitcond_fu_947_p2, max_index_0_i_reg_443, ap_return_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state39) and (exitcond_fu_947_p2 = ap_const_lv1_1))) then 
            ap_return <= max_index_0_i_reg_443;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    bias_s_address0_assign_proc : process(tmp_fu_479_p1, ap_CS_fsm_state2, ap_CS_fsm_state13, ap_CS_fsm_state26, tmp_57_i_cast_fu_630_p1, tmp_57_i1_cast_fu_809_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            bias_s_address0 <= tmp_57_i1_cast_fu_809_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            bias_s_address0 <= tmp_57_i_cast_fu_630_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            bias_s_address0 <= tmp_fu_479_p1(8 - 1 downto 0);
        else 
            bias_s_address0 <= "XXXXXXXX";
        end if; 
    end process;


    bias_s_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state13, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state26))) then 
            bias_s_ce0 <= ap_const_logic_1;
        else 
            bias_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_484_p2 <= "1" when (outNeurons_0_i2_reg_279 = ap_const_lv7_46) else "0";
    exitcond2_fu_513_p2 <= "1" when (inNeurons_0_i1_phi_fu_316_p4 = ap_const_lv7_50) else "0";
    exitcond3_fu_682_p2 <= "1" when (inNeurons_0_i6_phi_fu_371_p4 = ap_const_lv7_46) else "0";
    exitcond4_fu_787_p2 <= "1" when (outNeurons_0_i_reg_389 = ap_const_lv4_A) else "0";
    exitcond5_fu_840_p2 <= "1" when (inNeurons_0_i_phi_fu_426_p4 = ap_const_lv7_46) else "0";
    exitcond7_fu_608_p2 <= "1" when (outNeurons_0_i1_reg_334 = ap_const_lv7_46) else "0";
    exitcond_flatten1_fu_670_p2 <= "1" when (indvar_flatten1_phi_fu_349_p4 = ap_const_lv13_1324) else "0";
    exitcond_flatten2_fu_828_p2 <= "1" when (indvar_flatten2_phi_fu_404_p4 = ap_const_lv10_2BC) else "0";
    exitcond_flatten_fu_501_p2 <= "1" when (indvar_flatten_phi_fu_294_p4 = ap_const_lv13_15E0) else "0";
    exitcond_fu_947_p2 <= "1" when (max_index_reg_455 = ap_const_lv4_A) else "0";
    exitcond_i1_fu_579_p2 <= "1" when (i_0_i1_reg_323 = ap_const_lv7_46) else "0";
    exitcond_i_fu_758_p2 <= "1" when (i_0_i_reg_378 = ap_const_lv7_46) else "0";
    grp_fu_983_p0 <= grp_fu_983_p00(7 - 1 downto 0);
    grp_fu_983_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(inNeurons_0_i1_mid2_reg_1029),13));
    grp_fu_983_p1 <= ap_const_lv13_46(8 - 1 downto 0);
    grp_fu_983_p2 <= grp_fu_983_p20(7 - 1 downto 0);
    grp_fu_983_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_mid2_v_reg_1036),13));
    grp_fu_992_p0 <= grp_fu_992_p00(7 - 1 downto 0);
    grp_fu_992_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(inNeurons_0_i6_mid2_reg_1122),14));
    grp_fu_992_p1 <= ap_const_lv14_46(8 - 1 downto 0);
    grp_fu_992_p2 <= grp_fu_992_p20(13 - 1 downto 0);
    grp_fu_992_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp23_cast_mid2_v_reg_1136),14));
    i_1_fu_764_p2 <= std_logic_vector(unsigned(i_0_i_reg_378) + unsigned(ap_const_lv7_1));
    i_2_fu_958_p2 <= std_logic_vector(unsigned(max_index_reg_455) + unsigned(ap_const_lv4_1));
    i_fu_585_p2 <= std_logic_vector(unsigned(i_0_i1_reg_323) + unsigned(ap_const_lv7_1));
    inNeurons_0_i1_mid2_fu_519_p3 <= 
        ap_const_lv7_0 when (exitcond2_fu_513_p2(0) = '1') else 
        inNeurons_0_i1_phi_fu_316_p4;

    inNeurons_0_i1_phi_fu_316_p4_assign_proc : process(inNeurons_0_i1_reg_312, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_1020, inNeurons_reg_1053, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_flatten_reg_1020 = ap_const_lv1_0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            inNeurons_0_i1_phi_fu_316_p4 <= inNeurons_reg_1053;
        else 
            inNeurons_0_i1_phi_fu_316_p4 <= inNeurons_0_i1_reg_312;
        end if; 
    end process;

    inNeurons_0_i6_mid2_fu_688_p3 <= 
        ap_const_lv7_0 when (exitcond3_fu_682_p2(0) = '1') else 
        inNeurons_0_i6_phi_fu_371_p4;

    inNeurons_0_i6_phi_fu_371_p4_assign_proc : process(inNeurons_0_i6_reg_367, ap_enable_reg_pp1_iter1, exitcond_flatten1_reg_1113, ap_CS_fsm_pp1_stage0, inNeurons_1_reg_1141, ap_block_pp1_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_lv1_0 = exitcond_flatten1_reg_1113) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0))) then 
            inNeurons_0_i6_phi_fu_371_p4 <= inNeurons_1_reg_1141;
        else 
            inNeurons_0_i6_phi_fu_371_p4 <= inNeurons_0_i6_reg_367;
        end if; 
    end process;

    inNeurons_0_i_mid2_fu_846_p3 <= 
        ap_const_lv7_0 when (exitcond5_fu_840_p2(0) = '1') else 
        inNeurons_0_i_phi_fu_426_p4;

    inNeurons_0_i_phi_fu_426_p4_assign_proc : process(inNeurons_0_i_reg_422, ap_enable_reg_pp2_iter1, exitcond_flatten2_reg_1211, ap_CS_fsm_pp2_stage0, inNeurons_2_reg_1240, ap_block_pp2_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_lv1_0 = exitcond_flatten2_reg_1211) and (ap_block_pp2_stage0_flag00000000 = ap_const_boolean_0))) then 
            inNeurons_0_i_phi_fu_426_p4 <= inNeurons_2_reg_1240;
        else 
            inNeurons_0_i_phi_fu_426_p4 <= inNeurons_0_i_reg_422;
        end if; 
    end process;

    inNeurons_1_fu_719_p2 <= std_logic_vector(unsigned(inNeurons_0_i6_mid2_reg_1122) + unsigned(ap_const_lv7_1));
    inNeurons_2_fu_911_p2 <= std_logic_vector(unsigned(inNeurons_0_i_mid2_reg_1220) + unsigned(ap_const_lv7_1));
    inNeurons_fu_555_p2 <= std_logic_vector(unsigned(inNeurons_0_i1_mid2_reg_1029) + unsigned(ap_const_lv7_1));

    indvar_flatten1_phi_fu_349_p4_assign_proc : process(indvar_flatten1_reg_345, ap_enable_reg_pp1_iter1, exitcond_flatten1_reg_1113, ap_CS_fsm_pp1_stage0, indvar_flatten_next1_reg_1117, ap_block_pp1_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_lv1_0 = exitcond_flatten1_reg_1113) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0))) then 
            indvar_flatten1_phi_fu_349_p4 <= indvar_flatten_next1_reg_1117;
        else 
            indvar_flatten1_phi_fu_349_p4 <= indvar_flatten1_reg_345;
        end if; 
    end process;


    indvar_flatten2_phi_fu_404_p4_assign_proc : process(indvar_flatten2_reg_400, ap_enable_reg_pp2_iter1, exitcond_flatten2_reg_1211, ap_CS_fsm_pp2_stage0, indvar_flatten_next2_reg_1215, ap_block_pp2_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_lv1_0 = exitcond_flatten2_reg_1211) and (ap_block_pp2_stage0_flag00000000 = ap_const_boolean_0))) then 
            indvar_flatten2_phi_fu_404_p4 <= indvar_flatten_next2_reg_1215;
        else 
            indvar_flatten2_phi_fu_404_p4 <= indvar_flatten2_reg_400;
        end if; 
    end process;

    indvar_flatten_next1_fu_676_p2 <= std_logic_vector(unsigned(indvar_flatten1_phi_fu_349_p4) + unsigned(ap_const_lv13_1));
    indvar_flatten_next2_fu_834_p2 <= std_logic_vector(unsigned(indvar_flatten2_phi_fu_404_p4) + unsigned(ap_const_lv10_1));
    indvar_flatten_next_fu_507_p2 <= std_logic_vector(unsigned(indvar_flatten_phi_fu_294_p4) + unsigned(ap_const_lv13_1));

    indvar_flatten_phi_fu_294_p4_assign_proc : process(indvar_flatten_reg_290, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_1020, indvar_flatten_next_reg_1024, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_flatten_reg_1020 = ap_const_lv1_0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            indvar_flatten_phi_fu_294_p4 <= indvar_flatten_next_reg_1024;
        else 
            indvar_flatten_phi_fu_294_p4 <= indvar_flatten_reg_290;
        end if; 
    end process;

    input_r_address0 <= tmp_9_fu_544_p1(7 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00011001)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_1_max_0_i_fu_969_p3 <= 
        max_1_reg_1293 when (tmp_25_fu_964_p2(0) = '1') else 
        max_0_i_reg_433;
    max_index_cast_fu_943_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_index_reg_455),8));
    max_index_max_index_s_fu_976_p3 <= 
        max_index_cast_reg_1275 when (tmp_25_fu_964_p2(0) = '1') else 
        max_index_0_i_reg_443;
    neuronIndex_fu_895_p2 <= std_logic_vector(unsigned(p_shl1_i15_cast_fu_891_p1) + unsigned(p_shl_i_fu_877_p3));
    neuron_assign_1_fu_799_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(outNeurons_0_i_reg_389),8));
    neuron_assign_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(outNeurons_0_i1_reg_334),8));
    outNeurons_1_fu_614_p2 <= std_logic_vector(unsigned(outNeurons_0_i1_reg_334) + unsigned(ap_const_lv7_1));

    outNeurons_1_i1_phi_fu_305_p4_assign_proc : process(outNeurons_1_i1_reg_301, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_1020, tmp_6_mid2_v_reg_1036, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (exitcond_flatten_reg_1020 = ap_const_lv1_0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            outNeurons_1_i1_phi_fu_305_p4 <= tmp_6_mid2_v_reg_1036;
        else 
            outNeurons_1_i1_phi_fu_305_p4 <= outNeurons_1_i1_reg_301;
        end if; 
    end process;


    outNeurons_1_i3_phi_fu_360_p4_assign_proc : process(outNeurons_1_i3_reg_356, ap_enable_reg_pp1_iter1, exitcond_flatten1_reg_1113, ap_CS_fsm_pp1_stage0, tmp_12_mid2_v_reg_1129, ap_block_pp1_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_lv1_0 = exitcond_flatten1_reg_1113) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0))) then 
            outNeurons_1_i3_phi_fu_360_p4 <= tmp_12_mid2_v_reg_1129;
        else 
            outNeurons_1_i3_phi_fu_360_p4 <= outNeurons_1_i3_reg_356;
        end if; 
    end process;


    outNeurons_1_i_phi_fu_415_p4_assign_proc : process(outNeurons_1_i_reg_411, ap_enable_reg_pp2_iter1, exitcond_flatten2_reg_1211, ap_CS_fsm_pp2_stage0, tmp_23_mid2_v_reg_1228, ap_block_pp2_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_lv1_0 = exitcond_flatten2_reg_1211) and (ap_block_pp2_stage0_flag00000000 = ap_const_boolean_0))) then 
            outNeurons_1_i_phi_fu_415_p4 <= tmp_23_mid2_v_reg_1228;
        else 
            outNeurons_1_i_phi_fu_415_p4 <= outNeurons_1_i_reg_411;
        end if; 
    end process;

    outNeurons_2_fu_696_p2 <= std_logic_vector(unsigned(outNeurons_1_i3_phi_fu_360_p4) + unsigned(ap_const_lv7_1));
    outNeurons_3_fu_793_p2 <= std_logic_vector(unsigned(outNeurons_0_i_reg_389) + unsigned(ap_const_lv4_1));
    outNeurons_4_fu_854_p2 <= std_logic_vector(unsigned(outNeurons_1_i_phi_fu_415_p4) + unsigned(ap_const_lv4_1));
    outNeurons_fu_490_p2 <= std_logic_vector(unsigned(outNeurons_0_i2_reg_279) + unsigned(ap_const_lv7_1));
    outNeurons_s_fu_527_p2 <= std_logic_vector(unsigned(outNeurons_1_i1_phi_fu_305_p4) + unsigned(ap_const_lv7_1));
        p_shl1_cast_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl1_fu_647_p3),12));

    p_shl1_fu_647_p3 <= (reg_470 & ap_const_lv1_0);
    p_shl1_i15_cast_fu_891_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_i_fu_884_p3),10));
    p_shl1_i_fu_884_p3 <= (inNeurons_0_i_mid2_reg_1220 & ap_const_lv1_0);
        p_shl_cast_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_shl_fu_635_p3),12));

    p_shl_fu_635_p3 <= (reg_470 & ap_const_lv3_0);
    p_shl_i_fu_877_p3 <= (inNeurons_0_i_mid2_reg_1220 & ap_const_lv3_0);

    resArray1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp2_stage1, tmp_reg_1001, ap_CS_fsm_pp0_stage1, resArray1_addr_1_reg_1073, ap_CS_fsm_state11, resArray1_addr_2_reg_1086, ap_CS_fsm_pp1_stage0, tmp_17_reg_1187, ap_CS_fsm_pp2_stage0, resArray1_addr_5_reg_1270, ap_CS_fsm_state39, ap_enable_reg_pp0_iter2, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter3, ap_CS_fsm_state3, ap_block_pp0_stage0_flag00000000, ap_CS_fsm_state12, ap_block_pp1_stage0_flag00000000, ap_CS_fsm_state29, ap_block_pp2_stage0_flag00000000, ap_block_pp0_stage1_flag00000000, tmp_6_mid2_fu_569_p1, tmp_7_fu_591_p1, tmp_10_fu_727_p1, tmp_23_mid2_fu_933_p1, ap_block_pp2_stage1_flag00000000, tmp_24_fu_953_p1, ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            resArray1_address0 <= tmp_24_fu_953_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            resArray1_address0 <= ap_const_lv7_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter3))) then 
            resArray1_address0 <= resArray1_addr_5_reg_1270;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_logic_1 = ap_enable_reg_pp2_iter2) and (ap_block_pp2_stage1_flag00000000 = ap_const_boolean_0))) then 
            resArray1_address0 <= tmp_23_mid2_fu_933_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            resArray1_address0 <= tmp_17_reg_1187(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0))) then 
            resArray1_address0 <= tmp_10_fu_727_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            resArray1_address0 <= resArray1_addr_2_reg_1086;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            resArray1_address0 <= tmp_7_fu_591_p1(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
            resArray1_address0 <= resArray1_addr_1_reg_1073;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
            resArray1_address0 <= tmp_6_mid2_fu_569_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            resArray1_address0 <= tmp_reg_1001(7 - 1 downto 0);
        else 
            resArray1_address0 <= "XXXXXXX";
        end if; 
    end process;


    resArray1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp2_stage1, ap_block_pp2_stage1_flag00011001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00011001, ap_CS_fsm_state11, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_flag00011001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_flag00011001, ap_CS_fsm_state39, ap_enable_reg_pp0_iter2, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter3, ap_CS_fsm_state3, ap_CS_fsm_state12, ap_CS_fsm_state29, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0)) or (ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2)) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_block_pp2_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter2)) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter3)) or (ap_const_logic_1 = ap_CS_fsm_state37))) then 
            resArray1_ce0 <= ap_const_logic_1;
        else 
            resArray1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    resArray1_d0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp2_iter3, ap_CS_fsm_state3, ap_CS_fsm_state12, ap_CS_fsm_state29, ap_block_pp2_stage0_flag00000000, ap_block_pp0_stage1_flag00000000, tmp_4_fu_496_p1, tmp_1_fu_573_p2, tmp_18_fu_824_p1, tmp_23_fu_937_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter3))) then 
            resArray1_d0 <= tmp_23_fu_937_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            resArray1_d0 <= tmp_18_fu_824_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            resArray1_d0 <= ap_const_lv32_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2))) then 
            resArray1_d0 <= tmp_1_fu_573_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            resArray1_d0 <= tmp_4_fu_496_p1;
        else 
            resArray1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    resArray1_we0_assign_proc : process(ap_reg_pp0_iter2_exitcond_flatten_reg_1020, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00011001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_flag00011001, ap_reg_pp2_iter2_exitcond_flatten2_reg_1211, ap_enable_reg_pp0_iter2, ap_enable_reg_pp2_iter3, ap_CS_fsm_state3, ap_CS_fsm_state12, ap_CS_fsm_state29, tmp_2_fu_596_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter2) and (ap_const_lv1_0 = ap_reg_pp0_iter2_exitcond_flatten_reg_1020)) or ((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_1 = tmp_2_fu_596_p3)) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp2_iter2_exitcond_flatten2_reg_1211) and (ap_const_logic_1 = ap_enable_reg_pp2_iter3)))) then 
            resArray1_we0 <= ap_const_logic_1;
        else 
            resArray1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    resArray2_address0_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_enable_reg_pp2_iter1, tmp_s_reg_1094, ap_CS_fsm_pp1_stage0, resArray2_addr_1_reg_1166, ap_CS_fsm_state24, resArray2_addr_2_reg_1179, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3, ap_CS_fsm_state15, ap_block_pp1_stage0_flag00000000, ap_CS_fsm_state25, ap_block_pp2_stage0_flag00000000, tmp_12_mid2_fu_748_p1, ap_block_pp1_stage1_flag00000000, tmp_15_fu_770_p1, tmp_19_fu_916_p1)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00000000 = ap_const_boolean_0))) then 
            resArray2_address0 <= tmp_19_fu_916_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            resArray2_address0 <= resArray2_addr_2_reg_1179;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            resArray2_address0 <= tmp_15_fu_770_p1(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter3))) then 
            resArray2_address0 <= resArray2_addr_1_reg_1166;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2) and (ap_block_pp1_stage1_flag00000000 = ap_const_boolean_0))) then 
            resArray2_address0 <= tmp_12_mid2_fu_748_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            resArray2_address0 <= tmp_s_reg_1094(7 - 1 downto 0);
        else 
            resArray2_address0 <= "XXXXXXX";
        end if; 
    end process;


    resArray2_ce0_assign_proc : process(ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_flag00011001, ap_enable_reg_pp2_iter1, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_flag00011001, ap_CS_fsm_state24, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_flag00011001, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3, ap_CS_fsm_state15, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state25) or ((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_block_pp1_stage1_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter2)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter3)))) then 
            resArray2_ce0 <= ap_const_logic_1;
        else 
            resArray2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    resArray2_d0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter3, ap_CS_fsm_state15, ap_block_pp1_stage0_flag00000000, ap_CS_fsm_state25, tmp_6_fu_665_p1, tmp_14_fu_752_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            resArray2_d0 <= ap_const_lv32_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter3))) then 
            resArray2_d0 <= tmp_14_fu_752_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            resArray2_d0 <= tmp_6_fu_665_p1;
        else 
            resArray2_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    resArray2_we0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_flag00011001, ap_reg_pp1_iter2_exitcond_flatten1_reg_1113, ap_enable_reg_pp1_iter3, ap_CS_fsm_state15, ap_CS_fsm_state25, tmp_16_fu_775_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = ap_reg_pp1_iter2_exitcond_flatten1_reg_1113) and (ap_const_logic_1 = ap_enable_reg_pp1_iter3)) or ((ap_const_logic_1 = ap_CS_fsm_state25) and (ap_const_lv1_1 = tmp_16_fu_775_p3)))) then 
            resArray2_we0 <= ap_const_logic_1;
        else 
            resArray2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp23_cast_mid2_v_fu_713_p2 <= std_logic_vector(unsigned(tmp23_cast_mid2_v_v_fu_710_p1) + unsigned(ap_const_lv13_15E0));
    tmp23_cast_mid2_v_v_fu_710_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_mid2_v_reg_1129),13));
    tmp2_mid2_fu_871_p2 <= std_logic_vector(unsigned(tmp2_mid2_v_fu_868_p1) + unsigned(ap_const_lv14_2904));
    tmp2_mid2_v_fu_868_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_mid2_v_reg_1228),14));
    tmp_10_fu_727_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(inNeurons_0_i6_mid2_reg_1122),32));
    tmp_12_mid2_fu_748_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp1_iter2_tmp_12_mid2_v_reg_1129),32));
    tmp_12_mid2_v_fu_702_p3 <= 
        outNeurons_2_fu_696_p2 when (exitcond3_fu_682_p2(0) = '1') else 
        outNeurons_1_i3_phi_fu_360_p4;
    tmp_14_fu_752_p2 <= std_logic_vector(unsigned(resArray2_q0) + unsigned(tmp_13_reg_1161));
    tmp_15_fu_770_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_378),32));
    tmp_16_fu_775_p3 <= resArray2_q0(31 downto 31);
    tmp_17_fu_783_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(outNeurons_0_i_reg_389),32));
        tmp_18_fu_824_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_60_i1_reg_1206),32));

    tmp_19_fu_916_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(inNeurons_0_i_mid2_reg_1220),32));
    tmp_1_fu_573_p2 <= std_logic_vector(unsigned(resArray1_q0) + unsigned(tmp_8_reg_1068));
    tmp_23_fu_937_p2 <= std_logic_vector(unsigned(tmp_22_reg_1265) + unsigned(resArray1_q0));
    tmp_23_mid2_fu_933_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp2_iter2_tmp_23_mid2_v_reg_1228),32));
    tmp_23_mid2_v_fu_860_p3 <= 
        outNeurons_4_fu_854_p2 when (exitcond5_fu_840_p2(0) = '1') else 
        outNeurons_1_i_phi_fu_415_p4;
    tmp_24_fu_953_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_index_reg_455),32));
    tmp_25_fu_964_p2 <= "1" when (signed(max_1_reg_1293) > signed(max_0_i_reg_433)) else "0";
    tmp_2_fu_596_p3 <= resArray1_q0(31 downto 31);
    tmp_46_i17_cast_fu_901_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(neuronIndex_fu_895_p2),14));
    tmp_49_i1_fu_905_p2 <= std_logic_vector(unsigned(tmp_46_i17_cast_fu_901_p1) + unsigned(tmp2_mid2_fu_871_p2));
    tmp_49_i20_cast_fu_920_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_49_i1_reg_1235),32));
    tmp_49_i9_cast_fu_734_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_992_p3),32));
    tmp_49_i_cast_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_983_p3),32));
        tmp_4_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bias_s_q0),32));

    tmp_57_i1_cast_fu_809_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_57_i1_fu_803_p2),32));
    tmp_57_i1_fu_803_p2 <= std_logic_vector(unsigned(neuron_assign_1_fu_799_p1) + unsigned(ap_const_lv8_8C));
    tmp_57_i_cast_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_57_i_fu_624_p2),32));
    tmp_57_i_fu_624_p2 <= std_logic_vector(unsigned(neuron_assign_fu_620_p1) + unsigned(ap_const_lv8_46));
    tmp_60_i1_fu_818_p0 <= reg_470;
    tmp_60_i1_fu_818_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_60_i1_fu_818_p0) * signed('0' &ap_const_lv16_64))), 16));
    tmp_60_i_fu_659_p2 <= std_logic_vector(signed(p_shl_cast_fu_643_p1) + signed(p_shl1_cast_fu_655_p1));
        tmp_6_fu_665_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_60_i_fu_659_p2),32));

    tmp_6_mid2_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp0_iter1_tmp_6_mid2_v_reg_1036),32));
    tmp_6_mid2_v_fu_533_p3 <= 
        outNeurons_s_fu_527_p2 when (exitcond2_fu_513_p2(0) = '1') else 
        outNeurons_1_i1_phi_fu_305_p4;
    tmp_7_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i1_reg_323),32));
    tmp_9_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(inNeurons_0_i1_mid2_reg_1029),32));
    tmp_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(outNeurons_0_i2_reg_279),32));
    tmp_s_fu_604_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(outNeurons_0_i1_reg_334),32));

    weights_s_address0_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_block_pp1_stage0_flag00000000, ap_block_pp2_stage0_flag00000000, tmp_49_i_cast_fu_551_p1, ap_block_pp0_stage1_flag00000000, tmp_49_i9_cast_fu_734_p1, tmp_49_i20_cast_fu_920_p1)
    begin
        if (((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00000000 = ap_const_boolean_0))) then 
            weights_s_address0 <= tmp_49_i20_cast_fu_920_p1(14 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0))) then 
            weights_s_address0 <= tmp_49_i9_cast_fu_734_p1(14 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00000000 = ap_const_boolean_0))) then 
            weights_s_address0 <= tmp_49_i_cast_fu_551_p1(14 - 1 downto 0);
        else 
            weights_s_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    weights_s_ce0_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp2_iter1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_flag00011001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_flag00011001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_flag00011001)
    begin
        if ((((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_block_pp0_stage1_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0)) or ((ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0)))) then 
            weights_s_ce0 <= ap_const_logic_1;
        else 
            weights_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
