// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// ==============================================================

#include <systemc>
#include <iostream>
#include <cstdlib>
#include <cstddef>
#include <stdint.h>
#include "SysCFileHandler.h"
#include "ap_int.h"
#include "ap_fixed.h"
#include <complex>
#include <stdbool.h>
#include "autopilot_cbe.h"
#include "ap_stream.h"
#include "hls_stream.h"
#include "hls_half.h"
#include "hls_signal_handler.h"

using namespace std;
using namespace sc_core;
using namespace sc_dt;


// [dump_struct_tree [build_nameSpaceTree] dumpedStructList] ---------->


// [dump_enumeration [get_enumeration_list]] ---------->


// wrapc file define: "input_r"
#define AUTOTB_TVIN_input_r  "../tv/cdatafile/c.NeuralNetwork.autotvin_input_r.dat"
// wrapc file define: "biasWeight_input_r"
#define AUTOTB_TVIN_biasWeight_input_r  "../tv/cdatafile/c.NeuralNetwork.autotvin_biasWeight_input_r.dat"
// wrapc file define: "runNN_r"
#define AUTOTB_TVIN_runNN_r  "../tv/cdatafile/c.NeuralNetwork.autotvin_runNN_r.dat"
// wrapc file define: "setBais_r"
#define AUTOTB_TVIN_setBais_r  "../tv/cdatafile/c.NeuralNetwork.autotvin_setBais_r.dat"
// wrapc file define: "setWeight_r"
#define AUTOTB_TVIN_setWeight_r  "../tv/cdatafile/c.NeuralNetwork.autotvin_setWeight_r.dat"
// wrapc file define: "ap_return"
#define AUTOTB_TVOUT_ap_return  "../tv/cdatafile/c.NeuralNetwork.autotvout_ap_return.dat"

#define INTER_TCL  "../tv/cdatafile/ref.tcl"

// tvout file define: "ap_return"
#define AUTOTB_TVOUT_PC_ap_return  "../tv/rtldatafile/rtl.NeuralNetwork.autotvout_ap_return.dat"

class INTER_TCL_FILE {
	public:
		INTER_TCL_FILE(const char* name) {
			mName = name;
			input_r_depth = 0;
			biasWeight_input_r_depth = 0;
			runNN_r_depth = 0;
			setBais_r_depth = 0;
			setWeight_r_depth = 0;
			ap_return_depth = 0;
			trans_num =0;
		}

		~INTER_TCL_FILE() {
			mFile.open(mName);
			if (!mFile.good()) {
				cout << "Failed to open file ref.tcl" << endl;
				exit (1);
			}
			string total_list = get_depth_list();
			mFile << "set depth_list {\n";
			mFile << total_list;
			mFile << "}\n";
			mFile << "set trans_num "<<trans_num<<endl;
			mFile.close();
		}

		string get_depth_list () {
			stringstream total_list;
			total_list << "{input_r " << input_r_depth << "}\n";
			total_list << "{biasWeight_input_r " << biasWeight_input_r_depth << "}\n";
			total_list << "{runNN_r " << runNN_r_depth << "}\n";
			total_list << "{setBais_r " << setBais_r_depth << "}\n";
			total_list << "{setWeight_r " << setWeight_r_depth << "}\n";
			total_list << "{ap_return " << ap_return_depth << "}\n";
			return total_list.str();
		}

		void set_num (int num , int* class_num) {
			(*class_num) = (*class_num) > num ? (*class_num) : num;
		}
	public:
		int input_r_depth;
		int biasWeight_input_r_depth;
		int runNN_r_depth;
		int setBais_r_depth;
		int setWeight_r_depth;
		int ap_return_depth;
		int trans_num;

	private:
		ofstream mFile;
		const char* mName;
};

extern unsigned char NeuralNetwork (
int input_r[80],
char biasWeight_input_r[11200],
char runNN_r,
char setBais_r,
char setWeight_r);

unsigned char AESL_WRAP_NeuralNetwork (
int input_r[80],
char biasWeight_input_r[11200],
char runNN_r,
char setBais_r,
char setWeight_r)
{
	refine_signal_handler();
	fstream wrapc_switch_file_token;
	wrapc_switch_file_token.open(".hls_cosim_wrapc_switch.log");
	int AESL_i;
	if (wrapc_switch_file_token.good())
	{
		CodeState = ENTER_WRAPC_PC;
		static unsigned AESL_transaction_pc = 0;
		string AESL_token;
		string AESL_num;
		static AESL_FILE_HANDLER aesl_fh;

		unsigned char AESL_return;

		// output port post check: "ap_return"
		aesl_fh.read(AUTOTB_TVOUT_PC_ap_return, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_ap_return, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_ap_return, AESL_token); // data

			sc_bv<8> ap_return_pc_buffer;
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'ap_return', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'ap_return', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					ap_return_pc_buffer = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_ap_return, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_ap_return))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: ap_return
				{
					// bitslice(7, 0)
					// {
						// celement: return(7, 0)
						// {
							sc_lv<8> return_lv0_0_1_0;
						// }
					// }

					// bitslice(7, 0)
					{
						// celement: return(7, 0)
						{
							// carray: (0) => (1) @ (0)
							{
								if (&(AESL_return) != NULL) // check the null address if the c port is array or others
								{
									return_lv0_0_1_0.range(7, 0) = sc_bv<8>(ap_return_pc_buffer.range(7, 0));
								}
							}
						}
					}

					// bitslice(7, 0)
					{
						// celement: return(7, 0)
						{
							// carray: (0) => (1) @ (0)
							{
								// sub                    : 
								// ori_name               : AESL_return
								// sub_1st_elem           : 
								// ori_name_1st_elem      : AESL_return
								// output_left_conversion : AESL_return
								// output_type_conversion : (return_lv0_0_1_0).to_uint64()
								if (&(AESL_return) != NULL) // check the null address if the c port is array or others
								{
									AESL_return = (return_lv0_0_1_0).to_uint64();
								}
							}
						}
					}
				}
			}
		}

		AESL_transaction_pc++;

		return AESL_return;
	}
	else
	{
		CodeState = ENTER_WRAPC;
		static unsigned AESL_transaction;

		static AESL_FILE_HANDLER aesl_fh;

		// "input_r"
		char* tvin_input_r = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_input_r);

		// "biasWeight_input_r"
		char* tvin_biasWeight_input_r = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_biasWeight_input_r);

		// "runNN_r"
		char* tvin_runNN_r = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_runNN_r);

		// "setBais_r"
		char* tvin_setBais_r = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_setBais_r);

		// "setWeight_r"
		char* tvin_setWeight_r = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_setWeight_r);

		// "ap_return"
		char* tvout_ap_return = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_ap_return);

		CodeState = DUMP_INPUTS;
		static INTER_TCL_FILE tcl_file(INTER_TCL);
		int leading_zero;

		// [[transaction]]
		sprintf(tvin_input_r, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_input_r, tvin_input_r);

		sc_bv<32>* input_r_tvin_wrapc_buffer = new sc_bv<32>[80];

		// RTL Name: input_r
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: input_r(31, 0)
				{
					// carray: (0) => (79) @ (1)
					for (int i_0 = 0; i_0 <= 79; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : input_r[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : input_r[0]
						// regulate_c_name       : input_r
						// input_type_conversion : input_r[i_0]
						if (&(input_r[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> input_r_tmp_mem;
							input_r_tmp_mem = input_r[i_0];
							input_r_tvin_wrapc_buffer[hls_map_index].range(31, 0) = input_r_tmp_mem.range(31, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 80; i++)
		{
			sprintf(tvin_input_r, "%s\n", (input_r_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_input_r, tvin_input_r);
		}

		tcl_file.set_num(80, &tcl_file.input_r_depth);
		sprintf(tvin_input_r, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_input_r, tvin_input_r);

		// release memory allocation
		delete [] input_r_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_biasWeight_input_r, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_biasWeight_input_r, tvin_biasWeight_input_r);

		sc_bv<8>* biasWeight_input_r_tvin_wrapc_buffer = new sc_bv<8>[11200];

		// RTL Name: biasWeight_input_r
		{
			// bitslice(7, 0)
			{
				int hls_map_index = 0;
				// celement: biasWeight_input_r(7, 0)
				{
					// carray: (0) => (11199) @ (1)
					for (int i_0 = 0; i_0 <= 11199; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : biasWeight_input_r[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : biasWeight_input_r[0]
						// regulate_c_name       : biasWeight_input_r
						// input_type_conversion : biasWeight_input_r[i_0]
						if (&(biasWeight_input_r[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> biasWeight_input_r_tmp_mem;
							biasWeight_input_r_tmp_mem = biasWeight_input_r[i_0];
							biasWeight_input_r_tvin_wrapc_buffer[hls_map_index].range(7, 0) = biasWeight_input_r_tmp_mem.range(7, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 11200; i++)
		{
			sprintf(tvin_biasWeight_input_r, "%s\n", (biasWeight_input_r_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_biasWeight_input_r, tvin_biasWeight_input_r);
		}

		tcl_file.set_num(11200, &tcl_file.biasWeight_input_r_depth);
		sprintf(tvin_biasWeight_input_r, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_biasWeight_input_r, tvin_biasWeight_input_r);

		// release memory allocation
		delete [] biasWeight_input_r_tvin_wrapc_buffer;

		// [[transaction]]
		sprintf(tvin_runNN_r, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_runNN_r, tvin_runNN_r);

		sc_bv<8> runNN_r_tvin_wrapc_buffer;

		// RTL Name: runNN_r
		{
			// bitslice(7, 0)
			{
				// celement: runNN_r(7, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : runNN_r
						// sub_1st_elem          : 
						// ori_name_1st_elem     : runNN_r
						// regulate_c_name       : runNN_r
						// input_type_conversion : runNN_r
						if (&(runNN_r) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> runNN_r_tmp_mem;
							runNN_r_tmp_mem = runNN_r;
							runNN_r_tvin_wrapc_buffer.range(7, 0) = runNN_r_tmp_mem.range(7, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_runNN_r, "%s\n", (runNN_r_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_runNN_r, tvin_runNN_r);
		}

		tcl_file.set_num(1, &tcl_file.runNN_r_depth);
		sprintf(tvin_runNN_r, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_runNN_r, tvin_runNN_r);

		// [[transaction]]
		sprintf(tvin_setBais_r, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_setBais_r, tvin_setBais_r);

		sc_bv<8> setBais_r_tvin_wrapc_buffer;

		// RTL Name: setBais_r
		{
			// bitslice(7, 0)
			{
				// celement: setBais_r(7, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : setBais_r
						// sub_1st_elem          : 
						// ori_name_1st_elem     : setBais_r
						// regulate_c_name       : setBais_r
						// input_type_conversion : setBais_r
						if (&(setBais_r) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> setBais_r_tmp_mem;
							setBais_r_tmp_mem = setBais_r;
							setBais_r_tvin_wrapc_buffer.range(7, 0) = setBais_r_tmp_mem.range(7, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_setBais_r, "%s\n", (setBais_r_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_setBais_r, tvin_setBais_r);
		}

		tcl_file.set_num(1, &tcl_file.setBais_r_depth);
		sprintf(tvin_setBais_r, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_setBais_r, tvin_setBais_r);

		// [[transaction]]
		sprintf(tvin_setWeight_r, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_setWeight_r, tvin_setWeight_r);

		sc_bv<8> setWeight_r_tvin_wrapc_buffer;

		// RTL Name: setWeight_r
		{
			// bitslice(7, 0)
			{
				// celement: setWeight_r(7, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : setWeight_r
						// sub_1st_elem          : 
						// ori_name_1st_elem     : setWeight_r
						// regulate_c_name       : setWeight_r
						// input_type_conversion : setWeight_r
						if (&(setWeight_r) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> setWeight_r_tmp_mem;
							setWeight_r_tmp_mem = setWeight_r;
							setWeight_r_tvin_wrapc_buffer.range(7, 0) = setWeight_r_tmp_mem.range(7, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_setWeight_r, "%s\n", (setWeight_r_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_setWeight_r, tvin_setWeight_r);
		}

		tcl_file.set_num(1, &tcl_file.setWeight_r_depth);
		sprintf(tvin_setWeight_r, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_setWeight_r, tvin_setWeight_r);

// [call_c_dut] ---------->

		CodeState = CALL_C_DUT;
		unsigned char AESL_return = NeuralNetwork(input_r, biasWeight_input_r, runNN_r, setBais_r, setWeight_r);

		CodeState = DUMP_OUTPUTS;

		// [[transaction]]
		sprintf(tvout_ap_return, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_ap_return, tvout_ap_return);

		sc_bv<8> ap_return_tvout_wrapc_buffer;

		// RTL Name: ap_return
		{
			// bitslice(7, 0)
			{
				// celement: return(7, 0)
				{
					// carray: (0) => (1) @ (0)
					{
						// sub                   : 
						// ori_name              : AESL_return
						// sub_1st_elem          : 
						// ori_name_1st_elem     : AESL_return
						// regulate_c_name       : return
						// input_type_conversion : AESL_return
						if (&(AESL_return) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<8> return_tmp_mem;
							return_tmp_mem = AESL_return;
							ap_return_tvout_wrapc_buffer.range(7, 0) = return_tmp_mem.range(7, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_ap_return, "%s\n", (ap_return_tvout_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_ap_return, tvout_ap_return);
		}

		tcl_file.set_num(1, &tcl_file.ap_return_depth);
		sprintf(tvout_ap_return, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_ap_return, tvout_ap_return);

		CodeState = DELETE_CHAR_BUFFERS;
		// release memory allocation: "input_r"
		delete [] tvin_input_r;
		// release memory allocation: "biasWeight_input_r"
		delete [] tvin_biasWeight_input_r;
		// release memory allocation: "runNN_r"
		delete [] tvin_runNN_r;
		// release memory allocation: "setBais_r"
		delete [] tvin_setBais_r;
		// release memory allocation: "setWeight_r"
		delete [] tvin_setWeight_r;
		// release memory allocation: "ap_return"
		delete [] tvout_ap_return;

		AESL_transaction++;

		tcl_file.set_num(AESL_transaction , &tcl_file.trans_num);

		return AESL_return;
	}
}

