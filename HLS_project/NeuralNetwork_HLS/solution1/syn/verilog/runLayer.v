// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module runLayer (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        layer,
        numOfOutNeurons,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        output_r_q0,
        weights_s_address0,
        weights_s_ce0,
        weights_s_q0,
        bias_s_address0,
        bias_s_ce0,
        bias_s_q0
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [3:0] layer;
input  [7:0] numOfOutNeurons;
output  [6:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [6:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
input  [31:0] output_r_q0;
output  [13:0] weights_s_address0;
output   weights_s_ce0;
input  [7:0] weights_s_q0;
output  [7:0] bias_s_address0;
output   bias_s_ce0;
input  [7:0] bias_s_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg[6:0] output_r_address0;
reg output_r_ce0;
reg output_r_we0;
reg[31:0] output_r_d0;
reg weights_s_ce0;
reg bias_s_ce0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_172;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state9;
wire   [7:0] tmp_21_i_fu_190_p2;
reg   [7:0] tmp_21_i_reg_408;
wire   [0:0] tmp_i2_fu_196_p2;
reg   [0:0] tmp_i2_reg_413;
wire   [13:0] startIndex_1_i_fu_230_p3;
reg   [13:0] startIndex_1_i_reg_418;
wire   [14:0] tmp_25_i_cast_fu_264_p1;
reg   [14:0] tmp_25_i_cast_reg_423;
wire   [7:0] tmp_1_cast_cast_fu_273_p1;
reg   [7:0] tmp_1_cast_cast_reg_428;
wire    ap_CS_fsm_state2;
wire   [6:0] outNeurons_1_fu_282_p2;
reg   [6:0] outNeurons_1_reg_436;
reg   [6:0] output_addr_reg_441;
wire   [0:0] tmp_2_fu_277_p2;
wire   [12:0] tmp_17_i_cast_fu_288_p1;
reg   [12:0] tmp_17_i_cast_reg_446;
wire   [31:0] tmp_4_fu_292_p1;
reg   [31:0] tmp_4_reg_451;
wire    ap_CS_fsm_state3;
wire   [6:0] inNeurons_1_fu_302_p2;
reg   [6:0] inNeurons_1_reg_459;
wire   [12:0] next_mul_fu_308_p2;
reg   [12:0] next_mul_reg_464;
wire   [0:0] exitcond_fu_296_p2;
wire   [12:0] tmp1_fu_351_p2;
reg   [12:0] tmp1_reg_469;
wire    ap_CS_fsm_state4;
reg  signed [7:0] weights_load_reg_489;
wire    ap_CS_fsm_state5;
reg  signed [31:0] input_load_reg_494;
wire    ap_CS_fsm_state6;
wire   [31:0] grp_fu_381_p2;
reg   [31:0] tmp_9_reg_504;
reg  signed [7:0] bias_load_reg_509;
reg   [6:0] outNeurons_reg_139;
wire    ap_CS_fsm_state10;
reg   [6:0] inNeurons_reg_150;
wire    ap_CS_fsm_state8;
reg   [12:0] phi_mul_reg_161;
wire   [31:0] tmp_1_fu_268_p1;
wire   [31:0] tmp_23_i_cast_fu_360_p1;
wire   [31:0] tmp_19_i_cast_fu_373_p1;
wire   [31:0] tmp_6_fu_386_p2;
wire  signed [31:0] grp_fu_395_p3;
wire   [2:0] tmp_10_fu_180_p1;
wire   [3:0] tmp_21_i_fu_190_p1;
wire   [0:0] tmp_11_fu_202_p3;
wire   [0:0] rev_fu_210_p2;
wire   [0:0] tmp_3_fu_224_p2;
wire   [13:0] p_mux_cast_fu_216_p3;
wire   [0:0] tmp_i1_fu_184_p2;
wire   [0:0] tmp_fu_246_p2;
wire   [5:0] p_i_fu_238_p3;
wire   [5:0] p_i_10_fu_252_p3;
wire  signed [6:0] p_i_cast9_fu_260_p1;
wire   [7:0] p_shl1_i_fu_322_p3;
wire   [9:0] p_shl_i_fu_314_p3;
wire   [9:0] p_shl1_i_cast_fu_330_p1;
wire   [9:0] neuronIndex_fu_334_p2;
wire   [12:0] neuronIndex_1_cast_fu_340_p1;
wire   [12:0] neuronIndex_1_fu_344_p3;
wire   [7:0] tmp_23_i_fu_356_p2;
wire   [13:0] tmp1_cast_fu_365_p1;
wire   [13:0] tmp_19_i_fu_368_p2;
wire   [6:0] grp_fu_395_p0;
reg   [9:0] ap_NS_fsm;
wire   [7:0] tmp_21_i_fu_190_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
end

NeuralNetwork_mulbkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 32 ))
NeuralNetwork_mulbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(input_load_reg_494),
    .din1(weights_load_reg_489),
    .ce(1'b1),
    .dout(grp_fu_381_p2)
);

NeuralNetwork_maccud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
NeuralNetwork_maccud_U2(
    .din0(grp_fu_395_p0),
    .din1(bias_load_reg_509),
    .din2(reg_172),
    .dout(grp_fu_395_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        inNeurons_reg_150 <= inNeurons_1_reg_459;
    end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_2_fu_277_p2 == 1'd1))) begin
        inNeurons_reg_150 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        outNeurons_reg_139 <= outNeurons_1_reg_436;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        outNeurons_reg_139 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        phi_mul_reg_161 <= next_mul_reg_464;
    end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_2_fu_277_p2 == 1'd1))) begin
        phi_mul_reg_161 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        bias_load_reg_509 <= bias_s_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        inNeurons_1_reg_459 <= inNeurons_1_fu_302_p2;
        tmp_4_reg_451[6 : 0] <= tmp_4_fu_292_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_load_reg_494 <= input_r_q0;
        weights_load_reg_489 <= weights_s_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_296_p2 == 1'd0))) begin
        next_mul_reg_464 <= next_mul_fu_308_p2;
        tmp1_reg_469 <= tmp1_fu_351_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        outNeurons_1_reg_436 <= outNeurons_1_fu_282_p2;
        tmp_1_cast_cast_reg_428[6 : 0] <= tmp_1_cast_cast_fu_273_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_2_fu_277_p2 == 1'd1))) begin
        output_addr_reg_441 <= tmp_1_fu_268_p1;
        tmp_17_i_cast_reg_446[6 : 0] <= tmp_17_i_cast_fu_288_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state9))) begin
        reg_172 <= output_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        startIndex_1_i_reg_418[2] <= startIndex_1_i_fu_230_p3[2];
startIndex_1_i_reg_418[8 : 5] <= startIndex_1_i_fu_230_p3[8 : 5];
startIndex_1_i_reg_418[13 : 10] <= startIndex_1_i_fu_230_p3[13 : 10];
        tmp_21_i_reg_408 <= tmp_21_i_fu_190_p2;
        tmp_25_i_cast_reg_423[3 : 0] <= tmp_25_i_cast_fu_264_p1[3 : 0];
tmp_25_i_cast_reg_423[6 : 5] <= tmp_25_i_cast_fu_264_p1[6 : 5];
        tmp_i2_reg_413 <= tmp_i2_fu_196_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_9_reg_504 <= grp_fu_381_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (tmp_2_fu_277_p2 == 1'd0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_2_fu_277_p2 == 1'd0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        bias_s_ce0 = 1'b1;
    end else begin
        bias_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        output_r_address0 = output_addr_reg_441;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        output_r_address0 = tmp_1_fu_268_p1;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        output_r_d0 = grp_fu_395_p3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        output_r_d0 = tmp_6_fu_386_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        output_r_d0 = 32'd0;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (tmp_2_fu_277_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        weights_s_ce0 = 1'b1;
    end else begin
        weights_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_2_fu_277_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == exitcond_fu_296_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bias_s_address0 = tmp_23_i_cast_fu_360_p1;

assign exitcond_fu_296_p2 = ((inNeurons_reg_150 == 7'd70) ? 1'b1 : 1'b0);

assign grp_fu_395_p0 = tmp_25_i_cast_reg_423;

assign inNeurons_1_fu_302_p2 = (inNeurons_reg_150 + 7'd1);

assign input_r_address0 = tmp_4_reg_451;

assign neuronIndex_1_cast_fu_340_p1 = neuronIndex_fu_334_p2;

assign neuronIndex_1_fu_344_p3 = ((tmp_i2_reg_413[0:0] === 1'b1) ? neuronIndex_1_cast_fu_340_p1 : phi_mul_reg_161);

assign neuronIndex_fu_334_p2 = (p_shl_i_fu_314_p3 + p_shl1_i_cast_fu_330_p1);

assign next_mul_fu_308_p2 = (phi_mul_reg_161 + 13'd70);

assign outNeurons_1_fu_282_p2 = (outNeurons_reg_139 + 7'd1);

assign p_i_10_fu_252_p3 = ((tmp_fu_246_p2[0:0] === 1'b1) ? p_i_fu_238_p3 : 6'd1);

assign p_i_cast9_fu_260_p1 = $signed(p_i_10_fu_252_p3);

assign p_i_fu_238_p3 = ((tmp_i1_fu_184_p2[0:0] === 1'b1) ? 6'd10 : 6'd36);

assign p_mux_cast_fu_216_p3 = ((tmp_i2_fu_196_p2[0:0] === 1'b1) ? 14'd10500 : 14'd5600);

assign p_shl1_i_cast_fu_330_p1 = p_shl1_i_fu_322_p3;

assign p_shl1_i_fu_322_p3 = {{inNeurons_reg_150}, {1'd0}};

assign p_shl_i_fu_314_p3 = {{inNeurons_reg_150}, {3'd0}};

assign rev_fu_210_p2 = (tmp_11_fu_202_p3 ^ 1'd1);

assign startIndex_1_i_fu_230_p3 = ((tmp_3_fu_224_p2[0:0] === 1'b1) ? p_mux_cast_fu_216_p3 : 14'd0);

assign tmp1_cast_fu_365_p1 = tmp1_reg_469;

assign tmp1_fu_351_p2 = (neuronIndex_1_fu_344_p3 + tmp_17_i_cast_reg_446);

assign tmp_10_fu_180_p1 = layer[2:0];

assign tmp_11_fu_202_p3 = layer[32'd1];

assign tmp_17_i_cast_fu_288_p1 = outNeurons_reg_139;

assign tmp_19_i_cast_fu_373_p1 = tmp_19_i_fu_368_p2;

assign tmp_19_i_fu_368_p2 = (tmp1_cast_fu_365_p1 + startIndex_1_i_reg_418);

assign tmp_1_cast_cast_fu_273_p1 = outNeurons_reg_139;

assign tmp_1_fu_268_p1 = outNeurons_reg_139;

assign tmp_21_i_fu_190_p1 = tmp_21_i_fu_190_p10;

assign tmp_21_i_fu_190_p10 = layer;

assign tmp_21_i_fu_190_p2 = (8'd70 * tmp_21_i_fu_190_p1);

assign tmp_23_i_cast_fu_360_p1 = tmp_23_i_fu_356_p2;

assign tmp_23_i_fu_356_p2 = (tmp_21_i_reg_408 + tmp_1_cast_cast_reg_428);

assign tmp_25_i_cast_fu_264_p1 = $unsigned(p_i_cast9_fu_260_p1);

assign tmp_2_fu_277_p2 = (($signed(tmp_1_cast_cast_fu_273_p1) < $signed(numOfOutNeurons)) ? 1'b1 : 1'b0);

assign tmp_3_fu_224_p2 = (tmp_i2_fu_196_p2 | rev_fu_210_p2);

assign tmp_4_fu_292_p1 = inNeurons_reg_150;

assign tmp_6_fu_386_p2 = (reg_172 + tmp_9_reg_504);

assign tmp_fu_246_p2 = (tmp_i1_fu_184_p2 | tmp_i2_fu_196_p2);

assign tmp_i1_fu_184_p2 = ((tmp_10_fu_180_p1 == 3'd1) ? 1'b1 : 1'b0);

assign tmp_i2_fu_196_p2 = ((tmp_10_fu_180_p1 == 3'd2) ? 1'b1 : 1'b0);

assign weights_s_address0 = tmp_19_i_cast_fu_373_p1;

always @ (posedge ap_clk) begin
    startIndex_1_i_reg_418[1:0] <= 2'b00;
    startIndex_1_i_reg_418[4:3] <= 2'b00;
    startIndex_1_i_reg_418[9] <= 1'b0;
    tmp_25_i_cast_reg_423[4] <= 1'b0;
    tmp_25_i_cast_reg_423[14:7] <= 8'b00000000;
    tmp_1_cast_cast_reg_428[7] <= 1'b0;
    tmp_17_i_cast_reg_446[12:7] <= 6'b000000;
    tmp_4_reg_451[31:7] <= 25'b0000000000000000000000000;
end

endmodule //runLayer
