// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module run_classification (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        weights_s_address0,
        weights_s_ce0,
        weights_s_q0,
        bias_s_address0,
        bias_s_ce0,
        bias_s_q0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 23'd1;
parameter    ap_ST_fsm_state2 = 23'd2;
parameter    ap_ST_fsm_state3 = 23'd4;
parameter    ap_ST_fsm_state4 = 23'd8;
parameter    ap_ST_fsm_state5 = 23'd16;
parameter    ap_ST_fsm_state6 = 23'd32;
parameter    ap_ST_fsm_state7 = 23'd64;
parameter    ap_ST_fsm_state8 = 23'd128;
parameter    ap_ST_fsm_state9 = 23'd256;
parameter    ap_ST_fsm_state10 = 23'd512;
parameter    ap_ST_fsm_state11 = 23'd1024;
parameter    ap_ST_fsm_state12 = 23'd2048;
parameter    ap_ST_fsm_state13 = 23'd4096;
parameter    ap_ST_fsm_state14 = 23'd8192;
parameter    ap_ST_fsm_state15 = 23'd16384;
parameter    ap_ST_fsm_state16 = 23'd32768;
parameter    ap_ST_fsm_state17 = 23'd65536;
parameter    ap_ST_fsm_state18 = 23'd131072;
parameter    ap_ST_fsm_state19 = 23'd262144;
parameter    ap_ST_fsm_state20 = 23'd524288;
parameter    ap_ST_fsm_state21 = 23'd1048576;
parameter    ap_ST_fsm_state22 = 23'd2097152;
parameter    ap_ST_fsm_state23 = 23'd4194304;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [13:0] weights_s_address0;
output   weights_s_ce0;
input  [7:0] weights_s_q0;
output  [7:0] bias_s_address0;
output   bias_s_ce0;
input  [7:0] bias_s_q0;
output  [7:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg[13:0] weights_s_address0;
reg weights_s_ce0;
reg[7:0] bias_s_address0;
reg bias_s_ce0;
reg[7:0] ap_return;

(* fsm_encoding = "none" *) reg   [22:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] resArray1_q0;
reg   [31:0] reg_271;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state20;
wire   [6:0] indvarinc_fu_281_p2;
wire    ap_CS_fsm_state2;
wire   [6:0] indvarinc3_fu_298_p2;
wire    ap_CS_fsm_state3;
wire   [31:0] tmp_1_i_fu_310_p1;
reg   [31:0] tmp_1_i_reg_444;
wire    ap_CS_fsm_state4;
wire   [6:0] outNeurons_fu_321_p2;
reg   [6:0] outNeurons_reg_452;
reg   [6:0] resArray1_addr_2_reg_457;
wire   [0:0] exitcond3_fu_315_p2;
wire   [12:0] tmp_17_i_i_cast_fu_327_p1;
reg   [12:0] tmp_17_i_i_cast_reg_462;
wire   [6:0] inNeurons_fu_342_p2;
reg   [6:0] inNeurons_reg_470;
wire    ap_CS_fsm_state5;
wire   [12:0] next_mul_fu_348_p2;
reg   [12:0] next_mul_reg_475;
wire   [0:0] exitcond_fu_336_p2;
reg  signed [7:0] weights_load_reg_495;
wire    ap_CS_fsm_state6;
reg  signed [31:0] input_r_load_reg_500;
wire    ap_CS_fsm_state7;
wire   [31:0] grp_fu_367_p2;
reg   [31:0] tmp_9_i_reg_510;
wire   [31:0] tmp_12_i_fu_382_p2;
reg   [31:0] tmp_12_i_reg_515;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state19;
wire   [7:0] max_index_cast1_fu_388_p1;
reg   [7:0] max_index_cast1_reg_525;
wire    ap_CS_fsm_state21;
wire   [0:0] exitcond_i_fu_392_p2;
wire   [3:0] i_fu_403_p2;
reg   [3:0] i_reg_538;
reg   [31:0] max_1_reg_543;
wire    ap_CS_fsm_state22;
wire   [31:0] max_2_i_max1_i_fu_414_p3;
wire    ap_CS_fsm_state23;
wire   [7:0] max_index_2_i_max_in_fu_421_p3;
reg   [6:0] resArray1_address0;
reg    resArray1_ce0;
reg    resArray1_we0;
reg   [31:0] resArray1_d0;
reg   [6:0] resArray2_address0;
reg    resArray2_ce0;
reg    resArray2_we0;
reg   [31:0] resArray2_d0;
wire   [31:0] resArray2_q0;
wire    grp_runLayer_fu_250_ap_start;
wire    grp_runLayer_fu_250_ap_done;
wire    grp_runLayer_fu_250_ap_idle;
wire    grp_runLayer_fu_250_ap_ready;
reg   [3:0] grp_runLayer_fu_250_layer;
reg   [7:0] grp_runLayer_fu_250_numOfOutNeurons;
wire   [6:0] grp_runLayer_fu_250_input_r_address0;
wire    grp_runLayer_fu_250_input_r_ce0;
reg   [31:0] grp_runLayer_fu_250_input_r_q0;
wire   [6:0] grp_runLayer_fu_250_output_r_address0;
wire    grp_runLayer_fu_250_output_r_ce0;
wire    grp_runLayer_fu_250_output_r_we0;
wire   [31:0] grp_runLayer_fu_250_output_r_d0;
reg   [31:0] grp_runLayer_fu_250_output_r_q0;
wire   [13:0] grp_runLayer_fu_250_weights_s_address0;
wire    grp_runLayer_fu_250_weights_s_ce0;
wire   [7:0] grp_runLayer_fu_250_bias_s_address0;
wire    grp_runLayer_fu_250_bias_s_ce0;
wire    grp_relu_fu_266_ap_start;
wire    grp_relu_fu_266_ap_done;
wire    grp_relu_fu_266_ap_idle;
wire    grp_relu_fu_266_ap_ready;
wire   [6:0] grp_relu_fu_266_data_address0;
wire    grp_relu_fu_266_data_ce0;
wire    grp_relu_fu_266_data_we0;
wire   [31:0] grp_relu_fu_266_data_d0;
reg   [31:0] grp_relu_fu_266_data_q0;
reg   [6:0] invdar_reg_162;
wire   [0:0] tmp_fu_287_p2;
reg   [6:0] invdar2_reg_173;
wire   [0:0] tmp_8_fu_304_p2;
reg   [6:0] outNeurons_i_reg_184;
wire    ap_CS_fsm_state11;
reg   [6:0] inNeurons_i_reg_195;
wire    ap_CS_fsm_state9;
reg   [12:0] phi_mul_reg_206;
reg   [31:0] max1_i_reg_217;
reg   [7:0] max_index_i_reg_227;
reg   [3:0] max_index_reg_239;
reg    ap_reg_grp_runLayer_fu_250_ap_start;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state18;
reg    ap_reg_grp_relu_fu_266_ap_start;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state16;
wire   [31:0] invdar_cast_fu_276_p1;
wire   [31:0] invdar2_cast_fu_293_p1;
wire   [31:0] tmp_19_i_i_cast_fu_359_p1;
wire   [31:0] tmp_4_i_fu_331_p1;
wire   [31:0] tmp_1_i1_fu_398_p1;
wire   [31:0] tmp_i_7_fu_372_p2;
wire   [12:0] tmp_19_i_i_fu_354_p2;
wire  signed [31:0] tmp_11_i_fu_378_p1;
wire   [0:0] tmp_2_i2_fu_409_p2;
reg   [7:0] ap_return_preg;
reg   [22:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 23'd1;
#0 ap_reg_grp_runLayer_fu_250_ap_start = 1'b0;
#0 ap_reg_grp_relu_fu_266_ap_start = 1'b0;
#0 ap_return_preg = 8'd0;
end

run_classificatiodEe #(
    .DataWidth( 32 ),
    .AddressRange( 70 ),
    .AddressWidth( 7 ))
resArray1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(resArray1_address0),
    .ce0(resArray1_ce0),
    .we0(resArray1_we0),
    .d0(resArray1_d0),
    .q0(resArray1_q0)
);

run_classificatiodEe #(
    .DataWidth( 32 ),
    .AddressRange( 70 ),
    .AddressWidth( 7 ))
resArray2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(resArray2_address0),
    .ce0(resArray2_ce0),
    .we0(resArray2_we0),
    .d0(resArray2_d0),
    .q0(resArray2_q0)
);

runLayer grp_runLayer_fu_250(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_runLayer_fu_250_ap_start),
    .ap_done(grp_runLayer_fu_250_ap_done),
    .ap_idle(grp_runLayer_fu_250_ap_idle),
    .ap_ready(grp_runLayer_fu_250_ap_ready),
    .layer(grp_runLayer_fu_250_layer),
    .numOfOutNeurons(grp_runLayer_fu_250_numOfOutNeurons),
    .input_r_address0(grp_runLayer_fu_250_input_r_address0),
    .input_r_ce0(grp_runLayer_fu_250_input_r_ce0),
    .input_r_q0(grp_runLayer_fu_250_input_r_q0),
    .output_r_address0(grp_runLayer_fu_250_output_r_address0),
    .output_r_ce0(grp_runLayer_fu_250_output_r_ce0),
    .output_r_we0(grp_runLayer_fu_250_output_r_we0),
    .output_r_d0(grp_runLayer_fu_250_output_r_d0),
    .output_r_q0(grp_runLayer_fu_250_output_r_q0),
    .weights_s_address0(grp_runLayer_fu_250_weights_s_address0),
    .weights_s_ce0(grp_runLayer_fu_250_weights_s_ce0),
    .weights_s_q0(weights_s_q0),
    .bias_s_address0(grp_runLayer_fu_250_bias_s_address0),
    .bias_s_ce0(grp_runLayer_fu_250_bias_s_ce0),
    .bias_s_q0(bias_s_q0)
);

relu grp_relu_fu_266(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_relu_fu_266_ap_start),
    .ap_done(grp_relu_fu_266_ap_done),
    .ap_idle(grp_relu_fu_266_ap_idle),
    .ap_ready(grp_relu_fu_266_ap_ready),
    .data_address0(grp_relu_fu_266_data_address0),
    .data_ce0(grp_relu_fu_266_data_ce0),
    .data_we0(grp_relu_fu_266_data_we0),
    .data_d0(grp_relu_fu_266_data_d0),
    .data_q0(grp_relu_fu_266_data_q0)
);

NeuralNetwork_mulbkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 32 ))
NeuralNetwork_mulbkb_x_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(input_r_load_reg_500),
    .din1(weights_load_reg_495),
    .ce(1'b1),
    .dout(grp_fu_367_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_relu_fu_266_ap_start <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state4) & (exitcond3_fu_315_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state15))) begin
            ap_reg_grp_relu_fu_266_ap_start <= 1'b1;
        end else if ((1'b1 == grp_relu_fu_266_ap_ready)) begin
            ap_reg_grp_relu_fu_266_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_runLayer_fu_250_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state17))) begin
            ap_reg_grp_runLayer_fu_250_ap_start <= 1'b1;
        end else if ((1'b1 == grp_runLayer_fu_250_ap_ready)) begin
            ap_reg_grp_runLayer_fu_250_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 8'd0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state21) & (1'd1 == exitcond_i_fu_392_p2))) begin
            ap_return_preg <= max_index_i_reg_227;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        inNeurons_i_reg_195 <= inNeurons_reg_470;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond3_fu_315_p2 == 1'd0))) begin
        inNeurons_i_reg_195 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == tmp_fu_287_p2))) begin
        invdar2_reg_173 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == tmp_8_fu_304_p2))) begin
        invdar2_reg_173 <= indvarinc3_fu_298_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == tmp_fu_287_p2))) begin
        invdar_reg_162 <= indvarinc_fu_281_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        invdar_reg_162 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        max1_i_reg_217 <= max_2_i_max1_i_fu_414_p3;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        max1_i_reg_217 <= resArray1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        max_index_i_reg_227 <= max_index_2_i_max_in_fu_421_p3;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        max_index_i_reg_227 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        max_index_reg_239 <= i_reg_538;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        max_index_reg_239 <= 4'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == tmp_8_fu_304_p2))) begin
        outNeurons_i_reg_184 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        outNeurons_i_reg_184 <= outNeurons_reg_452;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        phi_mul_reg_206 <= next_mul_reg_475;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond3_fu_315_p2 == 1'd0))) begin
        phi_mul_reg_206 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) & (1'd0 == exitcond_i_fu_392_p2))) begin
        i_reg_538 <= i_fu_403_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        inNeurons_reg_470 <= inNeurons_fu_342_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_r_load_reg_500 <= input_r_q0;
        weights_load_reg_495 <= weights_s_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        max_1_reg_543 <= resArray1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        max_index_cast1_reg_525[3 : 0] <= max_index_cast1_fu_388_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond_fu_336_p2))) begin
        next_mul_reg_475 <= next_mul_fu_348_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        outNeurons_reg_452 <= outNeurons_fu_321_p2;
        tmp_1_i_reg_444[6 : 0] <= tmp_1_i_fu_310_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state20))) begin
        reg_271 <= resArray1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond3_fu_315_p2 == 1'd0))) begin
        resArray1_addr_2_reg_457 <= tmp_1_i_fu_310_p1;
        tmp_17_i_i_cast_reg_462[6 : 0] <= tmp_17_i_i_cast_fu_327_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_12_i_reg_515 <= tmp_12_i_fu_382_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_9_i_reg_510 <= grp_fu_367_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state21) & (1'd1 == exitcond_i_fu_392_p2)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) & (1'd1 == exitcond_i_fu_392_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) & (1'd1 == exitcond_i_fu_392_p2))) begin
        ap_return = max_index_i_reg_227;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bias_s_address0 = tmp_1_i_reg_444;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state18))) begin
        bias_s_address0 = grp_runLayer_fu_250_bias_s_address0;
    end else begin
        bias_s_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        bias_s_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state18))) begin
        bias_s_ce0 = grp_runLayer_fu_250_bias_s_ce0;
    end else begin
        bias_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_relu_fu_266_data_q0 = resArray2_q0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_relu_fu_266_data_q0 = resArray1_q0;
    end else begin
        grp_relu_fu_266_data_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_runLayer_fu_250_input_r_q0 = resArray2_q0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_runLayer_fu_250_input_r_q0 = resArray1_q0;
    end else begin
        grp_runLayer_fu_250_input_r_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_runLayer_fu_250_layer = 4'd2;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_runLayer_fu_250_layer = 4'd1;
    end else begin
        grp_runLayer_fu_250_layer = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_runLayer_fu_250_numOfOutNeurons = 8'd10;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_runLayer_fu_250_numOfOutNeurons = 8'd70;
    end else begin
        grp_runLayer_fu_250_numOfOutNeurons = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_runLayer_fu_250_output_r_q0 = resArray1_q0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_runLayer_fu_250_output_r_q0 = resArray2_q0;
    end else begin
        grp_runLayer_fu_250_output_r_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        resArray1_address0 = tmp_1_i1_fu_398_p1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        resArray1_address0 = 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9))) begin
        resArray1_address0 = resArray1_addr_2_reg_457;
    end else if (((1'b1 == ap_CS_fsm_state4) & (exitcond3_fu_315_p2 == 1'd0))) begin
        resArray1_address0 = tmp_1_i_fu_310_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        resArray1_address0 = invdar_cast_fu_276_p1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        resArray1_address0 = grp_relu_fu_266_data_address0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        resArray1_address0 = grp_runLayer_fu_250_output_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        resArray1_address0 = grp_runLayer_fu_250_input_r_address0;
    end else begin
        resArray1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state4) & (exitcond3_fu_315_p2 == 1'd0)) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9))) begin
        resArray1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        resArray1_ce0 = grp_relu_fu_266_data_ce0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        resArray1_ce0 = grp_runLayer_fu_250_output_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        resArray1_ce0 = grp_runLayer_fu_250_input_r_ce0;
    end else begin
        resArray1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        resArray1_d0 = tmp_12_i_reg_515;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        resArray1_d0 = tmp_i_7_fu_372_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state4) & (exitcond3_fu_315_p2 == 1'd0)))) begin
        resArray1_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        resArray1_d0 = grp_relu_fu_266_data_d0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        resArray1_d0 = grp_runLayer_fu_250_output_r_d0;
    end else begin
        resArray1_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state4) & (exitcond3_fu_315_p2 == 1'd0)) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9))) begin
        resArray1_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        resArray1_we0 = grp_relu_fu_266_data_we0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        resArray1_we0 = grp_runLayer_fu_250_output_r_we0;
    end else begin
        resArray1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        resArray2_address0 = invdar2_cast_fu_293_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        resArray2_address0 = grp_relu_fu_266_data_address0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        resArray2_address0 = grp_runLayer_fu_250_output_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        resArray2_address0 = grp_runLayer_fu_250_input_r_address0;
    end else begin
        resArray2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        resArray2_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        resArray2_ce0 = grp_relu_fu_266_data_ce0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        resArray2_ce0 = grp_runLayer_fu_250_output_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        resArray2_ce0 = grp_runLayer_fu_250_input_r_ce0;
    end else begin
        resArray2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        resArray2_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        resArray2_d0 = grp_relu_fu_266_data_d0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        resArray2_d0 = grp_runLayer_fu_250_output_r_d0;
    end else begin
        resArray2_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        resArray2_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        resArray2_we0 = grp_relu_fu_266_data_we0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        resArray2_we0 = grp_runLayer_fu_250_output_r_we0;
    end else begin
        resArray2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        weights_s_address0 = tmp_19_i_i_cast_fu_359_p1;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state18))) begin
        weights_s_address0 = grp_runLayer_fu_250_weights_s_address0;
    end else begin
        weights_s_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        weights_s_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state18))) begin
        weights_s_ce0 = grp_runLayer_fu_250_weights_s_ce0;
    end else begin
        weights_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'd1 == tmp_fu_287_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == tmp_8_fu_304_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond3_fu_315_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (exitcond_fu_336_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (grp_relu_fu_266_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (grp_runLayer_fu_250_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (grp_relu_fu_266_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & (grp_runLayer_fu_250_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((1'b1 == ap_CS_fsm_state21) & (1'd1 == exitcond_i_fu_392_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign exitcond3_fu_315_p2 = ((outNeurons_i_reg_184 == 7'd70) ? 1'b1 : 1'b0);

assign exitcond_fu_336_p2 = ((inNeurons_i_reg_195 == 7'd80) ? 1'b1 : 1'b0);

assign exitcond_i_fu_392_p2 = ((max_index_reg_239 == 4'd10) ? 1'b1 : 1'b0);

assign grp_relu_fu_266_ap_start = ap_reg_grp_relu_fu_266_ap_start;

assign grp_runLayer_fu_250_ap_start = ap_reg_grp_runLayer_fu_250_ap_start;

assign i_fu_403_p2 = (max_index_reg_239 + 4'd1);

assign inNeurons_fu_342_p2 = (inNeurons_i_reg_195 + 7'd1);

assign indvarinc3_fu_298_p2 = (invdar2_reg_173 + 7'd1);

assign indvarinc_fu_281_p2 = (invdar_reg_162 + 7'd1);

assign input_r_address0 = tmp_4_i_fu_331_p1;

assign invdar2_cast_fu_293_p1 = invdar2_reg_173;

assign invdar_cast_fu_276_p1 = invdar_reg_162;

assign max_2_i_max1_i_fu_414_p3 = ((tmp_2_i2_fu_409_p2[0:0] === 1'b1) ? max_1_reg_543 : max1_i_reg_217);

assign max_index_2_i_max_in_fu_421_p3 = ((tmp_2_i2_fu_409_p2[0:0] === 1'b1) ? max_index_cast1_reg_525 : max_index_i_reg_227);

assign max_index_cast1_fu_388_p1 = max_index_reg_239;

assign next_mul_fu_348_p2 = (phi_mul_reg_206 + 13'd70);

assign outNeurons_fu_321_p2 = (outNeurons_i_reg_184 + 7'd1);

assign tmp_11_i_fu_378_p1 = $signed(bias_s_q0);

assign tmp_12_i_fu_382_p2 = ($signed(resArray1_q0) + $signed(tmp_11_i_fu_378_p1));

assign tmp_17_i_i_cast_fu_327_p1 = outNeurons_i_reg_184;

assign tmp_19_i_i_cast_fu_359_p1 = tmp_19_i_i_fu_354_p2;

assign tmp_19_i_i_fu_354_p2 = (phi_mul_reg_206 + tmp_17_i_i_cast_reg_462);

assign tmp_1_i1_fu_398_p1 = max_index_reg_239;

assign tmp_1_i_fu_310_p1 = outNeurons_i_reg_184;

assign tmp_2_i2_fu_409_p2 = (($signed(max_1_reg_543) > $signed(max1_i_reg_217)) ? 1'b1 : 1'b0);

assign tmp_4_i_fu_331_p1 = inNeurons_i_reg_195;

assign tmp_8_fu_304_p2 = ((invdar2_reg_173 == 7'd69) ? 1'b1 : 1'b0);

assign tmp_fu_287_p2 = ((invdar_reg_162 == 7'd69) ? 1'b1 : 1'b0);

assign tmp_i_7_fu_372_p2 = (reg_271 + tmp_9_i_reg_510);

always @ (posedge ap_clk) begin
    tmp_1_i_reg_444[31:7] <= 25'b0000000000000000000000000;
    tmp_17_i_i_cast_reg_462[12:7] <= 6'b000000;
    max_index_cast1_reg_525[7:4] <= 4'b0000;
end

endmodule //run_classification
