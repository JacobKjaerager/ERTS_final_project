// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _NeuralNetwork_HH_
#define _NeuralNetwork_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "run_classification.h"
#include "NeuralNetwork_weifYi.h"
#include "NeuralNetwork_biag8j.h"
#include "NeuralNetwork_NNIO_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_NNIO_ADDR_WIDTH = 16,
         unsigned int C_S_AXI_NNIO_DATA_WIDTH = 32>
struct NeuralNetwork : public sc_module {
    // Port declarations 20
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_logic > s_axi_NNIO_AWVALID;
    sc_out< sc_logic > s_axi_NNIO_AWREADY;
    sc_in< sc_uint<C_S_AXI_NNIO_ADDR_WIDTH> > s_axi_NNIO_AWADDR;
    sc_in< sc_logic > s_axi_NNIO_WVALID;
    sc_out< sc_logic > s_axi_NNIO_WREADY;
    sc_in< sc_uint<C_S_AXI_NNIO_DATA_WIDTH> > s_axi_NNIO_WDATA;
    sc_in< sc_uint<C_S_AXI_NNIO_DATA_WIDTH/8> > s_axi_NNIO_WSTRB;
    sc_in< sc_logic > s_axi_NNIO_ARVALID;
    sc_out< sc_logic > s_axi_NNIO_ARREADY;
    sc_in< sc_uint<C_S_AXI_NNIO_ADDR_WIDTH> > s_axi_NNIO_ARADDR;
    sc_out< sc_logic > s_axi_NNIO_RVALID;
    sc_in< sc_logic > s_axi_NNIO_RREADY;
    sc_out< sc_uint<C_S_AXI_NNIO_DATA_WIDTH> > s_axi_NNIO_RDATA;
    sc_out< sc_lv<2> > s_axi_NNIO_RRESP;
    sc_out< sc_logic > s_axi_NNIO_BVALID;
    sc_in< sc_logic > s_axi_NNIO_BREADY;
    sc_out< sc_lv<2> > s_axi_NNIO_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    NeuralNetwork(sc_module_name name);
    SC_HAS_PROCESS(NeuralNetwork);

    ~NeuralNetwork();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    NeuralNetwork_weifYi* weights_s_U;
    NeuralNetwork_biag8j* bias_s_U;
    NeuralNetwork_NNIO_s_axi<C_S_AXI_NNIO_ADDR_WIDTH,C_S_AXI_NNIO_DATA_WIDTH>* NeuralNetwork_NNIO_s_axi_U;
    run_classification* grp_run_classification_fu_166;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<8> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<32> > input_r_q0;
    sc_signal< sc_lv<14> > biasWeight_input_r_address0;
    sc_signal< sc_logic > biasWeight_input_r_ce0;
    sc_signal< sc_lv<8> > biasWeight_input_r_q0;
    sc_signal< sc_lv<8> > runNN_r;
    sc_signal< sc_lv<8> > setBais_r;
    sc_signal< sc_lv<8> > setWeight_r;
    sc_signal< sc_lv<14> > weights_s_address0;
    sc_signal< sc_logic > weights_s_ce0;
    sc_signal< sc_logic > weights_s_we0;
    sc_signal< sc_lv<8> > weights_s_q0;
    sc_signal< sc_lv<8> > bias_s_address0;
    sc_signal< sc_logic > bias_s_ce0;
    sc_signal< sc_logic > bias_s_we0;
    sc_signal< sc_lv<8> > bias_s_q0;
    sc_signal< sc_lv<1> > or_cond5_fu_248_p2;
    sc_signal< sc_lv<1> > or_cond5_reg_294;
    sc_signal< sc_lv<1> > or_cond1_fu_200_p2;
    sc_signal< sc_lv<1> > or_cond3_fu_224_p2;
    sc_signal< sc_lv<14> > i_3_fu_260_p2;
    sc_signal< sc_lv<14> > i_3_reg_301;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<32> > tmp_4_i_fu_266_p1;
    sc_signal< sc_lv<32> > tmp_4_i_reg_306;
    sc_signal< sc_lv<1> > tmp_i3_fu_254_p2;
    sc_signal< sc_lv<8> > i_fu_277_p2;
    sc_signal< sc_lv<8> > i_reg_319;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<32> > tmp_6_i_fu_283_p1;
    sc_signal< sc_lv<32> > tmp_6_i_reg_324;
    sc_signal< sc_lv<1> > tmp_i_fu_271_p2;
    sc_signal< sc_lv<8> > grp_run_classification_fu_166_ap_return;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_logic > grp_run_classification_fu_166_ap_done;
    sc_signal< sc_logic > grp_run_classification_fu_166_ap_start;
    sc_signal< sc_logic > grp_run_classification_fu_166_ap_idle;
    sc_signal< sc_logic > grp_run_classification_fu_166_ap_ready;
    sc_signal< sc_lv<7> > grp_run_classification_fu_166_input_r_address0;
    sc_signal< sc_logic > grp_run_classification_fu_166_input_r_ce0;
    sc_signal< sc_lv<14> > grp_run_classification_fu_166_weights_s_address0;
    sc_signal< sc_logic > grp_run_classification_fu_166_weights_s_ce0;
    sc_signal< sc_lv<8> > grp_run_classification_fu_166_bias_s_address0;
    sc_signal< sc_logic > grp_run_classification_fu_166_bias_s_ce0;
    sc_signal< sc_lv<14> > i_i2_reg_126;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<8> > i_i_reg_137;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<8> > res_2_reg_148;
    sc_signal< sc_logic > ap_reg_grp_run_classification_fu_166_ap_start;
    sc_signal< sc_lv<8> > tmp_fu_188_p2;
    sc_signal< sc_lv<1> > tmp_1_fu_194_p2;
    sc_signal< sc_lv<1> > tmp_s_fu_176_p2;
    sc_signal< sc_lv<1> > tmp_41_fu_212_p2;
    sc_signal< sc_lv<1> > tmp_39_fu_182_p2;
    sc_signal< sc_lv<1> > tmp1_fu_218_p2;
    sc_signal< sc_lv<1> > tmp_40_fu_206_p2;
    sc_signal< sc_lv<8> > tmp_42_fu_230_p2;
    sc_signal< sc_lv<1> > tmp_43_fu_236_p2;
    sc_signal< sc_lv<1> > tmp_44_fu_242_p2;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<8> > ap_NS_fsm;
    sc_signal< sc_lv<8> > ap_return;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<8> ap_ST_fsm_state1;
    static const sc_lv<8> ap_ST_fsm_state2;
    static const sc_lv<8> ap_ST_fsm_state3;
    static const sc_lv<8> ap_ST_fsm_state4;
    static const sc_lv<8> ap_ST_fsm_state5;
    static const sc_lv<8> ap_ST_fsm_state6;
    static const sc_lv<8> ap_ST_fsm_state7;
    static const sc_lv<8> ap_ST_fsm_state8;
    static const sc_lv<32> ap_const_lv32_0;
    static const int C_S_AXI_DATA_WIDTH;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<14> ap_const_lv14_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<8> ap_const_lv8_FE;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<14> ap_const_lv14_2BC0;
    static const sc_lv<14> ap_const_lv14_1;
    static const sc_lv<8> ap_const_lv8_96;
    static const sc_lv<32> ap_const_lv32_7;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_biasWeight_input_r_address0();
    void thread_biasWeight_input_r_ce0();
    void thread_bias_s_address0();
    void thread_bias_s_ce0();
    void thread_bias_s_we0();
    void thread_grp_run_classification_fu_166_ap_start();
    void thread_i_3_fu_260_p2();
    void thread_i_fu_277_p2();
    void thread_or_cond1_fu_200_p2();
    void thread_or_cond3_fu_224_p2();
    void thread_or_cond5_fu_248_p2();
    void thread_tmp1_fu_218_p2();
    void thread_tmp_1_fu_194_p2();
    void thread_tmp_39_fu_182_p2();
    void thread_tmp_40_fu_206_p2();
    void thread_tmp_41_fu_212_p2();
    void thread_tmp_42_fu_230_p2();
    void thread_tmp_43_fu_236_p2();
    void thread_tmp_44_fu_242_p2();
    void thread_tmp_4_i_fu_266_p1();
    void thread_tmp_6_i_fu_283_p1();
    void thread_tmp_fu_188_p2();
    void thread_tmp_i3_fu_254_p2();
    void thread_tmp_i_fu_271_p2();
    void thread_tmp_s_fu_176_p2();
    void thread_weights_s_address0();
    void thread_weights_s_ce0();
    void thread_weights_s_we0();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
