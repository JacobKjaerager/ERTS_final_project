// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _runLayer_HH_
#define _runLayer_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "NeuralNetwork_mulbkb.h"
#include "NeuralNetwork_maccud.h"

namespace ap_rtl {

struct runLayer : public sc_module {
    // Port declarations 22
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<4> > layer;
    sc_in< sc_lv<8> > numOfOutNeurons;
    sc_out< sc_lv<7> > input_r_address0;
    sc_out< sc_logic > input_r_ce0;
    sc_in< sc_lv<32> > input_r_q0;
    sc_out< sc_lv<7> > output_r_address0;
    sc_out< sc_logic > output_r_ce0;
    sc_out< sc_logic > output_r_we0;
    sc_out< sc_lv<32> > output_r_d0;
    sc_in< sc_lv<32> > output_r_q0;
    sc_out< sc_lv<14> > weights_s_address0;
    sc_out< sc_logic > weights_s_ce0;
    sc_in< sc_lv<8> > weights_s_q0;
    sc_out< sc_lv<8> > bias_s_address0;
    sc_out< sc_logic > bias_s_ce0;
    sc_in< sc_lv<8> > bias_s_q0;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    runLayer(sc_module_name name);
    SC_HAS_PROCESS(runLayer);

    ~runLayer();

    sc_trace_file* mVcdFile;

    NeuralNetwork_mulbkb<1,2,32,8,32>* NeuralNetwork_mulbkb_U1;
    NeuralNetwork_maccud<1,1,7,8,32,32>* NeuralNetwork_maccud_U2;
    sc_signal< sc_lv<10> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > reg_172;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_lv<8> > tmp_21_i_fu_190_p2;
    sc_signal< sc_lv<8> > tmp_21_i_reg_408;
    sc_signal< sc_lv<1> > tmp_i2_fu_196_p2;
    sc_signal< sc_lv<1> > tmp_i2_reg_413;
    sc_signal< sc_lv<14> > startIndex_1_i_fu_230_p3;
    sc_signal< sc_lv<14> > startIndex_1_i_reg_418;
    sc_signal< sc_lv<15> > tmp_25_i_cast_fu_264_p1;
    sc_signal< sc_lv<15> > tmp_25_i_cast_reg_423;
    sc_signal< sc_lv<8> > tmp_1_cast_cast_fu_273_p1;
    sc_signal< sc_lv<8> > tmp_1_cast_cast_reg_428;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<7> > outNeurons_1_fu_282_p2;
    sc_signal< sc_lv<7> > outNeurons_1_reg_436;
    sc_signal< sc_lv<7> > output_addr_reg_441;
    sc_signal< sc_lv<1> > tmp_2_fu_277_p2;
    sc_signal< sc_lv<13> > tmp_17_i_cast_fu_288_p1;
    sc_signal< sc_lv<13> > tmp_17_i_cast_reg_446;
    sc_signal< sc_lv<32> > tmp_4_fu_292_p1;
    sc_signal< sc_lv<32> > tmp_4_reg_451;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<7> > inNeurons_1_fu_302_p2;
    sc_signal< sc_lv<7> > inNeurons_1_reg_459;
    sc_signal< sc_lv<13> > next_mul_fu_308_p2;
    sc_signal< sc_lv<13> > next_mul_reg_464;
    sc_signal< sc_lv<1> > exitcond_fu_296_p2;
    sc_signal< sc_lv<13> > tmp1_fu_351_p2;
    sc_signal< sc_lv<13> > tmp1_reg_469;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<8> > weights_load_reg_489;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<32> > input_load_reg_494;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<32> > grp_fu_381_p2;
    sc_signal< sc_lv<32> > tmp_9_reg_504;
    sc_signal< sc_lv<8> > bias_load_reg_509;
    sc_signal< sc_lv<7> > outNeurons_reg_139;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_lv<7> > inNeurons_reg_150;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<13> > phi_mul_reg_161;
    sc_signal< sc_lv<32> > tmp_1_fu_268_p1;
    sc_signal< sc_lv<32> > tmp_23_i_cast_fu_360_p1;
    sc_signal< sc_lv<32> > tmp_19_i_cast_fu_373_p1;
    sc_signal< sc_lv<32> > tmp_6_fu_386_p2;
    sc_signal< sc_lv<32> > grp_fu_395_p3;
    sc_signal< sc_lv<3> > tmp_10_fu_180_p1;
    sc_signal< sc_lv<4> > tmp_21_i_fu_190_p1;
    sc_signal< sc_lv<1> > tmp_11_fu_202_p3;
    sc_signal< sc_lv<1> > rev_fu_210_p2;
    sc_signal< sc_lv<1> > tmp_3_fu_224_p2;
    sc_signal< sc_lv<14> > p_mux_cast_fu_216_p3;
    sc_signal< sc_lv<1> > tmp_i1_fu_184_p2;
    sc_signal< sc_lv<1> > tmp_fu_246_p2;
    sc_signal< sc_lv<6> > p_i_fu_238_p3;
    sc_signal< sc_lv<6> > p_i_10_fu_252_p3;
    sc_signal< sc_lv<7> > p_i_cast9_fu_260_p1;
    sc_signal< sc_lv<8> > p_shl1_i_fu_322_p3;
    sc_signal< sc_lv<10> > p_shl_i_fu_314_p3;
    sc_signal< sc_lv<10> > p_shl1_i_cast_fu_330_p1;
    sc_signal< sc_lv<10> > neuronIndex_fu_334_p2;
    sc_signal< sc_lv<13> > neuronIndex_1_cast_fu_340_p1;
    sc_signal< sc_lv<13> > neuronIndex_1_fu_344_p3;
    sc_signal< sc_lv<8> > tmp_23_i_fu_356_p2;
    sc_signal< sc_lv<14> > tmp1_cast_fu_365_p1;
    sc_signal< sc_lv<14> > tmp_19_i_fu_368_p2;
    sc_signal< sc_lv<7> > grp_fu_395_p0;
    sc_signal< sc_lv<10> > ap_NS_fsm;
    sc_signal< sc_lv<8> > tmp_21_i_fu_190_p10;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<10> ap_ST_fsm_state1;
    static const sc_lv<10> ap_ST_fsm_state2;
    static const sc_lv<10> ap_ST_fsm_state3;
    static const sc_lv<10> ap_ST_fsm_state4;
    static const sc_lv<10> ap_ST_fsm_state5;
    static const sc_lv<10> ap_ST_fsm_state6;
    static const sc_lv<10> ap_ST_fsm_state7;
    static const sc_lv<10> ap_ST_fsm_state8;
    static const sc_lv<10> ap_ST_fsm_state9;
    static const sc_lv<10> ap_ST_fsm_state10;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<13> ap_const_lv13_0;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<8> ap_const_lv8_46;
    static const sc_lv<3> ap_const_lv3_2;
    static const sc_lv<14> ap_const_lv14_2904;
    static const sc_lv<14> ap_const_lv14_15E0;
    static const sc_lv<14> ap_const_lv14_0;
    static const sc_lv<6> ap_const_lv6_A;
    static const sc_lv<6> ap_const_lv6_24;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<7> ap_const_lv7_1;
    static const sc_lv<7> ap_const_lv7_46;
    static const sc_lv<13> ap_const_lv13_46;
    static const sc_lv<3> ap_const_lv3_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_bias_s_address0();
    void thread_bias_s_ce0();
    void thread_exitcond_fu_296_p2();
    void thread_grp_fu_395_p0();
    void thread_inNeurons_1_fu_302_p2();
    void thread_input_r_address0();
    void thread_input_r_ce0();
    void thread_neuronIndex_1_cast_fu_340_p1();
    void thread_neuronIndex_1_fu_344_p3();
    void thread_neuronIndex_fu_334_p2();
    void thread_next_mul_fu_308_p2();
    void thread_outNeurons_1_fu_282_p2();
    void thread_output_r_address0();
    void thread_output_r_ce0();
    void thread_output_r_d0();
    void thread_output_r_we0();
    void thread_p_i_10_fu_252_p3();
    void thread_p_i_cast9_fu_260_p1();
    void thread_p_i_fu_238_p3();
    void thread_p_mux_cast_fu_216_p3();
    void thread_p_shl1_i_cast_fu_330_p1();
    void thread_p_shl1_i_fu_322_p3();
    void thread_p_shl_i_fu_314_p3();
    void thread_rev_fu_210_p2();
    void thread_startIndex_1_i_fu_230_p3();
    void thread_tmp1_cast_fu_365_p1();
    void thread_tmp1_fu_351_p2();
    void thread_tmp_10_fu_180_p1();
    void thread_tmp_11_fu_202_p3();
    void thread_tmp_17_i_cast_fu_288_p1();
    void thread_tmp_19_i_cast_fu_373_p1();
    void thread_tmp_19_i_fu_368_p2();
    void thread_tmp_1_cast_cast_fu_273_p1();
    void thread_tmp_1_fu_268_p1();
    void thread_tmp_21_i_fu_190_p1();
    void thread_tmp_21_i_fu_190_p10();
    void thread_tmp_21_i_fu_190_p2();
    void thread_tmp_23_i_cast_fu_360_p1();
    void thread_tmp_23_i_fu_356_p2();
    void thread_tmp_25_i_cast_fu_264_p1();
    void thread_tmp_2_fu_277_p2();
    void thread_tmp_3_fu_224_p2();
    void thread_tmp_4_fu_292_p1();
    void thread_tmp_6_fu_386_p2();
    void thread_tmp_fu_246_p2();
    void thread_tmp_i1_fu_184_p2();
    void thread_tmp_i2_fu_196_p2();
    void thread_weights_s_address0();
    void thread_weights_s_ce0();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
