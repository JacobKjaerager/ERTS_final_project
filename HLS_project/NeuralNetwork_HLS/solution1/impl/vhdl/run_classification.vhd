-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity run_classification is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_s_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    weights_s_ce0 : OUT STD_LOGIC;
    weights_s_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    bias_s_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    bias_s_ce0 : OUT STD_LOGIC;
    bias_s_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of run_classification is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000010000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000100000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000001000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000010000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000100000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000001000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000010000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000100000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000001000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000010000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000100000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000001000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000010000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000100000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (34 downto 0) := "00000000001000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (34 downto 0) := "00000000010000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (34 downto 0) := "00000000100000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (34 downto 0) := "00000001000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (34 downto 0) := "00000010000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (34 downto 0) := "00000100000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (34 downto 0) := "00001000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (34 downto 0) := "00010000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (34 downto 0) := "00100000000000000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (34 downto 0) := "01000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (34 downto 0) := "10000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_45 : STD_LOGIC_VECTOR (6 downto 0) := "1000101";
    constant ap_const_lv7_46 : STD_LOGIC_VECTOR (6 downto 0) := "1000110";
    constant ap_const_lv7_50 : STD_LOGIC_VECTOR (6 downto 0) := "1010000";
    constant ap_const_lv13_46 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000110";
    constant ap_const_lv13_15E0 : STD_LOGIC_VECTOR (12 downto 0) := "1010111100000";
    constant ap_const_lv8_46 : STD_LOGIC_VECTOR (7 downto 0) := "01000110";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_lv14_2904 : STD_LOGIC_VECTOR (13 downto 0) := "10100100000100";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_8C : STD_LOGIC_VECTOR (7 downto 0) := "10001100";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_0_i1_reg_315 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_0_i_reg_359 : STD_LOGIC_VECTOR (6 downto 0);
    signal max1_i_reg_392 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_index_i_reg_402 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_index_reg_414 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_pp2_iter1_max_index_reg_414 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state36_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state37_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state38_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_pp2_stage0_flag00011001 : BOOLEAN;
    signal reg_426 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal resArray1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_430 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal resArray1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal resArray2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_436 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal resArray2_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvarinc_fu_446_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal indvarinc3_fu_463_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_9_fu_475_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_909 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond6_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal outNeurons_fu_486_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal outNeurons_reg_918 : STD_LOGIC_VECTOR (6 downto 0);
    signal resArray1_addr_1_reg_923 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_5_cast_fu_492_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_5_cast_reg_928 : STD_LOGIC_VECTOR (12 downto 0);
    signal inNeurons_fu_507_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal inNeurons_reg_936 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal next_mul_fu_513_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal next_mul_reg_941 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond5_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_r_load_reg_961 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_533_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_reg_971 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_548_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_reg_976 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal exitcond_i1_fu_554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state12_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal i_fu_560_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal resArray1_addr_2_reg_990 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond4_fu_584_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal outNeurons_1_fu_590_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal outNeurons_1_reg_1003 : STD_LOGIC_VECTOR (6 downto 0);
    signal resArray2_addr_1_reg_1008 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_23_cast_fu_600_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_23_cast_reg_1013 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp1_cast_fu_610_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp1_cast_reg_1018 : STD_LOGIC_VECTOR (13 downto 0);
    signal inNeurons_1_fu_629_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal inNeurons_1_reg_1026 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal next_mul2_fu_635_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal next_mul2_reg_1031 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond3_fu_623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_fu_665_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_reg_1056 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_687_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_reg_1061 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal exitcond_i_fu_693_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state23_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state24_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_flag00011001 : BOOLEAN;
    signal i_1_fu_699_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal resArray2_addr_2_reg_1075 : STD_LOGIC_VECTOR (6 downto 0);
    signal outNeurons_2_fu_729_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal outNeurons_2_reg_1087 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal resArray1_addr_5_reg_1092 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond2_fu_723_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_cast_fu_739_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_35_cast_reg_1098 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp2_fu_743_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp2_reg_1103 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_26_fu_749_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_reg_1113 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal inNeurons_2_fu_759_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal inNeurons_2_reg_1121 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_32_fu_795_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_32_reg_1126 : STD_LOGIC_VECTOR (13 downto 0);
    signal exitcond_fu_753_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal grp_fu_818_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_reg_1151 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_fu_836_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_29_reg_1156 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond_i9_fu_852_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i9_reg_1161 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter1_exitcond_i9_reg_1161 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_863_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_reg_1170 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal max_1_reg_1175 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal max_2_i_max1_i_fu_878_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal max_index_2_i_max_in_fu_885_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state12 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state23 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state36 : STD_LOGIC;
    signal resArray1_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal resArray1_ce0 : STD_LOGIC;
    signal resArray1_we0 : STD_LOGIC;
    signal resArray1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal resArray1_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal resArray1_ce1 : STD_LOGIC;
    signal resArray1_we1 : STD_LOGIC;
    signal resArray1_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal resArray2_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal resArray2_ce0 : STD_LOGIC;
    signal resArray2_we0 : STD_LOGIC;
    signal resArray2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal resArray2_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal resArray2_ce1 : STD_LOGIC;
    signal resArray2_we1 : STD_LOGIC;
    signal invdar_reg_260 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal invdar2_reg_271 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_8_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal outNeurons_0_i7_reg_282 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal inNeurons_0_i8_reg_293 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal phi_mul_reg_304 : STD_LOGIC_VECTOR (12 downto 0);
    signal outNeurons_0_i4_reg_326 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal inNeurons_0_i5_reg_337 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal phi_mul1_reg_348 : STD_LOGIC_VECTOR (12 downto 0);
    signal outNeurons_0_i_reg_370 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal inNeurons_0_i_reg_381 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal max_index_phi_fu_418_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp2_stage0_flag00000000 : BOOLEAN;
    signal invdar_cast_fu_441_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal invdar2_cast_fu_458_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_cast_fu_524_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_496_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_566_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal tmp_s_fu_579_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_cast_fu_646_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_618_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_cast_fu_656_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_705_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp1_stage0_flag00000000 : BOOLEAN;
    signal tmp_17_fu_718_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_cast_fu_805_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_45_cast_fu_810_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i_fu_858_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_538_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_571_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_35_fu_824_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_fu_845_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_671_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_710_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_519_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_5_fu_544_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_cast9_fu_596_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp1_fu_604_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal phi_mul1_cast_fu_614_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_22_fu_641_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_18_fu_651_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_fu_677_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_fu_683_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_cast6_fu_735_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_shl7_fu_773_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl7_cast_fu_781_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl_fu_765_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal neuronIndex_fu_785_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_42_cast_fu_791_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_27_fu_800_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_28_fu_830_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_30_fu_842_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_i_fu_873_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_index_cast3_fu_869_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (34 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;

    component NeuralNetwork_muldEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component NeuralNetwork_muleOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component run_classificatiobkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    resArray1_U : component run_classificatiobkb
    generic map (
        DataWidth => 32,
        AddressRange => 70,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => resArray1_address0,
        ce0 => resArray1_ce0,
        we0 => resArray1_we0,
        d0 => resArray1_d0,
        q0 => resArray1_q0,
        address1 => resArray1_address1,
        ce1 => resArray1_ce1,
        we1 => resArray1_we1,
        d1 => resArray1_d1,
        q1 => resArray1_q1);

    resArray2_U : component run_classificatiobkb
    generic map (
        DataWidth => 32,
        AddressRange => 70,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => resArray2_address0,
        ce0 => resArray2_ce0,
        we0 => resArray2_we0,
        d0 => resArray2_d0,
        q0 => resArray2_q0,
        address1 => resArray2_address1,
        ce1 => resArray2_ce1,
        we1 => resArray2_we1,
        d1 => ap_const_lv32_0,
        q1 => resArray2_q1);

    NeuralNetwork_muldEe_U0 : component NeuralNetwork_muldEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 8,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => input_r_load_reg_961,
        din1 => reg_426,
        ce => ap_const_logic_1,
        dout => grp_fu_533_p2);

    NeuralNetwork_muldEe_U1 : component NeuralNetwork_muldEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 8,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_430,
        din1 => reg_426,
        ce => ap_const_logic_1,
        dout => grp_fu_665_p2);

    NeuralNetwork_muleOg_U2 : component NeuralNetwork_muleOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 8,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_426,
        din1 => reg_436,
        ce => ap_const_logic_1,
        dout => grp_fu_818_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state12))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond6_fu_480_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state12))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state12 xor ap_const_logic_1);
                elsif ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond6_fu_480_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state23))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_1 = exitcond4_fu_584_p2))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state23))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_condition_pp1_exit_iter0_state23 xor ap_const_logic_1);
                elsif ((ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_1 = exitcond4_fu_584_p2))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state36))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state36)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_condition_pp2_exit_iter0_state36 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i1_reg_315_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond6_fu_480_p2 = ap_const_lv1_1))) then 
                i_0_i1_reg_315 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = exitcond_i1_fu_554_p2))) then 
                i_0_i1_reg_315 <= i_fu_560_p2;
            end if; 
        end if;
    end process;

    i_0_i_reg_359_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_1 = exitcond4_fu_584_p2))) then 
                i_0_i_reg_359 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_0 = exitcond_i_fu_693_p2))) then 
                i_0_i_reg_359 <= i_1_fu_699_p2;
            end if; 
        end if;
    end process;

    inNeurons_0_i5_reg_337_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                inNeurons_0_i5_reg_337 <= inNeurons_1_reg_1026;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = exitcond4_fu_584_p2))) then 
                inNeurons_0_i5_reg_337 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    inNeurons_0_i8_reg_293_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                inNeurons_0_i8_reg_293 <= inNeurons_reg_936;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond6_fu_480_p2 = ap_const_lv1_0))) then 
                inNeurons_0_i8_reg_293 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    inNeurons_0_i_reg_381_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                inNeurons_0_i_reg_381 <= inNeurons_2_reg_1121;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_const_lv1_0 = exitcond2_fu_723_p2))) then 
                inNeurons_0_i_reg_381 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    invdar2_reg_271_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = tmp_fu_452_p2))) then 
                invdar2_reg_271 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = tmp_8_fu_469_p2))) then 
                invdar2_reg_271 <= indvarinc3_fu_463_p2;
            end if; 
        end if;
    end process;

    invdar_reg_260_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = tmp_fu_452_p2))) then 
                invdar_reg_260 <= indvarinc_fu_446_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                invdar_reg_260 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    max1_i_reg_392_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter2) and (ap_const_lv1_0 = ap_reg_pp2_iter1_exitcond_i9_reg_1161))) then 
                max1_i_reg_392 <= max_2_i_max1_i_fu_878_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                max1_i_reg_392 <= resArray1_q1;
            end if; 
        end if;
    end process;

    max_index_i_reg_402_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter2) and (ap_const_lv1_0 = ap_reg_pp2_iter1_exitcond_i9_reg_1161))) then 
                max_index_i_reg_402 <= max_index_2_i_max_in_fu_885_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                max_index_i_reg_402 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    max_index_reg_414_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond_i9_reg_1161))) then 
                max_index_reg_414 <= i_2_reg_1170;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                max_index_reg_414 <= ap_const_lv4_1;
            end if; 
        end if;
    end process;

    outNeurons_0_i4_reg_326_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                outNeurons_0_i4_reg_326 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                outNeurons_0_i4_reg_326 <= outNeurons_1_reg_1003;
            end if; 
        end if;
    end process;

    outNeurons_0_i7_reg_282_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = tmp_8_fu_469_p2))) then 
                outNeurons_0_i7_reg_282 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                outNeurons_0_i7_reg_282 <= outNeurons_reg_918;
            end if; 
        end if;
    end process;

    outNeurons_0_i_reg_370_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                outNeurons_0_i_reg_370 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                outNeurons_0_i_reg_370 <= outNeurons_2_reg_1087;
            end if; 
        end if;
    end process;

    phi_mul1_reg_348_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                phi_mul1_reg_348 <= next_mul2_reg_1031;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = exitcond4_fu_584_p2))) then 
                phi_mul1_reg_348 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_304_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                phi_mul_reg_304 <= next_mul_reg_941;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond6_fu_480_p2 = ap_const_lv1_0))) then 
                phi_mul_reg_304 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    reg_430_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state35))) then 
                reg_430 <= resArray1_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                reg_430 <= resArray1_q0;
            end if; 
        end if;
    end process;

    reg_436_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                reg_436 <= resArray2_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                reg_436 <= resArray2_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp2_iter1_exitcond_i9_reg_1161 <= exitcond_i9_reg_1161;
                ap_reg_pp2_iter1_max_index_reg_414 <= max_index_reg_414;
                exitcond_i9_reg_1161 <= exitcond_i9_fu_852_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_i9_fu_852_p2) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0))) then
                i_2_reg_1170 <= i_2_fu_863_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                inNeurons_1_reg_1026 <= inNeurons_1_fu_629_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                inNeurons_2_reg_1121 <= inNeurons_2_fu_759_p2;
                    tmp_26_reg_1113(3 downto 0) <= tmp_26_fu_749_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                inNeurons_reg_936 <= inNeurons_fu_507_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                input_r_load_reg_961 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond_i9_reg_1161))) then
                max_1_reg_1175 <= resArray1_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_0 = exitcond3_fu_623_p2))) then
                next_mul2_reg_1031 <= next_mul2_fu_635_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond5_fu_501_p2))) then
                next_mul_reg_941 <= next_mul_fu_513_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                outNeurons_1_reg_1003 <= outNeurons_1_fu_590_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                outNeurons_2_reg_1087 <= outNeurons_2_fu_729_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                outNeurons_reg_918 <= outNeurons_fu_486_p2;
                    tmp_9_reg_909(6 downto 0) <= tmp_9_fu_475_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state29))) then
                reg_426 <= weights_s_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond6_fu_480_p2 = ap_const_lv1_0))) then
                resArray1_addr_1_reg_923 <= tmp_9_fu_475_p1(7 - 1 downto 0);
                    tmp_5_cast_reg_928(6 downto 0) <= tmp_5_cast_fu_492_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_i1_fu_554_p2))) then
                resArray1_addr_2_reg_990 <= tmp_3_fu_566_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_const_lv1_0 = exitcond2_fu_723_p2))) then
                resArray1_addr_5_reg_1092 <= tmp_17_fu_718_p1(7 - 1 downto 0);
                tmp2_reg_1103 <= tmp2_fu_743_p2;
                    tmp_35_cast_reg_1098(6 downto 0) <= tmp_35_cast_fu_739_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = exitcond4_fu_584_p2))) then
                resArray2_addr_1_reg_1008 <= tmp_s_fu_579_p1(7 - 1 downto 0);
                    tmp1_cast_reg_1018(12 downto 0) <= tmp1_cast_fu_610_p1(12 downto 0);
                    tmp_23_cast_reg_1013(6 downto 0) <= tmp_23_cast_fu_600_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_i_fu_693_p2))) then
                resArray2_addr_2_reg_1075 <= tmp_15_fu_705_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_10_reg_971 <= grp_fu_533_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_12_reg_976 <= tmp_12_fu_548_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                tmp_21_reg_1061 <= tmp_21_fu_687_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                tmp_24_reg_1056 <= grp_fu_665_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                tmp_29_reg_1156 <= tmp_29_fu_836_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_lv1_0 = exitcond_fu_753_p2))) then
                tmp_32_reg_1126 <= tmp_32_fu_795_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                tmp_34_reg_1151 <= grp_fu_818_p2;
            end if;
        end if;
    end process;
    tmp_9_reg_909(31 downto 7) <= "0000000000000000000000000";
    tmp_5_cast_reg_928(12 downto 7) <= "000000";
    tmp_23_cast_reg_1013(7) <= '0';
    tmp1_cast_reg_1018(13) <= '0';
    tmp_35_cast_reg_1098(7) <= '0';
    tmp_26_reg_1113(31 downto 4) <= "0000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond6_fu_480_p2, ap_CS_fsm_state5, exitcond5_fu_501_p2, exitcond_i1_fu_554_p2, ap_enable_reg_pp0_iter0, exitcond4_fu_584_p2, ap_CS_fsm_state15, ap_CS_fsm_state16, exitcond3_fu_623_p2, exitcond_i_fu_693_p2, ap_enable_reg_pp1_iter0, ap_CS_fsm_state26, exitcond2_fu_723_p2, ap_CS_fsm_state27, exitcond_fu_753_p2, exitcond_i9_fu_852_p2, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_block_pp0_stage0_flag00011011, ap_block_pp1_stage0_flag00011011, ap_block_pp2_stage0_flag00011011, tmp_fu_452_p2, tmp_8_fu_469_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = tmp_fu_452_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = tmp_8_fu_469_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond6_fu_480_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond5_fu_501_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_lv1_1 = exitcond_i1_fu_554_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_lv1_1 = exitcond_i1_fu_554_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_1 = exitcond4_fu_584_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (ap_const_lv1_1 = exitcond3_fu_623_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_lv1_1 = exitcond_i_fu_693_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_lv1_1 = exitcond_i_fu_693_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_const_lv1_0 = exitcond2_fu_723_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state27 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state27) and (ap_const_lv1_1 = exitcond_fu_753_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_logic_1 = ap_enable_reg_pp2_iter2) and (ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter0) and (ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_lv1_1 = exitcond_i9_fu_852_p2) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_const_logic_1 = ap_enable_reg_pp2_iter2) and (ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_enable_reg_pp2_iter0) and (ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_lv1_1 = exitcond_i9_fu_852_p2) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(11);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(21);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(33);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state14 <= ap_CS_fsm(12);
    ap_CS_fsm_state15 <= ap_CS_fsm(13);
    ap_CS_fsm_state16 <= ap_CS_fsm(14);
    ap_CS_fsm_state17 <= ap_CS_fsm(15);
    ap_CS_fsm_state18 <= ap_CS_fsm(16);
    ap_CS_fsm_state19 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(18);
    ap_CS_fsm_state21 <= ap_CS_fsm(19);
    ap_CS_fsm_state22 <= ap_CS_fsm(20);
    ap_CS_fsm_state25 <= ap_CS_fsm(22);
    ap_CS_fsm_state26 <= ap_CS_fsm(23);
    ap_CS_fsm_state27 <= ap_CS_fsm(24);
    ap_CS_fsm_state28 <= ap_CS_fsm(25);
    ap_CS_fsm_state29 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(27);
    ap_CS_fsm_state31 <= ap_CS_fsm(28);
    ap_CS_fsm_state32 <= ap_CS_fsm(29);
    ap_CS_fsm_state33 <= ap_CS_fsm(30);
    ap_CS_fsm_state34 <= ap_CS_fsm(31);
    ap_CS_fsm_state35 <= ap_CS_fsm(32);
    ap_CS_fsm_state39 <= ap_CS_fsm(34);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state12_assign_proc : process(exitcond_i1_fu_554_p2)
    begin
        if ((ap_const_lv1_1 = exitcond_i1_fu_554_p2)) then 
            ap_condition_pp0_exit_iter0_state12 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state23_assign_proc : process(exitcond_i_fu_693_p2)
    begin
        if ((ap_const_lv1_1 = exitcond_i_fu_693_p2)) then 
            ap_condition_pp1_exit_iter0_state23 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state23 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state36_assign_proc : process(exitcond_i9_fu_852_p2)
    begin
        if ((ap_const_lv1_1 = exitcond_i9_fu_852_p2)) then 
            ap_condition_pp2_exit_iter0_state36 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state36 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state39)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (ap_const_logic_1 = ap_CS_fsm_state39))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp1_iter0) and (ap_const_logic_0 = ap_enable_reg_pp1_iter1))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp2_iter0) and (ap_const_logic_0 = ap_enable_reg_pp2_iter1) and (ap_const_logic_0 = ap_enable_reg_pp2_iter2))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= max_index_i_reg_402;

    bias_s_address0_assign_proc : process(tmp_9_reg_909, ap_CS_fsm_state5, ap_CS_fsm_state16, ap_CS_fsm_state27, tmp_30_cast_fu_656_p1, tmp_38_cast_fu_805_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            bias_s_address0 <= tmp_38_cast_fu_805_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            bias_s_address0 <= tmp_30_cast_fu_656_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bias_s_address0 <= tmp_9_reg_909(8 - 1 downto 0);
        else 
            bias_s_address0 <= "XXXXXXXX";
        end if; 
    end process;


    bias_s_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state16, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            bias_s_ce0 <= ap_const_logic_1;
        else 
            bias_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond2_fu_723_p2 <= "1" when (outNeurons_0_i_reg_370 = ap_const_lv7_46) else "0";
    exitcond3_fu_623_p2 <= "1" when (inNeurons_0_i5_reg_337 = ap_const_lv7_46) else "0";
    exitcond4_fu_584_p2 <= "1" when (outNeurons_0_i4_reg_326 = ap_const_lv7_46) else "0";
    exitcond5_fu_501_p2 <= "1" when (inNeurons_0_i8_reg_293 = ap_const_lv7_50) else "0";
    exitcond6_fu_480_p2 <= "1" when (outNeurons_0_i7_reg_282 = ap_const_lv7_46) else "0";
    exitcond_fu_753_p2 <= "1" when (inNeurons_0_i_reg_381 = ap_const_lv4_A) else "0";
    exitcond_i1_fu_554_p2 <= "1" when (i_0_i1_reg_315 = ap_const_lv7_46) else "0";
    exitcond_i9_fu_852_p2 <= "1" when (max_index_phi_fu_418_p4 = ap_const_lv4_A) else "0";
    exitcond_i_fu_693_p2 <= "1" when (i_0_i_reg_359 = ap_const_lv7_46) else "0";
    i_1_fu_699_p2 <= std_logic_vector(unsigned(i_0_i_reg_359) + unsigned(ap_const_lv7_1));
    i_2_fu_863_p2 <= std_logic_vector(unsigned(max_index_phi_fu_418_p4) + unsigned(ap_const_lv4_1));
    i_fu_560_p2 <= std_logic_vector(unsigned(i_0_i1_reg_315) + unsigned(ap_const_lv7_1));
    inNeurons_1_fu_629_p2 <= std_logic_vector(unsigned(inNeurons_0_i5_reg_337) + unsigned(ap_const_lv7_1));
    inNeurons_2_fu_759_p2 <= std_logic_vector(unsigned(inNeurons_0_i_reg_381) + unsigned(ap_const_lv4_1));
    inNeurons_fu_507_p2 <= std_logic_vector(unsigned(inNeurons_0_i8_reg_293) + unsigned(ap_const_lv7_1));
    indvarinc3_fu_463_p2 <= std_logic_vector(unsigned(invdar2_reg_271) + unsigned(ap_const_lv7_1));
    indvarinc_fu_446_p2 <= std_logic_vector(unsigned(invdar_reg_260) + unsigned(ap_const_lv7_1));
    input_r_address0 <= tmp_1_fu_496_p1(7 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    invdar2_cast_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar2_reg_271),32));
    invdar_cast_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar_reg_260),32));
    max_2_i_max1_i_fu_878_p3 <= 
        max_1_reg_1175 when (tmp_2_i_fu_873_p2(0) = '1') else 
        max1_i_reg_392;
    max_index_2_i_max_in_fu_885_p3 <= 
        max_index_cast3_fu_869_p1 when (tmp_2_i_fu_873_p2(0) = '1') else 
        max_index_i_reg_402;
    max_index_cast3_fu_869_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp2_iter1_max_index_reg_414),8));

    max_index_phi_fu_418_p4_assign_proc : process(max_index_reg_414, ap_CS_fsm_pp2_stage0, exitcond_i9_reg_1161, i_2_reg_1170, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond_i9_reg_1161) and (ap_block_pp2_stage0_flag00000000 = ap_const_boolean_0))) then 
            max_index_phi_fu_418_p4 <= i_2_reg_1170;
        else 
            max_index_phi_fu_418_p4 <= max_index_reg_414;
        end if; 
    end process;

    neuronIndex_fu_785_p2 <= std_logic_vector(unsigned(p_shl7_cast_fu_781_p1) + unsigned(p_shl_fu_765_p3));
    next_mul2_fu_635_p2 <= std_logic_vector(unsigned(phi_mul1_reg_348) + unsigned(ap_const_lv13_46));
    next_mul_fu_513_p2 <= std_logic_vector(unsigned(phi_mul_reg_304) + unsigned(ap_const_lv13_46));
    outNeurons_1_fu_590_p2 <= std_logic_vector(unsigned(outNeurons_0_i4_reg_326) + unsigned(ap_const_lv7_1));
    outNeurons_2_fu_729_p2 <= std_logic_vector(unsigned(outNeurons_0_i_reg_370) + unsigned(ap_const_lv7_1));
    outNeurons_fu_486_p2 <= std_logic_vector(unsigned(outNeurons_0_i7_reg_282) + unsigned(ap_const_lv7_1));
    p_shl7_cast_fu_781_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl7_fu_773_p3),7));
    p_shl7_fu_773_p3 <= (inNeurons_0_i_reg_381 & ap_const_lv1_0);
    p_shl_fu_765_p3 <= (inNeurons_0_i_reg_381 & ap_const_lv3_0);
    phi_mul1_cast_fu_614_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul1_reg_348),14));

    resArray1_address0_assign_proc : process(ap_CS_fsm_state2, tmp_9_fu_475_p1, ap_CS_fsm_state4, resArray1_addr_1_reg_923, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, resArray1_addr_5_reg_1092, ap_CS_fsm_state11, ap_CS_fsm_state9, ap_CS_fsm_state34, invdar_cast_fu_441_p1, tmp_3_fu_566_p1, ap_block_pp0_stage0_flag00000000)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            resArray1_address0 <= resArray1_addr_5_reg_1092;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            resArray1_address0 <= tmp_3_fu_566_p1(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            resArray1_address0 <= resArray1_addr_1_reg_923;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            resArray1_address0 <= tmp_9_fu_475_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            resArray1_address0 <= invdar_cast_fu_441_p1(7 - 1 downto 0);
        else 
            resArray1_address0 <= "XXXXXXX";
        end if; 
    end process;


    resArray1_address1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp0_stage0, resArray1_addr_2_reg_990, ap_CS_fsm_state16, ap_CS_fsm_state26, resArray1_addr_5_reg_1092, exitcond2_fu_723_p2, ap_CS_fsm_state27, ap_CS_fsm_state30, ap_enable_reg_pp2_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_state32, ap_block_pp2_stage0_flag00000000, ap_block_pp0_stage0_flag00000000, tmp_13_fu_618_p1, tmp_17_fu_718_p1, tmp_1_i_fu_858_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0) and (ap_block_pp2_stage0_flag00000000 = ap_const_boolean_0))) then 
            resArray1_address1 <= tmp_1_i_fu_858_p1(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state32))) then 
            resArray1_address1 <= resArray1_addr_5_reg_1092;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_const_lv1_1 = exitcond2_fu_723_p2))) then 
            resArray1_address1 <= ap_const_lv32_0(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_const_lv1_0 = exitcond2_fu_723_p2))) then 
            resArray1_address1 <= tmp_17_fu_718_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            resArray1_address1 <= tmp_13_fu_618_p1(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            resArray1_address1 <= resArray1_addr_2_reg_990;
        else 
            resArray1_address1 <= "XXXXXXX";
        end if; 
    end process;


    resArray1_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter0, ap_CS_fsm_state11, ap_CS_fsm_state9, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            resArray1_ce0 <= ap_const_logic_1;
        else 
            resArray1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    resArray1_ce1_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_flag00011001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_CS_fsm_state16, ap_CS_fsm_state26, exitcond2_fu_723_p2, ap_CS_fsm_state27, ap_CS_fsm_state30, ap_enable_reg_pp2_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_const_lv1_0 = exitcond2_fu_723_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_const_lv1_1 = exitcond2_fu_723_p2)) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state30) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0)) or (ap_const_logic_1 = ap_CS_fsm_state32) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then 
            resArray1_ce1 <= ap_const_logic_1;
        else 
            resArray1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    resArray1_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, tmp_12_reg_976, ap_CS_fsm_state11, ap_CS_fsm_state9, ap_CS_fsm_state34, tmp_11_fu_538_p2, tmp_31_fu_845_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            resArray1_d0 <= tmp_31_fu_845_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            resArray1_d0 <= tmp_12_reg_976;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            resArray1_d0 <= tmp_11_fu_538_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            resArray1_d0 <= ap_const_lv32_0;
        else 
            resArray1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    resArray1_d1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_state26, exitcond2_fu_723_p2, ap_enable_reg_pp0_iter1, ap_CS_fsm_state32, ap_block_pp0_stage0_flag00000000, tmp_35_fu_824_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            resArray1_d1 <= tmp_35_fu_824_p2;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_const_lv1_0 = exitcond2_fu_723_p2)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then 
            resArray1_d1 <= ap_const_lv32_0;
        else 
            resArray1_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    resArray1_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, exitcond6_fu_480_p2, ap_CS_fsm_state11, ap_CS_fsm_state9, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond6_fu_480_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            resArray1_we0 <= ap_const_logic_1;
        else 
            resArray1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    resArray1_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_CS_fsm_state26, exitcond2_fu_723_p2, ap_enable_reg_pp0_iter1, ap_CS_fsm_state32, tmp_4_fu_571_p3)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_const_lv1_0 = exitcond2_fu_723_p2)) or (ap_const_logic_1 = ap_CS_fsm_state32) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = tmp_4_fu_571_p3)))) then 
            resArray1_we1 <= ap_const_logic_1;
        else 
            resArray1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    resArray2_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state15, resArray2_addr_1_reg_1008, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_state22, ap_CS_fsm_state20, invdar2_cast_fu_458_p1, tmp_s_fu_579_p1, tmp_15_fu_705_p1, ap_block_pp1_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0))) then 
            resArray2_address0 <= tmp_15_fu_705_p1(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            resArray2_address0 <= resArray2_addr_1_reg_1008;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            resArray2_address0 <= tmp_s_fu_579_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            resArray2_address0 <= invdar2_cast_fu_458_p1(7 - 1 downto 0);
        else 
            resArray2_address0 <= "XXXXXXX";
        end if; 
    end process;


    resArray2_address1_assign_proc : process(ap_CS_fsm_pp1_stage0, resArray2_addr_2_reg_1075, tmp_26_reg_1113, ap_CS_fsm_state28, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_flag00000000)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            resArray2_address1 <= tmp_26_reg_1113(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1))) then 
            resArray2_address1 <= resArray2_addr_2_reg_1075;
        else 
            resArray2_address1 <= "XXXXXXX";
        end if; 
    end process;


    resArray2_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_flag00011001, ap_enable_reg_pp1_iter0, ap_CS_fsm_state22, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state18) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0)) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            resArray2_ce0 <= ap_const_logic_1;
        else 
            resArray2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    resArray2_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_flag00011001, ap_CS_fsm_state28, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state28) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1)))) then 
            resArray2_ce1 <= ap_const_logic_1;
        else 
            resArray2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    resArray2_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state15, tmp_21_reg_1061, ap_CS_fsm_state22, ap_CS_fsm_state20, tmp_25_fu_671_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            resArray2_d0 <= tmp_21_reg_1061;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            resArray2_d0 <= tmp_25_fu_671_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            resArray2_d0 <= ap_const_lv32_0;
        else 
            resArray2_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    resArray2_we0_assign_proc : process(ap_CS_fsm_state3, exitcond4_fu_584_p2, ap_CS_fsm_state15, ap_CS_fsm_state22, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_0 = exitcond4_fu_584_p2)) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            resArray2_we0 <= ap_const_logic_1;
        else 
            resArray2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    resArray2_we1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_flag00011001, ap_enable_reg_pp1_iter1, tmp_16_fu_710_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_1 = tmp_16_fu_710_p3))) then 
            resArray2_we1 <= ap_const_logic_1;
        else 
            resArray2_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_cast_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_fu_604_p2),14));
    tmp1_fu_604_p2 <= std_logic_vector(unsigned(tmp_23_cast9_fu_596_p1) + unsigned(ap_const_lv13_15E0));
    tmp2_fu_743_p2 <= std_logic_vector(unsigned(tmp_35_cast6_fu_735_p1) + unsigned(ap_const_lv14_2904));
    tmp_11_fu_538_p2 <= std_logic_vector(signed(reg_430) + signed(tmp_10_reg_971));
    tmp_12_fu_548_p2 <= std_logic_vector(unsigned(resArray1_q0) + unsigned(tmp_5_fu_544_p1));
    tmp_13_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(inNeurons_0_i5_reg_337),32));
    tmp_15_fu_705_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_359),32));
    tmp_16_fu_710_p3 <= resArray2_q0(31 downto 31);
    tmp_17_fu_718_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(outNeurons_0_i_reg_370),32));
    tmp_18_fu_651_p2 <= std_logic_vector(unsigned(ap_const_lv8_46) + unsigned(tmp_23_cast_reg_1013));
    tmp_19_fu_677_p2 <= std_logic_vector(shift_left(unsigned(bias_s_q0),to_integer(unsigned('0' & ap_const_lv8_3(8-1 downto 0)))));
    tmp_1_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(inNeurons_0_i8_reg_293),32));
    tmp_1_i_fu_858_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_index_phi_fu_418_p4),32));
        tmp_20_fu_683_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_19_fu_677_p2),32));

    tmp_21_fu_687_p2 <= std_logic_vector(unsigned(resArray2_q0) + unsigned(tmp_20_fu_683_p1));
    tmp_22_fu_641_p2 <= std_logic_vector(unsigned(tmp1_cast_reg_1018) + unsigned(phi_mul1_cast_fu_614_p1));
    tmp_23_cast9_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(outNeurons_0_i4_reg_326),13));
    tmp_23_cast_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(outNeurons_0_i4_reg_326),8));
    tmp_25_cast_fu_646_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_641_p2),32));
    tmp_25_fu_671_p2 <= std_logic_vector(signed(reg_436) + signed(tmp_24_reg_1056));
    tmp_26_fu_749_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(inNeurons_0_i_reg_381),32));
    tmp_27_fu_800_p2 <= std_logic_vector(signed(ap_const_lv8_8C) + signed(tmp_35_cast_reg_1098));
    tmp_28_fu_830_p2 <= std_logic_vector(shift_left(unsigned(bias_s_q0),to_integer(unsigned('0' & ap_const_lv8_3(8-1 downto 0)))));
    tmp_29_fu_836_p2 <= std_logic_vector(unsigned(bias_s_q0) + unsigned(tmp_28_fu_830_p2));
    tmp_2_i_fu_873_p2 <= "1" when (signed(max_1_reg_1175) > signed(max1_i_reg_392)) else "0";
    tmp_30_cast_fu_656_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_651_p2),32));
        tmp_30_fu_842_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_29_reg_1156),32));

    tmp_31_fu_845_p2 <= std_logic_vector(signed(reg_430) + signed(tmp_30_fu_842_p1));
    tmp_32_fu_795_p2 <= std_logic_vector(unsigned(tmp_42_cast_fu_791_p1) + unsigned(tmp2_reg_1103));
    tmp_35_cast6_fu_735_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(outNeurons_0_i_reg_370),14));
    tmp_35_cast_fu_739_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(outNeurons_0_i_reg_370),8));
    tmp_35_fu_824_p2 <= std_logic_vector(unsigned(tmp_34_reg_1151) + unsigned(reg_430));
    tmp_38_cast_fu_805_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_27_fu_800_p2),32));
    tmp_3_fu_566_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i1_reg_315),32));
    tmp_42_cast_fu_791_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(neuronIndex_fu_785_p2),14));
    tmp_45_cast_fu_810_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_32_reg_1126),32));
    tmp_4_fu_571_p3 <= resArray1_q0(31 downto 31);
    tmp_5_cast_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(outNeurons_0_i7_reg_282),13));
        tmp_5_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bias_s_q0),32));

    tmp_6_cast_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_519_p2),32));
    tmp_6_fu_519_p2 <= std_logic_vector(unsigned(phi_mul_reg_304) + unsigned(tmp_5_cast_reg_928));
    tmp_8_fu_469_p2 <= "1" when (invdar2_reg_271 = ap_const_lv7_45) else "0";
    tmp_9_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(outNeurons_0_i7_reg_282),32));
    tmp_fu_452_p2 <= "1" when (invdar_reg_260 = ap_const_lv7_45) else "0";
    tmp_s_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(outNeurons_0_i4_reg_326),32));

    weights_s_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state16, ap_CS_fsm_state28, tmp_6_cast_fu_524_p1, tmp_25_cast_fu_646_p1, tmp_45_cast_fu_810_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            weights_s_address0 <= tmp_45_cast_fu_810_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            weights_s_address0 <= tmp_25_cast_fu_646_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            weights_s_address0 <= tmp_6_cast_fu_524_p1(14 - 1 downto 0);
        else 
            weights_s_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    weights_s_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state16, ap_CS_fsm_state28)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            weights_s_ce0 <= ap_const_logic_1;
        else 
            weights_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
