-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

--
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity NeuralNetwork_biag8j_ram is 
    generic(
            mem_type    : string := "block"; 
            dwidth     : integer := 8; 
            awidth     : integer := 8; 
            mem_size    : integer := 150
    ); 
    port (
          addr0     : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          d0        : in std_logic_vector(dwidth-1 downto 0); 
          we0       : in std_logic; 
          q0        : out std_logic_vector(dwidth-1 downto 0);
          clk        : in std_logic 
    ); 
end entity; 


architecture rtl of NeuralNetwork_biag8j_ram is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
shared variable ram : mem_array := (
    0 => "00000000", 1 => "00000010", 2 => "11111111", 3 => "00000001", 
    4 => "00000000", 5 => "00000010", 6 => "11111110", 7 to 9=> "00000000", 
    10 => "11111111", 11 => "00000001", 12 => "00000000", 13 to 14=> "00000001", 
    15 => "00000011", 16 => "00000001", 17 => "11111111", 18 => "00000000", 
    19 => "00000001", 20 => "00000000", 21 to 22=> "00000001", 23 => "00000010", 
    24 to 25=> "00000000", 26 => "11111111", 27 => "00000000", 28 => "11111110", 
    29 => "00000000", 30 => "00000100", 31 => "00000011", 32 => "00000010", 
    33 => "00000001", 34 => "00000000", 35 => "00000001", 36 => "00000000", 
    37 => "00000001", 38 to 39=> "11111111", 40 => "00000000", 41 to 42=> "00000010", 
    43 to 44=> "00000000", 45 => "11111111", 46 => "00000000", 47 => "00000001", 
    48 to 49=> "00000000", 50 => "11111110", 51 => "00000000", 52 => "11111111", 
    53 => "00000001", 54 => "00000000", 55 => "11111111", 56 => "00000001", 
    57 => "00000000", 58 to 59=> "00000001", 60 => "00000000", 61 => "00000010", 
    62 to 63=> "00000000", 64 => "00000011", 65 to 66=> "00000000", 67 => "11111111", 
    68 => "00000011", 69 to 71=> "11111111", 72 => "00000001", 73 => "00000011", 
    74 => "00000010", 75 to 76=> "00000000", 77 => "00000001", 78 => "00000011", 
    79 => "00000000", 80 => "00000001", 81 => "00000000", 82 to 83=> "00000001", 
    84 => "00000000", 85 => "00000010", 86 => "00000100", 87 to 88=> "11111111", 
    89 => "00000000", 90 => "00000001", 91 => "00000010", 92 => "00000000", 
    93 to 94=> "00000001", 95 => "11111111", 96 => "00000000", 97 => "00000001", 
    98 => "00000000", 99 to 100=> "00000010", 101 => "00000001", 102 => "00000000", 
    103 => "00000010", 104 => "00000001", 105 => "00000010", 106 => "00000011", 
    107 => "00000000", 108 to 109=> "00000001", 110 => "00000010", 111 => "00000000", 
    112 to 113=> "00000001", 114 to 115=> "00000000", 116 => "00000010", 117 => "00000001", 
    118 to 119=> "00000000", 120 to 121=> "00000001", 122 => "11111111", 123 => "00000001", 
    124 => "00000010", 125 => "11111110", 126 to 127=> "00000001", 128 => "11111110", 
    129 => "00000010", 130 => "00000000", 131 => "00000010", 132 => "11111110", 
    133 => "00000011", 134 => "00000000", 135 => "00000011", 136 => "00000010", 
    137 => "00000001", 138 to 140=> "00000000", 141 to 142=> "11111111", 143 to 144=> "00000000", 
    145 => "11111111", 146 => "00000000", 147 => "11111111", 148 => "00000011", 
    149 => "00000001" );

attribute syn_ramstyle : string; 
attribute syn_ramstyle of ram : variable is "block_ram";
attribute ram_style : string;
attribute ram_style of ram : variable is mem_type;
attribute EQUIVALENT_REGISTER_REMOVAL : string;

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_memory_access_0: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            if (we0 = '1') then 
                ram(CONV_INTEGER(addr0_tmp)) := d0; 
            end if;
            q0 <= ram(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;


end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity NeuralNetwork_biag8j is
    generic (
        DataWidth : INTEGER := 8;
        AddressRange : INTEGER := 150;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of NeuralNetwork_biag8j is
    component NeuralNetwork_biag8j_ram is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            d0 : IN STD_LOGIC_VECTOR;
            we0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    NeuralNetwork_biag8j_ram_U :  component NeuralNetwork_biag8j_ram
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        d0 => d0,
        we0 => we0,
        q0 => q0);

end architecture;


