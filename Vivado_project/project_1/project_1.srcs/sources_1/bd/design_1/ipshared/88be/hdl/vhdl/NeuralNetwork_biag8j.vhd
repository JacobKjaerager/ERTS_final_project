-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

--
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity NeuralNetwork_biag8j_ram is 
    generic(
            mem_type    : string := "block"; 
            dwidth     : integer := 8; 
            awidth     : integer := 8; 
            mem_size    : integer := 150
    ); 
    port (
          addr0     : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          d0        : in std_logic_vector(dwidth-1 downto 0); 
          we0       : in std_logic; 
          q0        : out std_logic_vector(dwidth-1 downto 0);
          clk        : in std_logic 
    ); 
end entity; 


architecture rtl of NeuralNetwork_biag8j_ram is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
shared variable ram : mem_array := (
    0 to 1=> "00000001", 2 to 3=> "00000000", 4 => "00000001", 5 => "11111111", 
    6 => "00000000", 7 to 8=> "00000001", 9 => "00000011", 10 => "00000000", 
    11 => "00000011", 12 => "00000010", 13 => "00000000", 14 => "00000011", 
    15 => "00000001", 16 => "11111111", 17 => "00000001", 18 => "00000011", 
    19 => "11111111", 20 => "00000000", 21 => "11111111", 22 => "00000001", 
    23 => "00000100", 24 => "00000010", 25 => "00000000", 26 => "00000001", 
    27 => "00000000", 28 => "00000010", 29 => "00000000", 30 => "00000010", 
    31 to 32=> "00000000", 33 => "00000010", 34 to 35=> "00000001", 36 => "11111110", 
    37 => "00000001", 38 => "00000000", 39 => "00000001", 40 => "00000000", 
    41 => "00000100", 42 => "00000011", 43 => "00000001", 44 => "11111101", 
    45 to 46=> "00000001", 47 => "11111110", 48 => "00000001", 49 => "11111111", 
    50 => "00000000", 51 => "11111111", 52 => "00000010", 53 => "00000000", 
    54 => "00000010", 55 => "11111111", 56 => "00000001", 57 => "11111111", 
    58 => "11111110", 59 => "11111111", 60 => "00000011", 61 => "00000010", 
    62 to 63=> "11111111", 64 => "00000100", 65 to 66=> "00000001", 67 => "11111110", 
    68 => "11111111", 69 to 70=> "00000000", 71 => "00000010", 72 => "00000000", 
    73 => "11111111", 74 to 75=> "00000000", 76 => "00000001", 77 => "00000010", 
    78 => "00000000", 79 => "00000001", 80 => "00000010", 81 => "00000001", 
    82 => "11111111", 83 => "00000010", 84 => "00000001", 85 => "00000000", 
    86 => "11111111", 87 => "00000000", 88 => "00000010", 89 => "00000001", 
    90 => "00000000", 91 => "11111111", 92 => "00000010", 93 => "00000000", 
    94 => "00000001", 95 => "00000000", 96 => "00000010", 97 => "00000001", 
    98 => "11111111", 99 to 100=> "00000000", 101 => "00000001", 102 => "00000000", 
    103 => "00000001", 104 => "00000000", 105 => "11111111", 106 => "00000010", 
    107 => "00000001", 108 => "00000000", 109 => "00000010", 110 to 111=> "00000001", 
    112 => "11111111", 113 => "00000001", 114 => "00000010", 115 => "00000000", 
    116 => "00000011", 117 => "00000000", 118 => "00000001", 119 => "00000000", 
    120 => "00000001", 121 => "00000000", 122 to 123=> "00000001", 124 to 125=> "00000000", 
    126 => "00000100", 127 => "00000001", 128 => "11111110", 129 => "11111111", 
    130 to 132=> "00000001", 133 => "00000000", 134 => "00000010", 135 => "11111111", 
    136 => "00000000", 137 => "00000010", 138 => "00000001", 139 => "00000011", 
    140 => "00000000", 141 to 142=> "11111111", 143 to 144=> "00000000", 145 => "11111111", 
    146 => "00000001", 147 => "11111111", 148 => "00000010", 149 => "00000001" );

attribute syn_ramstyle : string; 
attribute syn_ramstyle of ram : variable is "block_ram";
attribute ram_style : string;
attribute ram_style of ram : variable is mem_type;
attribute EQUIVALENT_REGISTER_REMOVAL : string;

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_memory_access_0: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            if (we0 = '1') then 
                ram(CONV_INTEGER(addr0_tmp)) := d0; 
            end if;
            q0 <= ram(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;


end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity NeuralNetwork_biag8j is
    generic (
        DataWidth : INTEGER := 8;
        AddressRange : INTEGER := 150;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of NeuralNetwork_biag8j is
    component NeuralNetwork_biag8j_ram is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            d0 : IN STD_LOGIC_VECTOR;
            we0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    NeuralNetwork_biag8j_ram_U :  component NeuralNetwork_biag8j_ram
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        d0 => d0,
        we0 => we0,
        q0 => q0);

end architecture;


