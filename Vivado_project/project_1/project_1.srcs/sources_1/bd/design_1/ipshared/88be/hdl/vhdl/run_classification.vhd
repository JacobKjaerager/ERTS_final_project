-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity run_classification is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_s_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    weights_s_ce0 : OUT STD_LOGIC;
    weights_s_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    bias_s_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    bias_s_ce0 : OUT STD_LOGIC;
    bias_s_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of run_classification is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (22 downto 0) := "00000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (22 downto 0) := "00000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (22 downto 0) := "00000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (22 downto 0) := "00000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (22 downto 0) := "00000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (22 downto 0) := "00000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (22 downto 0) := "00001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (22 downto 0) := "00010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (22 downto 0) := "00100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (22 downto 0) := "01000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (22 downto 0) := "10000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv8_46 : STD_LOGIC_VECTOR (7 downto 0) := "01000110";
    constant ap_const_lv8_A : STD_LOGIC_VECTOR (7 downto 0) := "00001010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_45 : STD_LOGIC_VECTOR (6 downto 0) := "1000101";
    constant ap_const_lv7_46 : STD_LOGIC_VECTOR (6 downto 0) := "1000110";
    constant ap_const_lv7_50 : STD_LOGIC_VECTOR (6 downto 0) := "1010000";
    constant ap_const_lv13_46 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000110";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal resArray1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_271 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal indvarinc_fu_281_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal indvarinc3_fu_298_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_1_i_fu_310_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i_reg_444 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal outNeurons_fu_321_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal outNeurons_reg_452 : STD_LOGIC_VECTOR (6 downto 0);
    signal resArray1_addr_2_reg_457 : STD_LOGIC_VECTOR (6 downto 0);
    signal exitcond3_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_i_i_cast_fu_327_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_17_i_i_cast_reg_462 : STD_LOGIC_VECTOR (12 downto 0);
    signal inNeurons_fu_342_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal inNeurons_reg_470 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal next_mul_fu_348_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal next_mul_reg_475 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal weights_load_reg_495 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal input_r_load_reg_500 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_367_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_i_reg_510 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_i_fu_382_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_i_reg_515 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal max_index_cast1_fu_388_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_index_cast1_reg_525 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal exitcond_i_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_403_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_538 : STD_LOGIC_VECTOR (3 downto 0);
    signal max_1_reg_543 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal max_2_i_max1_i_fu_414_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal max_index_2_i_max_in_fu_421_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal resArray1_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal resArray1_ce0 : STD_LOGIC;
    signal resArray1_we0 : STD_LOGIC;
    signal resArray1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal resArray2_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal resArray2_ce0 : STD_LOGIC;
    signal resArray2_we0 : STD_LOGIC;
    signal resArray2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal resArray2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_runLayer_fu_250_ap_start : STD_LOGIC;
    signal grp_runLayer_fu_250_ap_done : STD_LOGIC;
    signal grp_runLayer_fu_250_ap_idle : STD_LOGIC;
    signal grp_runLayer_fu_250_ap_ready : STD_LOGIC;
    signal grp_runLayer_fu_250_layer : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_runLayer_fu_250_numOfOutNeurons : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_runLayer_fu_250_input_r_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_runLayer_fu_250_input_r_ce0 : STD_LOGIC;
    signal grp_runLayer_fu_250_input_r_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_runLayer_fu_250_output_r_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_runLayer_fu_250_output_r_ce0 : STD_LOGIC;
    signal grp_runLayer_fu_250_output_r_we0 : STD_LOGIC;
    signal grp_runLayer_fu_250_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_runLayer_fu_250_output_r_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_runLayer_fu_250_weights_s_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_runLayer_fu_250_weights_s_ce0 : STD_LOGIC;
    signal grp_runLayer_fu_250_bias_s_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_runLayer_fu_250_bias_s_ce0 : STD_LOGIC;
    signal grp_relu_fu_266_ap_start : STD_LOGIC;
    signal grp_relu_fu_266_ap_done : STD_LOGIC;
    signal grp_relu_fu_266_ap_idle : STD_LOGIC;
    signal grp_relu_fu_266_ap_ready : STD_LOGIC;
    signal grp_relu_fu_266_data_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_relu_fu_266_data_ce0 : STD_LOGIC;
    signal grp_relu_fu_266_data_we0 : STD_LOGIC;
    signal grp_relu_fu_266_data_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_relu_fu_266_data_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal invdar_reg_162 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal invdar2_reg_173 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_8_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal outNeurons_i_reg_184 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal inNeurons_i_reg_195 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal phi_mul_reg_206 : STD_LOGIC_VECTOR (12 downto 0);
    signal max1_i_reg_217 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_index_i_reg_227 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_index_reg_239 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_grp_runLayer_fu_250_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_reg_grp_relu_fu_266_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal invdar_cast_fu_276_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal invdar2_cast_fu_293_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_i_i_cast_fu_359_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_i_fu_331_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i1_fu_398_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_7_fu_372_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_i_i_fu_354_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_11_i_fu_378_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_i2_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (22 downto 0);

    component runLayer IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        layer : IN STD_LOGIC_VECTOR (3 downto 0);
        numOfOutNeurons : IN STD_LOGIC_VECTOR (7 downto 0);
        input_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        weights_s_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        weights_s_ce0 : OUT STD_LOGIC;
        weights_s_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        bias_s_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        bias_s_ce0 : OUT STD_LOGIC;
        bias_s_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component relu IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        data_ce0 : OUT STD_LOGIC;
        data_we0 : OUT STD_LOGIC;
        data_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        data_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component NeuralNetwork_mulbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component run_classificatiodEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    resArray1_U : component run_classificatiodEe
    generic map (
        DataWidth => 32,
        AddressRange => 70,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => resArray1_address0,
        ce0 => resArray1_ce0,
        we0 => resArray1_we0,
        d0 => resArray1_d0,
        q0 => resArray1_q0);

    resArray2_U : component run_classificatiodEe
    generic map (
        DataWidth => 32,
        AddressRange => 70,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => resArray2_address0,
        ce0 => resArray2_ce0,
        we0 => resArray2_we0,
        d0 => resArray2_d0,
        q0 => resArray2_q0);

    grp_runLayer_fu_250 : component runLayer
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_runLayer_fu_250_ap_start,
        ap_done => grp_runLayer_fu_250_ap_done,
        ap_idle => grp_runLayer_fu_250_ap_idle,
        ap_ready => grp_runLayer_fu_250_ap_ready,
        layer => grp_runLayer_fu_250_layer,
        numOfOutNeurons => grp_runLayer_fu_250_numOfOutNeurons,
        input_r_address0 => grp_runLayer_fu_250_input_r_address0,
        input_r_ce0 => grp_runLayer_fu_250_input_r_ce0,
        input_r_q0 => grp_runLayer_fu_250_input_r_q0,
        output_r_address0 => grp_runLayer_fu_250_output_r_address0,
        output_r_ce0 => grp_runLayer_fu_250_output_r_ce0,
        output_r_we0 => grp_runLayer_fu_250_output_r_we0,
        output_r_d0 => grp_runLayer_fu_250_output_r_d0,
        output_r_q0 => grp_runLayer_fu_250_output_r_q0,
        weights_s_address0 => grp_runLayer_fu_250_weights_s_address0,
        weights_s_ce0 => grp_runLayer_fu_250_weights_s_ce0,
        weights_s_q0 => weights_s_q0,
        bias_s_address0 => grp_runLayer_fu_250_bias_s_address0,
        bias_s_ce0 => grp_runLayer_fu_250_bias_s_ce0,
        bias_s_q0 => bias_s_q0);

    grp_relu_fu_266 : component relu
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_relu_fu_266_ap_start,
        ap_done => grp_relu_fu_266_ap_done,
        ap_idle => grp_relu_fu_266_ap_idle,
        ap_ready => grp_relu_fu_266_ap_ready,
        data_address0 => grp_relu_fu_266_data_address0,
        data_ce0 => grp_relu_fu_266_data_ce0,
        data_we0 => grp_relu_fu_266_data_we0,
        data_d0 => grp_relu_fu_266_data_d0,
        data_q0 => grp_relu_fu_266_data_q0);

    NeuralNetwork_mulbkb_x_U9 : component NeuralNetwork_mulbkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 8,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => input_r_load_reg_500,
        din1 => weights_load_reg_495,
        ce => ap_const_logic_1,
        dout => grp_fu_367_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_relu_fu_266_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_relu_fu_266_ap_start <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond3_fu_315_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                    ap_reg_grp_relu_fu_266_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_relu_fu_266_ap_ready)) then 
                    ap_reg_grp_relu_fu_266_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_runLayer_fu_250_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_runLayer_fu_250_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
                    ap_reg_grp_runLayer_fu_250_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_runLayer_fu_250_ap_ready)) then 
                    ap_reg_grp_runLayer_fu_250_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv8_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state21) and (ap_const_lv1_1 = exitcond_i_fu_392_p2))) then 
                    ap_return_preg <= max_index_i_reg_227;
                end if; 
            end if;
        end if;
    end process;


    inNeurons_i_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                inNeurons_i_reg_195 <= inNeurons_reg_470;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond3_fu_315_p2 = ap_const_lv1_0))) then 
                inNeurons_i_reg_195 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    invdar2_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = tmp_fu_287_p2))) then 
                invdar2_reg_173 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = tmp_8_fu_304_p2))) then 
                invdar2_reg_173 <= indvarinc3_fu_298_p2;
            end if; 
        end if;
    end process;

    invdar_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = tmp_fu_287_p2))) then 
                invdar_reg_162 <= indvarinc_fu_281_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                invdar_reg_162 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    max1_i_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                max1_i_reg_217 <= max_2_i_max1_i_fu_414_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                max1_i_reg_217 <= resArray1_q0;
            end if; 
        end if;
    end process;

    max_index_i_reg_227_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                max_index_i_reg_227 <= max_index_2_i_max_in_fu_421_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                max_index_i_reg_227 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    max_index_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                max_index_reg_239 <= i_reg_538;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                max_index_reg_239 <= ap_const_lv4_1;
            end if; 
        end if;
    end process;

    outNeurons_i_reg_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = tmp_8_fu_304_p2))) then 
                outNeurons_i_reg_184 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                outNeurons_i_reg_184 <= outNeurons_reg_452;
            end if; 
        end if;
    end process;

    phi_mul_reg_206_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                phi_mul_reg_206 <= next_mul_reg_475;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond3_fu_315_p2 = ap_const_lv1_0))) then 
                phi_mul_reg_206 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state21) and (ap_const_lv1_0 = exitcond_i_fu_392_p2))) then
                i_reg_538 <= i_fu_403_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                inNeurons_reg_470 <= inNeurons_fu_342_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                input_r_load_reg_500 <= input_r_q0;
                weights_load_reg_495 <= weights_s_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                max_1_reg_543 <= resArray1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                    max_index_cast1_reg_525(3 downto 0) <= max_index_cast1_fu_388_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond_fu_336_p2))) then
                next_mul_reg_475 <= next_mul_fu_348_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                outNeurons_reg_452 <= outNeurons_fu_321_p2;
                    tmp_1_i_reg_444(6 downto 0) <= tmp_1_i_fu_310_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state20))) then
                reg_271 <= resArray1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond3_fu_315_p2 = ap_const_lv1_0))) then
                resArray1_addr_2_reg_457 <= tmp_1_i_fu_310_p1(7 - 1 downto 0);
                    tmp_17_i_i_cast_reg_462(6 downto 0) <= tmp_17_i_i_cast_fu_327_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_12_i_reg_515 <= tmp_12_i_fu_382_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_9_i_reg_510 <= grp_fu_367_p2;
            end if;
        end if;
    end process;
    tmp_1_i_reg_444(31 downto 7) <= "0000000000000000000000000";
    tmp_17_i_i_cast_reg_462(12 downto 7) <= "000000";
    max_index_cast1_reg_525(7 downto 4) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond3_fu_315_p2, ap_CS_fsm_state5, exitcond_fu_336_p2, ap_CS_fsm_state21, exitcond_i_fu_392_p2, grp_runLayer_fu_250_ap_done, grp_relu_fu_266_ap_done, tmp_fu_287_p2, tmp_8_fu_304_p2, ap_CS_fsm_state14, ap_CS_fsm_state18, ap_CS_fsm_state12, ap_CS_fsm_state16)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = tmp_fu_287_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = tmp_8_fu_304_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond3_fu_315_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond_fu_336_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (grp_relu_fu_266_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_runLayer_fu_250_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (grp_relu_fu_266_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (grp_runLayer_fu_250_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state21) and (ap_const_lv1_1 = exitcond_i_fu_392_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state21, exitcond_i_fu_392_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state21) and (ap_const_lv1_1 = exitcond_i_fu_392_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state21, exitcond_i_fu_392_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) and (ap_const_lv1_1 = exitcond_i_fu_392_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state21, exitcond_i_fu_392_p2, max_index_i_reg_227, ap_return_preg)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) and (ap_const_lv1_1 = exitcond_i_fu_392_p2))) then 
            ap_return <= max_index_i_reg_227;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;


    bias_s_address0_assign_proc : process(tmp_1_i_reg_444, ap_CS_fsm_state5, grp_runLayer_fu_250_bias_s_address0, ap_CS_fsm_state14, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bias_s_address0 <= tmp_1_i_reg_444(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            bias_s_address0 <= grp_runLayer_fu_250_bias_s_address0;
        else 
            bias_s_address0 <= "XXXXXXXX";
        end if; 
    end process;


    bias_s_ce0_assign_proc : process(ap_CS_fsm_state5, grp_runLayer_fu_250_bias_s_ce0, ap_CS_fsm_state14, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            bias_s_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            bias_s_ce0 <= grp_runLayer_fu_250_bias_s_ce0;
        else 
            bias_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond3_fu_315_p2 <= "1" when (outNeurons_i_reg_184 = ap_const_lv7_46) else "0";
    exitcond_fu_336_p2 <= "1" when (inNeurons_i_reg_195 = ap_const_lv7_50) else "0";
    exitcond_i_fu_392_p2 <= "1" when (max_index_reg_239 = ap_const_lv4_A) else "0";
    grp_relu_fu_266_ap_start <= ap_reg_grp_relu_fu_266_ap_start;

    grp_relu_fu_266_data_q0_assign_proc : process(resArray1_q0, resArray2_q0, ap_CS_fsm_state12, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_relu_fu_266_data_q0 <= resArray2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_relu_fu_266_data_q0 <= resArray1_q0;
        else 
            grp_relu_fu_266_data_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_runLayer_fu_250_ap_start <= ap_reg_grp_runLayer_fu_250_ap_start;

    grp_runLayer_fu_250_input_r_q0_assign_proc : process(resArray1_q0, resArray2_q0, ap_CS_fsm_state14, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_runLayer_fu_250_input_r_q0 <= resArray2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_runLayer_fu_250_input_r_q0 <= resArray1_q0;
        else 
            grp_runLayer_fu_250_input_r_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_runLayer_fu_250_layer_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_runLayer_fu_250_layer <= ap_const_lv4_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_runLayer_fu_250_layer <= ap_const_lv4_1;
        else 
            grp_runLayer_fu_250_layer <= "XXXX";
        end if; 
    end process;


    grp_runLayer_fu_250_numOfOutNeurons_assign_proc : process(ap_CS_fsm_state14, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_runLayer_fu_250_numOfOutNeurons <= ap_const_lv8_A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_runLayer_fu_250_numOfOutNeurons <= ap_const_lv8_46;
        else 
            grp_runLayer_fu_250_numOfOutNeurons <= "XXXXXXXX";
        end if; 
    end process;


    grp_runLayer_fu_250_output_r_q0_assign_proc : process(resArray1_q0, resArray2_q0, ap_CS_fsm_state14, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_runLayer_fu_250_output_r_q0 <= resArray1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_runLayer_fu_250_output_r_q0 <= resArray2_q0;
        else 
            grp_runLayer_fu_250_output_r_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_fu_403_p2 <= std_logic_vector(unsigned(max_index_reg_239) + unsigned(ap_const_lv4_1));
    inNeurons_fu_342_p2 <= std_logic_vector(unsigned(inNeurons_i_reg_195) + unsigned(ap_const_lv7_1));
    indvarinc3_fu_298_p2 <= std_logic_vector(unsigned(invdar2_reg_173) + unsigned(ap_const_lv7_1));
    indvarinc_fu_281_p2 <= std_logic_vector(unsigned(invdar_reg_162) + unsigned(ap_const_lv7_1));
    input_r_address0 <= tmp_4_i_fu_331_p1(7 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    invdar2_cast_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar2_reg_173),32));
    invdar_cast_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar_reg_162),32));
    max_2_i_max1_i_fu_414_p3 <= 
        max_1_reg_543 when (tmp_2_i2_fu_409_p2(0) = '1') else 
        max1_i_reg_217;
    max_index_2_i_max_in_fu_421_p3 <= 
        max_index_cast1_reg_525 when (tmp_2_i2_fu_409_p2(0) = '1') else 
        max_index_i_reg_227;
    max_index_cast1_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_index_reg_239),8));
    next_mul_fu_348_p2 <= std_logic_vector(unsigned(phi_mul_reg_206) + unsigned(ap_const_lv13_46));
    outNeurons_fu_321_p2 <= std_logic_vector(unsigned(outNeurons_i_reg_184) + unsigned(ap_const_lv7_1));

    resArray1_address0_assign_proc : process(ap_CS_fsm_state2, tmp_1_i_fu_310_p1, ap_CS_fsm_state4, resArray1_addr_2_reg_457, exitcond3_fu_315_p2, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state19, ap_CS_fsm_state21, grp_runLayer_fu_250_input_r_address0, grp_runLayer_fu_250_output_r_address0, grp_relu_fu_266_data_address0, ap_CS_fsm_state11, ap_CS_fsm_state9, ap_CS_fsm_state14, ap_CS_fsm_state18, ap_CS_fsm_state12, invdar_cast_fu_276_p1, tmp_1_i1_fu_398_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            resArray1_address0 <= tmp_1_i1_fu_398_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            resArray1_address0 <= ap_const_lv32_0(7 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            resArray1_address0 <= resArray1_addr_2_reg_457;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond3_fu_315_p2 = ap_const_lv1_0))) then 
            resArray1_address0 <= tmp_1_i_fu_310_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            resArray1_address0 <= invdar_cast_fu_276_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            resArray1_address0 <= grp_relu_fu_266_data_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            resArray1_address0 <= grp_runLayer_fu_250_output_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            resArray1_address0 <= grp_runLayer_fu_250_input_r_address0;
        else 
            resArray1_address0 <= "XXXXXXX";
        end if; 
    end process;


    resArray1_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, exitcond3_fu_315_p2, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state19, ap_CS_fsm_state21, grp_runLayer_fu_250_input_r_ce0, grp_runLayer_fu_250_output_r_ce0, grp_relu_fu_266_data_ce0, ap_CS_fsm_state11, ap_CS_fsm_state9, ap_CS_fsm_state14, ap_CS_fsm_state18, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond3_fu_315_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            resArray1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            resArray1_ce0 <= grp_relu_fu_266_data_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            resArray1_ce0 <= grp_runLayer_fu_250_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            resArray1_ce0 <= grp_runLayer_fu_250_input_r_ce0;
        else 
            resArray1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    resArray1_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, exitcond3_fu_315_p2, tmp_12_i_reg_515, grp_runLayer_fu_250_output_r_d0, grp_relu_fu_266_data_d0, ap_CS_fsm_state11, ap_CS_fsm_state9, ap_CS_fsm_state18, ap_CS_fsm_state12, tmp_i_7_fu_372_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            resArray1_d0 <= tmp_12_i_reg_515;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            resArray1_d0 <= tmp_i_7_fu_372_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond3_fu_315_p2 = ap_const_lv1_0)))) then 
            resArray1_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            resArray1_d0 <= grp_relu_fu_266_data_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            resArray1_d0 <= grp_runLayer_fu_250_output_r_d0;
        else 
            resArray1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    resArray1_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, exitcond3_fu_315_p2, grp_runLayer_fu_250_output_r_we0, grp_relu_fu_266_data_we0, ap_CS_fsm_state11, ap_CS_fsm_state9, ap_CS_fsm_state18, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond3_fu_315_p2 = ap_const_lv1_0)) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            resArray1_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            resArray1_we0 <= grp_relu_fu_266_data_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            resArray1_we0 <= grp_runLayer_fu_250_output_r_we0;
        else 
            resArray1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    resArray2_address0_assign_proc : process(ap_CS_fsm_state3, grp_runLayer_fu_250_input_r_address0, grp_runLayer_fu_250_output_r_address0, grp_relu_fu_266_data_address0, ap_CS_fsm_state14, ap_CS_fsm_state18, ap_CS_fsm_state16, invdar2_cast_fu_293_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            resArray2_address0 <= invdar2_cast_fu_293_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            resArray2_address0 <= grp_relu_fu_266_data_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            resArray2_address0 <= grp_runLayer_fu_250_output_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            resArray2_address0 <= grp_runLayer_fu_250_input_r_address0;
        else 
            resArray2_address0 <= "XXXXXXX";
        end if; 
    end process;


    resArray2_ce0_assign_proc : process(ap_CS_fsm_state3, grp_runLayer_fu_250_input_r_ce0, grp_runLayer_fu_250_output_r_ce0, grp_relu_fu_266_data_ce0, ap_CS_fsm_state14, ap_CS_fsm_state18, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            resArray2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            resArray2_ce0 <= grp_relu_fu_266_data_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            resArray2_ce0 <= grp_runLayer_fu_250_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            resArray2_ce0 <= grp_runLayer_fu_250_input_r_ce0;
        else 
            resArray2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    resArray2_d0_assign_proc : process(ap_CS_fsm_state3, grp_runLayer_fu_250_output_r_d0, grp_relu_fu_266_data_d0, ap_CS_fsm_state14, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            resArray2_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            resArray2_d0 <= grp_relu_fu_266_data_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            resArray2_d0 <= grp_runLayer_fu_250_output_r_d0;
        else 
            resArray2_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    resArray2_we0_assign_proc : process(ap_CS_fsm_state3, grp_runLayer_fu_250_output_r_we0, grp_relu_fu_266_data_we0, ap_CS_fsm_state14, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            resArray2_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            resArray2_we0 <= grp_relu_fu_266_data_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            resArray2_we0 <= grp_runLayer_fu_250_output_r_we0;
        else 
            resArray2_we0 <= ap_const_logic_0;
        end if; 
    end process;

        tmp_11_i_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bias_s_q0),32));

    tmp_12_i_fu_382_p2 <= std_logic_vector(unsigned(resArray1_q0) + unsigned(tmp_11_i_fu_378_p1));
    tmp_17_i_i_cast_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(outNeurons_i_reg_184),13));
    tmp_19_i_i_cast_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_i_i_fu_354_p2),32));
    tmp_19_i_i_fu_354_p2 <= std_logic_vector(unsigned(phi_mul_reg_206) + unsigned(tmp_17_i_i_cast_reg_462));
    tmp_1_i1_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_index_reg_239),32));
    tmp_1_i_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(outNeurons_i_reg_184),32));
    tmp_2_i2_fu_409_p2 <= "1" when (signed(max_1_reg_543) > signed(max1_i_reg_217)) else "0";
    tmp_4_i_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(inNeurons_i_reg_195),32));
    tmp_8_fu_304_p2 <= "1" when (invdar2_reg_173 = ap_const_lv7_45) else "0";
    tmp_fu_287_p2 <= "1" when (invdar_reg_162 = ap_const_lv7_45) else "0";
    tmp_i_7_fu_372_p2 <= std_logic_vector(unsigned(reg_271) + unsigned(tmp_9_i_reg_510));

    weights_s_address0_assign_proc : process(ap_CS_fsm_state5, grp_runLayer_fu_250_weights_s_address0, ap_CS_fsm_state14, ap_CS_fsm_state18, tmp_19_i_i_cast_fu_359_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            weights_s_address0 <= tmp_19_i_i_cast_fu_359_p1(14 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            weights_s_address0 <= grp_runLayer_fu_250_weights_s_address0;
        else 
            weights_s_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    weights_s_ce0_assign_proc : process(ap_CS_fsm_state5, grp_runLayer_fu_250_weights_s_ce0, ap_CS_fsm_state14, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            weights_s_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            weights_s_ce0 <= grp_runLayer_fu_250_weights_s_ce0;
        else 
            weights_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
