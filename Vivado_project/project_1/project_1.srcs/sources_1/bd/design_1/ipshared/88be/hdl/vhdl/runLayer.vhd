-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity runLayer is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    layer : IN STD_LOGIC_VECTOR (3 downto 0);
    numOfOutNeurons : IN STD_LOGIC_VECTOR (7 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_s_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    weights_s_ce0 : OUT STD_LOGIC;
    weights_s_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    bias_s_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    bias_s_ce0 : OUT STD_LOGIC;
    bias_s_q0 : IN STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of runLayer is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_46 : STD_LOGIC_VECTOR (7 downto 0) := "01000110";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv14_2904 : STD_LOGIC_VECTOR (13 downto 0) := "10100100000100";
    constant ap_const_lv14_15E0 : STD_LOGIC_VECTOR (13 downto 0) := "01010111100000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv6_A : STD_LOGIC_VECTOR (5 downto 0) := "001010";
    constant ap_const_lv6_24 : STD_LOGIC_VECTOR (5 downto 0) := "100100";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_46 : STD_LOGIC_VECTOR (6 downto 0) := "1000110";
    constant ap_const_lv13_46 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal reg_172 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_21_i_fu_190_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_21_i_reg_408 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i2_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i2_reg_413 : STD_LOGIC_VECTOR (0 downto 0);
    signal startIndex_1_i_fu_230_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal startIndex_1_i_reg_418 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_25_i_cast_fu_264_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_25_i_cast_reg_423 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_1_cast_cast_fu_273_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_cast_cast_reg_428 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal outNeurons_1_fu_282_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal outNeurons_1_reg_436 : STD_LOGIC_VECTOR (6 downto 0);
    signal output_addr_reg_441 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_i_cast_fu_288_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_17_i_cast_reg_446 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_4_fu_292_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_451 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal inNeurons_1_fu_302_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal inNeurons_1_reg_459 : STD_LOGIC_VECTOR (6 downto 0);
    signal next_mul_fu_308_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal next_mul_reg_464 : STD_LOGIC_VECTOR (12 downto 0);
    signal exitcond_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_351_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp1_reg_469 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal weights_load_reg_489 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal input_load_reg_494 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_381_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_504 : STD_LOGIC_VECTOR (31 downto 0);
    signal bias_load_reg_509 : STD_LOGIC_VECTOR (7 downto 0);
    signal outNeurons_reg_139 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal inNeurons_reg_150 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal phi_mul_reg_161 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_1_fu_268_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_i_cast_fu_360_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_i_cast_fu_373_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_386_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_395_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_180_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_21_i_fu_190_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_fu_202_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_mux_cast_fu_216_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_i1_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_i_fu_238_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_i_10_fu_252_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_i_cast9_fu_260_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl1_i_fu_322_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_i_fu_314_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl1_i_cast_fu_330_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal neuronIndex_fu_334_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal neuronIndex_1_cast_fu_340_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal neuronIndex_1_fu_344_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_23_i_fu_356_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp1_cast_fu_365_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_19_i_fu_368_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_395_p0 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_21_i_fu_190_p10 : STD_LOGIC_VECTOR (7 downto 0);

    component NeuralNetwork_mulbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component NeuralNetwork_maccud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (6 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    NeuralNetwork_mulbkb_U1 : component NeuralNetwork_mulbkb
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 8,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => input_load_reg_494,
        din1 => weights_load_reg_489,
        ce => ap_const_logic_1,
        dout => grp_fu_381_p2);

    NeuralNetwork_maccud_U2 : component NeuralNetwork_maccud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 7,
        din1_WIDTH => 8,
        din2_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_395_p0,
        din1 => bias_load_reg_509,
        din2 => reg_172,
        dout => grp_fu_395_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    inNeurons_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                inNeurons_reg_150 <= inNeurons_1_reg_459;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_2_fu_277_p2 = ap_const_lv1_1))) then 
                inNeurons_reg_150 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    outNeurons_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                outNeurons_reg_139 <= outNeurons_1_reg_436;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                outNeurons_reg_139 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                phi_mul_reg_161 <= next_mul_reg_464;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_2_fu_277_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_161 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                bias_load_reg_509 <= bias_s_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                inNeurons_1_reg_459 <= inNeurons_1_fu_302_p2;
                    tmp_4_reg_451(6 downto 0) <= tmp_4_fu_292_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                input_load_reg_494 <= input_r_q0;
                weights_load_reg_489 <= weights_s_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_296_p2 = ap_const_lv1_0))) then
                next_mul_reg_464 <= next_mul_fu_308_p2;
                tmp1_reg_469 <= tmp1_fu_351_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                outNeurons_1_reg_436 <= outNeurons_1_fu_282_p2;
                    tmp_1_cast_cast_reg_428(6 downto 0) <= tmp_1_cast_cast_fu_273_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_2_fu_277_p2 = ap_const_lv1_1))) then
                output_addr_reg_441 <= tmp_1_fu_268_p1(7 - 1 downto 0);
                    tmp_17_i_cast_reg_446(6 downto 0) <= tmp_17_i_cast_fu_288_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state9))) then
                reg_172 <= output_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    startIndex_1_i_reg_418(2) <= startIndex_1_i_fu_230_p3(2);    startIndex_1_i_reg_418(8 downto 5) <= startIndex_1_i_fu_230_p3(8 downto 5);    startIndex_1_i_reg_418(13 downto 10) <= startIndex_1_i_fu_230_p3(13 downto 10);
                tmp_21_i_reg_408 <= tmp_21_i_fu_190_p2;
                    tmp_25_i_cast_reg_423(3 downto 0) <= tmp_25_i_cast_fu_264_p1(3 downto 0);    tmp_25_i_cast_reg_423(6 downto 5) <= tmp_25_i_cast_fu_264_p1(6 downto 5);
                tmp_i2_reg_413 <= tmp_i2_fu_196_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_9_reg_504 <= grp_fu_381_p2;
            end if;
        end if;
    end process;
    startIndex_1_i_reg_418(1 downto 0) <= "00";
    startIndex_1_i_reg_418(4 downto 3) <= "00";
    startIndex_1_i_reg_418(9) <= '0';
    tmp_25_i_cast_reg_423(4) <= '0';
    tmp_25_i_cast_reg_423(14 downto 7) <= "00000000";
    tmp_1_cast_cast_reg_428(7) <= '0';
    tmp_17_i_cast_reg_446(12 downto 7) <= "000000";
    tmp_4_reg_451(31 downto 7) <= "0000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_2_fu_277_p2, ap_CS_fsm_state3, exitcond_fu_296_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_2_fu_277_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = exitcond_fu_296_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_2_fu_277_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_2_fu_277_p2 = ap_const_lv1_0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_2_fu_277_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_2_fu_277_p2 = ap_const_lv1_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bias_s_address0 <= tmp_23_i_cast_fu_360_p1(8 - 1 downto 0);

    bias_s_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bias_s_ce0 <= ap_const_logic_1;
        else 
            bias_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_296_p2 <= "1" when (inNeurons_reg_150 = ap_const_lv7_46) else "0";
    grp_fu_395_p0 <= tmp_25_i_cast_reg_423(7 - 1 downto 0);
    inNeurons_1_fu_302_p2 <= std_logic_vector(unsigned(inNeurons_reg_150) + unsigned(ap_const_lv7_1));
    input_r_address0 <= tmp_4_reg_451(7 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    neuronIndex_1_cast_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(neuronIndex_fu_334_p2),13));
    neuronIndex_1_fu_344_p3 <= 
        neuronIndex_1_cast_fu_340_p1 when (tmp_i2_reg_413(0) = '1') else 
        phi_mul_reg_161;
    neuronIndex_fu_334_p2 <= std_logic_vector(unsigned(p_shl_i_fu_314_p3) + unsigned(p_shl1_i_cast_fu_330_p1));
    next_mul_fu_308_p2 <= std_logic_vector(unsigned(phi_mul_reg_161) + unsigned(ap_const_lv13_46));
    outNeurons_1_fu_282_p2 <= std_logic_vector(unsigned(outNeurons_reg_139) + unsigned(ap_const_lv7_1));

    output_r_address0_assign_proc : process(ap_CS_fsm_state2, output_addr_reg_441, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state8, tmp_1_fu_268_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            output_r_address0 <= output_addr_reg_441;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_r_address0 <= tmp_1_fu_268_p1(7 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state10, ap_CS_fsm_state8, tmp_6_fu_386_p2, grp_fu_395_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_r_d0 <= grp_fu_395_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            output_r_d0 <= tmp_6_fu_386_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_r_d0 <= ap_const_lv32_0;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(ap_CS_fsm_state2, tmp_2_fu_277_p2, ap_CS_fsm_state10, ap_CS_fsm_state8)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (tmp_2_fu_277_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_i_10_fu_252_p3 <= 
        p_i_fu_238_p3 when (tmp_fu_246_p2(0) = '1') else 
        ap_const_lv6_1;
        p_i_cast9_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_i_10_fu_252_p3),7));

    p_i_fu_238_p3 <= 
        ap_const_lv6_A when (tmp_i1_fu_184_p2(0) = '1') else 
        ap_const_lv6_24;
    p_mux_cast_fu_216_p3 <= 
        ap_const_lv14_2904 when (tmp_i2_fu_196_p2(0) = '1') else 
        ap_const_lv14_15E0;
    p_shl1_i_cast_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_i_fu_322_p3),10));
    p_shl1_i_fu_322_p3 <= (inNeurons_reg_150 & ap_const_lv1_0);
    p_shl_i_fu_314_p3 <= (inNeurons_reg_150 & ap_const_lv3_0);
    rev_fu_210_p2 <= (tmp_11_fu_202_p3 xor ap_const_lv1_1);
    startIndex_1_i_fu_230_p3 <= 
        p_mux_cast_fu_216_p3 when (tmp_3_fu_224_p2(0) = '1') else 
        ap_const_lv14_0;
    tmp1_cast_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_reg_469),14));
    tmp1_fu_351_p2 <= std_logic_vector(unsigned(neuronIndex_1_fu_344_p3) + unsigned(tmp_17_i_cast_reg_446));
    tmp_10_fu_180_p1 <= layer(3 - 1 downto 0);
    tmp_11_fu_202_p3 <= layer(1 downto 1);
    tmp_17_i_cast_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(outNeurons_reg_139),13));
    tmp_19_i_cast_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_i_fu_368_p2),32));
    tmp_19_i_fu_368_p2 <= std_logic_vector(unsigned(tmp1_cast_fu_365_p1) + unsigned(startIndex_1_i_reg_418));
    tmp_1_cast_cast_fu_273_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(outNeurons_reg_139),8));
    tmp_1_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(outNeurons_reg_139),32));
    tmp_21_i_fu_190_p1 <= tmp_21_i_fu_190_p10(4 - 1 downto 0);
    tmp_21_i_fu_190_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(layer),8));
    tmp_21_i_fu_190_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv8_46) * unsigned(tmp_21_i_fu_190_p1), 8));
    tmp_23_i_cast_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_i_fu_356_p2),32));
    tmp_23_i_fu_356_p2 <= std_logic_vector(unsigned(tmp_21_i_reg_408) + unsigned(tmp_1_cast_cast_reg_428));
    tmp_25_i_cast_fu_264_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_i_cast9_fu_260_p1),15));
    tmp_2_fu_277_p2 <= "1" when (signed(tmp_1_cast_cast_fu_273_p1) < signed(numOfOutNeurons)) else "0";
    tmp_3_fu_224_p2 <= (tmp_i2_fu_196_p2 or rev_fu_210_p2);
    tmp_4_fu_292_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(inNeurons_reg_150),32));
    tmp_6_fu_386_p2 <= std_logic_vector(unsigned(reg_172) + unsigned(tmp_9_reg_504));
    tmp_fu_246_p2 <= (tmp_i1_fu_184_p2 or tmp_i2_fu_196_p2);
    tmp_i1_fu_184_p2 <= "1" when (tmp_10_fu_180_p1 = ap_const_lv3_1) else "0";
    tmp_i2_fu_196_p2 <= "1" when (tmp_10_fu_180_p1 = ap_const_lv3_2) else "0";
    weights_s_address0 <= tmp_19_i_cast_fu_373_p1(14 - 1 downto 0);

    weights_s_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            weights_s_ce0 <= ap_const_logic_1;
        else 
            weights_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
