-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity run_classification is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    weights_s_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    weights_s_ce0 : OUT STD_LOGIC;
    weights_s_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    bias_s_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    bias_s_ce0 : OUT STD_LOGIC;
    bias_s_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of run_classification is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000001000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000010000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000100000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000001000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000010000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000100000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000001000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000010000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000100000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000001000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000010000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000100000000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000001000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000010000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (37 downto 0) := "00000000000100000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (37 downto 0) := "00000000001000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (37 downto 0) := "00000000010000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (37 downto 0) := "00000000100000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (37 downto 0) := "00000001000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (37 downto 0) := "00000010000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (37 downto 0) := "00000100000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (37 downto 0) := "00001000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (37 downto 0) := "00010000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (37 downto 0) := "00100000000000000000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (37 downto 0) := "01000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (37 downto 0) := "10000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_13 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv7_50 : STD_LOGIC_VECTOR (6 downto 0) := "1010000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv10_240 : STD_LOGIC_VECTOR (9 downto 0) := "1001000000";
    constant ap_const_lv6_14 : STD_LOGIC_VECTOR (5 downto 0) := "010100";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_28 : STD_LOGIC_VECTOR (5 downto 0) := "101000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (37 downto 0) := "00000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_0_i1_reg_342 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_0_i_reg_375 : STD_LOGIC_VECTOR (4 downto 0);
    signal max1_i_reg_408 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_index_i_reg_418 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_index_reg_430 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_pp2_iter1_max_index_reg_430 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state39_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state40_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state41_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_pp2_stage0_flag00011001 : BOOLEAN;
    signal reg_442 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal result_input_layer1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_446 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal result_input_layer1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_layer1_layer2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_451 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal result_layer1_layer2_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_layer2_output_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_456 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal indvarinc_fu_466_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal indvarinc3_fu_483_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal indvarinc6_fu_500_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_7_fu_512_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_980 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond6_fu_517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neuron_fu_523_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal neuron_reg_989 : STD_LOGIC_VECTOR (4 downto 0);
    signal result_input_layer1_1_reg_994 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_cast_fu_529_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_4_cast_reg_999 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_s_fu_533_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_1004 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal number_fu_543_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal number_reg_1012 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_9_fu_575_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_9_reg_1017 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond5_fu_537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal input_r_load_reg_1037 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_588_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_reg_1047 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_603_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_reg_1052 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal exitcond_i1_fu_609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state14_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_flag00011001 : BOOLEAN;
    signal i_fu_615_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal result_input_layer1_4_reg_1066 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond4_fu_639_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal neuron_1_fu_645_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal neuron_1_reg_1079 : STD_LOGIC_VECTOR (4 downto 0);
    signal result_layer1_layer2_2_reg_1084 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_24_cast1_fu_651_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_24_cast1_reg_1089 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_24_cast_cast_fu_655_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_24_cast_cast_reg_1094 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_16_fu_659_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_reg_1099 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal number_1_fu_669_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal number_1_reg_1107 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_24_fu_711_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_24_reg_1112 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond3_fu_663_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_fu_738_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_reg_1137 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_fu_754_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_23_reg_1142 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal exitcond_i_fu_760_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state26_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state27_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_flag00011001 : BOOLEAN;
    signal i_1_fu_766_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal result_layer1_layer2_5_reg_1156 : STD_LOGIC_VECTOR (4 downto 0);
    signal neuron_2_fu_796_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal neuron_2_reg_1168 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal result_layer2_output_2_reg_1173 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond2_fu_790_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_cast6_fu_802_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_37_cast6_reg_1178 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_37_cast_fu_806_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_37_cast_reg_1183 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_29_fu_810_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_reg_1193 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal number_2_fu_820_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal number_2_reg_1201 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_33_fu_870_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_33_reg_1206 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond_fu_814_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal grp_fu_893_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_reg_1231 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_fu_909_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_reg_1236 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal exitcond_i2_fu_915_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i2_reg_1241 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp2_iter1_exitcond_i2_reg_1241 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_926_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_reg_1250 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal max_1_reg_1255 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal max_2_i_max1_i_fu_941_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal max_index_2_i_max_in_fu_948_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state14 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state26 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_flag00011011 : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state39 : STD_LOGIC;
    signal result_input_layer1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal result_input_layer1_ce0 : STD_LOGIC;
    signal result_input_layer1_we0 : STD_LOGIC;
    signal result_input_layer1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_input_layer1_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal result_input_layer1_ce1 : STD_LOGIC;
    signal result_input_layer1_we1 : STD_LOGIC;
    signal result_layer1_layer2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal result_layer1_layer2_ce0 : STD_LOGIC;
    signal result_layer1_layer2_we0 : STD_LOGIC;
    signal result_layer1_layer2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_layer1_layer2_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal result_layer1_layer2_ce1 : STD_LOGIC;
    signal result_layer1_layer2_we1 : STD_LOGIC;
    signal result_layer2_output_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal result_layer2_output_ce0 : STD_LOGIC;
    signal result_layer2_output_we0 : STD_LOGIC;
    signal result_layer2_output_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal invdar_reg_287 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal invdar2_reg_298 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_5_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal invdar5_reg_309 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal neuron_0_i1_reg_320 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal number_0_i1_reg_331 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal neuron_0_i7_reg_353 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal number_0_i9_reg_364 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal neuron_0_i_reg_386 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal number_0_i_reg_397 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal max_index_phi_fu_434_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp2_stage0_flag00000000 : BOOLEAN;
    signal invdar_cast_fu_461_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal invdar2_cast_fu_478_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal invdar5_cast_fu_495_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_cast_fu_580_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_621_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_flag00000000 : BOOLEAN;
    signal tmp_1_fu_634_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_cast_fu_721_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_cast_fu_729_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_772_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp1_stage0_flag00000000 : BOOLEAN;
    signal tmp_21_fu_785_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_42_cast_fu_880_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_cast_fu_885_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_fu_921_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_593_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_626_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_744_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_777_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_36_fu_899_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl7_fu_557_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl7_cast_fu_565_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_fu_549_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal neuronIndex_fu_569_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_13_fu_599_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl8_fu_675_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl9_fu_687_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl9_cast_cast_fu_695_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp1_fu_699_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl8_cast_cast_fu_683_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal addconv_i_i1_fu_705_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_20_fu_716_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_24_cast2_fu_726_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_22_fu_750_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_shl1_fu_826_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl2_fu_838_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl2_cast_cast_fu_846_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp2_fu_850_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp2_cast1_fu_856_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_cast_fu_834_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp2_cast_fu_860_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal addconv_i_i_fu_864_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_30_fu_875_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_31_fu_905_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i_fu_936_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_index_cast3_fu_932_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (37 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;

    component NeuralNetwork_muleOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component NeuralNetwork_mulfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component run_classificatiobkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component run_classificatiodEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    result_input_layer1_U : component run_classificatiobkb
    generic map (
        DataWidth => 32,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => result_input_layer1_address0,
        ce0 => result_input_layer1_ce0,
        we0 => result_input_layer1_we0,
        d0 => result_input_layer1_d0,
        q0 => result_input_layer1_q0,
        address1 => result_input_layer1_address1,
        ce1 => result_input_layer1_ce1,
        we1 => result_input_layer1_we1,
        d1 => ap_const_lv32_0,
        q1 => result_input_layer1_q1);

    result_layer1_layer2_U : component run_classificatiobkb
    generic map (
        DataWidth => 32,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => result_layer1_layer2_address0,
        ce0 => result_layer1_layer2_ce0,
        we0 => result_layer1_layer2_we0,
        d0 => result_layer1_layer2_d0,
        q0 => result_layer1_layer2_q0,
        address1 => result_layer1_layer2_address1,
        ce1 => result_layer1_layer2_ce1,
        we1 => result_layer1_layer2_we1,
        d1 => ap_const_lv32_0,
        q1 => result_layer1_layer2_q1);

    result_layer2_output_U : component run_classificatiodEe
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => result_layer2_output_address0,
        ce0 => result_layer2_output_ce0,
        we0 => result_layer2_output_we0,
        d0 => result_layer2_output_d0,
        q0 => result_layer2_output_q0);

    NeuralNetwork_muleOg_U0 : component NeuralNetwork_muleOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 8,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_442,
        din1 => input_r_load_reg_1037,
        ce => ap_const_logic_1,
        dout => grp_fu_588_p2);

    NeuralNetwork_mulfYi_U1 : component NeuralNetwork_mulfYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 8,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_446,
        din1 => reg_442,
        ce => ap_const_logic_1,
        dout => grp_fu_738_p2);

    NeuralNetwork_muleOg_U2 : component NeuralNetwork_muleOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 8,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_442,
        din1 => reg_451,
        ce => ap_const_logic_1,
        dout => grp_fu_893_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state14))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond6_fu_517_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state14))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state14 xor ap_const_logic_1);
                elsif ((ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond6_fu_517_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state26))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (ap_const_lv1_1 = exitcond4_fu_639_p2))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state26))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_condition_pp1_exit_iter0_state26 xor ap_const_logic_1);
                elsif ((ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (ap_const_lv1_1 = exitcond4_fu_639_p2))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state39))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state39)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_condition_pp2_exit_iter0_state39 xor ap_const_logic_1);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                    ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i1_reg_342_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond6_fu_517_p2 = ap_const_lv1_1))) then 
                i_0_i1_reg_342 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_const_lv1_0 = exitcond_i1_fu_609_p2))) then 
                i_0_i1_reg_342 <= i_fu_615_p2;
            end if; 
        end if;
    end process;

    i_0_i_reg_375_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (ap_const_lv1_1 = exitcond4_fu_639_p2))) then 
                i_0_i_reg_375 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_const_lv1_0 = exitcond_i_fu_760_p2))) then 
                i_0_i_reg_375 <= i_1_fu_766_p2;
            end if; 
        end if;
    end process;

    invdar2_reg_298_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = tmp_fu_472_p2))) then 
                invdar2_reg_298 <= ap_const_lv5_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = tmp_5_fu_489_p2))) then 
                invdar2_reg_298 <= indvarinc3_fu_483_p2;
            end if; 
        end if;
    end process;

    invdar5_reg_309_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = tmp_5_fu_489_p2))) then 
                invdar5_reg_309 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = tmp_6_fu_506_p2))) then 
                invdar5_reg_309 <= indvarinc6_fu_500_p2;
            end if; 
        end if;
    end process;

    invdar_reg_287_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = tmp_fu_472_p2))) then 
                invdar_reg_287 <= indvarinc_fu_466_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                invdar_reg_287 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    max1_i_reg_408_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter2) and (ap_const_lv1_0 = ap_reg_pp2_iter1_exitcond_i2_reg_1241))) then 
                max1_i_reg_408 <= max_2_i_max1_i_fu_941_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                max1_i_reg_408 <= result_layer2_output_q0;
            end if; 
        end if;
    end process;

    max_index_i_reg_418_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter2) and (ap_const_lv1_0 = ap_reg_pp2_iter1_exitcond_i2_reg_1241))) then 
                max_index_i_reg_418 <= max_index_2_i_max_in_fu_948_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                max_index_i_reg_418 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    max_index_reg_430_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond_i2_reg_1241))) then 
                max_index_reg_430 <= i_2_reg_1250;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                max_index_reg_430 <= ap_const_lv4_1;
            end if; 
        end if;
    end process;

    neuron_0_i1_reg_320_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = tmp_6_fu_506_p2))) then 
                neuron_0_i1_reg_320 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                neuron_0_i1_reg_320 <= neuron_reg_989;
            end if; 
        end if;
    end process;

    neuron_0_i7_reg_353_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                neuron_0_i7_reg_353 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
                neuron_0_i7_reg_353 <= neuron_1_reg_1079;
            end if; 
        end if;
    end process;

    neuron_0_i_reg_386_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
                neuron_0_i_reg_386 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                neuron_0_i_reg_386 <= neuron_2_reg_1168;
            end if; 
        end if;
    end process;

    number_0_i1_reg_331_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                number_0_i1_reg_331 <= number_reg_1012;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond6_fu_517_p2 = ap_const_lv1_0))) then 
                number_0_i1_reg_331 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    number_0_i9_reg_364_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                number_0_i9_reg_364 <= number_1_reg_1107;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (ap_const_lv1_0 = exitcond4_fu_639_p2))) then 
                number_0_i9_reg_364 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    number_0_i_reg_397_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                number_0_i_reg_397 <= number_2_reg_1201;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state29) and (ap_const_lv1_0 = exitcond2_fu_790_p2))) then 
                number_0_i_reg_397 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    reg_446_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                reg_446 <= result_input_layer1_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                reg_446 <= result_input_layer1_q0;
            end if; 
        end if;
    end process;

    reg_451_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                reg_451 <= result_layer1_layer2_q1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                reg_451 <= result_layer1_layer2_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0))) then
                ap_reg_pp2_iter1_exitcond_i2_reg_1241 <= exitcond_i2_reg_1241;
                ap_reg_pp2_iter1_max_index_reg_430 <= max_index_reg_430;
                exitcond_i2_reg_1241 <= exitcond_i2_fu_915_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_i2_fu_915_p2) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0))) then
                i_2_reg_1250 <= i_2_fu_926_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                input_r_load_reg_1037 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond_i2_reg_1241))) then
                max_1_reg_1255 <= result_layer2_output_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                neuron_1_reg_1079 <= neuron_1_fu_645_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                neuron_2_reg_1168 <= neuron_2_fu_796_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                neuron_reg_989 <= neuron_fu_523_p2;
                    tmp_7_reg_980(4 downto 0) <= tmp_7_fu_512_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                number_1_reg_1107 <= number_1_fu_669_p2;
                    tmp_16_reg_1099(4 downto 0) <= tmp_16_fu_659_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                number_2_reg_1201 <= number_2_fu_820_p2;
                    tmp_29_reg_1193(4 downto 0) <= tmp_29_fu_810_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                number_reg_1012 <= number_fu_543_p2;
                    tmp_s_reg_1004(6 downto 0) <= tmp_s_fu_533_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state32))) then
                reg_442 <= weights_s_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state38))) then
                reg_456 <= result_layer2_output_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond6_fu_517_p2 = ap_const_lv1_0))) then
                result_input_layer1_1_reg_994 <= tmp_7_fu_512_p1(5 - 1 downto 0);
                    tmp_4_cast_reg_999(4 downto 0) <= tmp_4_cast_fu_529_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_i1_fu_609_p2))) then
                result_input_layer1_4_reg_1066 <= tmp_3_fu_621_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state17) and (ap_const_lv1_0 = exitcond4_fu_639_p2))) then
                result_layer1_layer2_2_reg_1084 <= tmp_1_fu_634_p1(5 - 1 downto 0);
                    tmp_24_cast1_reg_1089(4 downto 0) <= tmp_24_cast1_fu_651_p1(4 downto 0);
                    tmp_24_cast_cast_reg_1094(4 downto 0) <= tmp_24_cast_cast_fu_655_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_lv1_0 = exitcond_i_fu_760_p2))) then
                result_layer1_layer2_5_reg_1156 <= tmp_18_fu_772_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state29) and (ap_const_lv1_0 = exitcond2_fu_790_p2))) then
                result_layer2_output_2_reg_1173 <= tmp_21_fu_785_p1(4 - 1 downto 0);
                    tmp_37_cast6_reg_1178(3 downto 0) <= tmp_37_cast6_fu_802_p1(3 downto 0);
                    tmp_37_cast_reg_1183(3 downto 0) <= tmp_37_cast_fu_806_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                tmp_11_reg_1047 <= grp_fu_588_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                tmp_14_reg_1052 <= tmp_14_fu_603_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                tmp_23_reg_1142 <= tmp_23_fu_754_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_const_lv1_0 = exitcond3_fu_663_p2))) then
                tmp_24_reg_1112 <= tmp_24_fu_711_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                tmp_26_reg_1137 <= grp_fu_738_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                tmp_32_reg_1236 <= tmp_32_fu_909_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_lv1_0 = exitcond_fu_814_p2))) then
                tmp_33_reg_1206 <= tmp_33_fu_870_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                tmp_35_reg_1231 <= grp_fu_893_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond5_fu_537_p2))) then
                tmp_9_reg_1017 <= tmp_9_fu_575_p2;
            end if;
        end if;
    end process;
    tmp_7_reg_980(31 downto 5) <= "000000000000000000000000000";
    tmp_4_cast_reg_999(10 downto 5) <= "000000";
    tmp_s_reg_1004(31 downto 7) <= "0000000000000000000000000";
    tmp_24_cast1_reg_1089(5) <= '0';
    tmp_24_cast_cast_reg_1094(9 downto 5) <= "00000";
    tmp_16_reg_1099(31 downto 5) <= "000000000000000000000000000";
    tmp_37_cast6_reg_1178(5 downto 4) <= "00";
    tmp_37_cast_reg_1183(11 downto 4) <= "00000000";
    tmp_29_reg_1193(31 downto 5) <= "000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, exitcond6_fu_517_p2, ap_CS_fsm_state6, exitcond5_fu_537_p2, exitcond_i1_fu_609_p2, ap_enable_reg_pp0_iter0, exitcond4_fu_639_p2, ap_CS_fsm_state17, ap_CS_fsm_state18, exitcond3_fu_663_p2, exitcond_i_fu_760_p2, ap_enable_reg_pp1_iter0, ap_CS_fsm_state29, exitcond2_fu_790_p2, ap_CS_fsm_state30, exitcond_fu_814_p2, exitcond_i2_fu_915_p2, ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_block_pp0_stage0_flag00011011, ap_block_pp1_stage0_flag00011011, ap_block_pp2_stage0_flag00011011, tmp_fu_472_p2, tmp_5_fu_489_p2, tmp_6_fu_506_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_const_lv1_1 = tmp_fu_472_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = tmp_5_fu_489_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = tmp_6_fu_506_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond6_fu_517_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond5_fu_537_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_lv1_1 = exitcond_i1_fu_609_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_lv1_1 = exitcond_i1_fu_609_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (ap_const_lv1_1 = exitcond4_fu_639_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_const_lv1_1 = exitcond3_fu_663_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_lv1_1 = exitcond_i_fu_760_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_block_pp1_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_lv1_1 = exitcond_i_fu_760_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state29) and (ap_const_lv1_0 = exitcond2_fu_790_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_lv1_1 = exitcond_fu_814_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_logic_1 = ap_enable_reg_pp2_iter2) and (ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))) and not(((ap_const_logic_1 = ap_enable_reg_pp2_iter0) and (ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_lv1_1 = exitcond_i2_fu_915_p2) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_const_logic_1 = ap_enable_reg_pp2_iter2) and (ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_enable_reg_pp2_iter0) and (ap_block_pp2_stage0_flag00011011 = ap_const_boolean_0) and (ap_const_lv1_1 = exitcond_i2_fu_915_p2) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    addconv_i_i1_fu_705_p2 <= std_logic_vector(unsigned(tmp1_fu_699_p2) + unsigned(p_shl8_cast_cast_fu_683_p1));
    addconv_i_i_fu_864_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_834_p1) + unsigned(tmp2_cast_fu_860_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(13);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(24);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(36);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state16 <= ap_CS_fsm(14);
    ap_CS_fsm_state17 <= ap_CS_fsm(15);
    ap_CS_fsm_state18 <= ap_CS_fsm(16);
    ap_CS_fsm_state19 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(18);
    ap_CS_fsm_state21 <= ap_CS_fsm(19);
    ap_CS_fsm_state22 <= ap_CS_fsm(20);
    ap_CS_fsm_state23 <= ap_CS_fsm(21);
    ap_CS_fsm_state24 <= ap_CS_fsm(22);
    ap_CS_fsm_state25 <= ap_CS_fsm(23);
    ap_CS_fsm_state28 <= ap_CS_fsm(25);
    ap_CS_fsm_state29 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(27);
    ap_CS_fsm_state31 <= ap_CS_fsm(28);
    ap_CS_fsm_state32 <= ap_CS_fsm(29);
    ap_CS_fsm_state33 <= ap_CS_fsm(30);
    ap_CS_fsm_state34 <= ap_CS_fsm(31);
    ap_CS_fsm_state35 <= ap_CS_fsm(32);
    ap_CS_fsm_state36 <= ap_CS_fsm(33);
    ap_CS_fsm_state37 <= ap_CS_fsm(34);
    ap_CS_fsm_state38 <= ap_CS_fsm(35);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state42 <= ap_CS_fsm(37);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_flag00000000 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_flag00011001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_flag00011011 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state14_assign_proc : process(exitcond_i1_fu_609_p2)
    begin
        if ((ap_const_lv1_1 = exitcond_i1_fu_609_p2)) then 
            ap_condition_pp0_exit_iter0_state14 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state14 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state26_assign_proc : process(exitcond_i_fu_760_p2)
    begin
        if ((ap_const_lv1_1 = exitcond_i_fu_760_p2)) then 
            ap_condition_pp1_exit_iter0_state26 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state26 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state39_assign_proc : process(exitcond_i2_fu_915_p2)
    begin
        if ((ap_const_lv1_1 = exitcond_i2_fu_915_p2)) then 
            ap_condition_pp2_exit_iter0_state39 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state39 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state42)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp0_iter0) and (ap_const_logic_0 = ap_enable_reg_pp0_iter1))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp1_iter0) and (ap_const_logic_0 = ap_enable_reg_pp1_iter1))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2)
    begin
        if (((ap_const_logic_0 = ap_enable_reg_pp2_iter0) and (ap_const_logic_0 = ap_enable_reg_pp2_iter1) and (ap_const_logic_0 = ap_enable_reg_pp2_iter2))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= max_index_i_reg_418;

    bias_s_address0_assign_proc : process(tmp_7_reg_980, ap_CS_fsm_state6, ap_CS_fsm_state18, ap_CS_fsm_state30, tmp_30_cast_fu_721_p1, tmp_42_cast_fu_880_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            bias_s_address0 <= tmp_42_cast_fu_880_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            bias_s_address0 <= tmp_30_cast_fu_721_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            bias_s_address0 <= tmp_7_reg_980(6 - 1 downto 0);
        else 
            bias_s_address0 <= "XXXXXX";
        end if; 
    end process;


    bias_s_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state18, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            bias_s_ce0 <= ap_const_logic_1;
        else 
            bias_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond2_fu_790_p2 <= "1" when (neuron_0_i_reg_386 = ap_const_lv4_A) else "0";
    exitcond3_fu_663_p2 <= "1" when (number_0_i9_reg_364 = ap_const_lv5_14) else "0";
    exitcond4_fu_639_p2 <= "1" when (neuron_0_i7_reg_353 = ap_const_lv5_14) else "0";
    exitcond5_fu_537_p2 <= "1" when (number_0_i1_reg_331 = ap_const_lv7_50) else "0";
    exitcond6_fu_517_p2 <= "1" when (neuron_0_i1_reg_320 = ap_const_lv5_14) else "0";
    exitcond_fu_814_p2 <= "1" when (number_0_i_reg_397 = ap_const_lv5_14) else "0";
    exitcond_i1_fu_609_p2 <= "1" when (i_0_i1_reg_342 = ap_const_lv5_14) else "0";
    exitcond_i2_fu_915_p2 <= "1" when (max_index_phi_fu_434_p4 = ap_const_lv4_A) else "0";
    exitcond_i_fu_760_p2 <= "1" when (i_0_i_reg_375 = ap_const_lv5_14) else "0";
    i_1_fu_766_p2 <= std_logic_vector(unsigned(i_0_i_reg_375) + unsigned(ap_const_lv5_1));
    i_2_fu_926_p2 <= std_logic_vector(unsigned(max_index_phi_fu_434_p4) + unsigned(ap_const_lv4_1));
    i_fu_615_p2 <= std_logic_vector(unsigned(i_0_i1_reg_342) + unsigned(ap_const_lv5_1));
    indvarinc3_fu_483_p2 <= std_logic_vector(unsigned(invdar2_reg_298) + unsigned(ap_const_lv5_1));
    indvarinc6_fu_500_p2 <= std_logic_vector(unsigned(invdar5_reg_309) + unsigned(ap_const_lv4_1));
    indvarinc_fu_466_p2 <= std_logic_vector(unsigned(invdar_reg_287) + unsigned(ap_const_lv5_1));
    input_r_address0 <= tmp_s_reg_1004(7 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    invdar2_cast_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar2_reg_298),32));
    invdar5_cast_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar5_reg_309),32));
    invdar_cast_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar_reg_287),32));
    max_2_i_max1_i_fu_941_p3 <= 
        max_1_reg_1255 when (tmp_1_i_fu_936_p2(0) = '1') else 
        max1_i_reg_408;
    max_index_2_i_max_in_fu_948_p3 <= 
        max_index_cast3_fu_932_p1 when (tmp_1_i_fu_936_p2(0) = '1') else 
        max_index_i_reg_418;
    max_index_cast3_fu_932_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_reg_pp2_iter1_max_index_reg_430),8));

    max_index_phi_fu_434_p4_assign_proc : process(max_index_reg_430, ap_CS_fsm_pp2_stage0, exitcond_i2_reg_1241, i_2_reg_1250, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter1) and (ap_const_lv1_0 = exitcond_i2_reg_1241) and (ap_block_pp2_stage0_flag00000000 = ap_const_boolean_0))) then 
            max_index_phi_fu_434_p4 <= i_2_reg_1250;
        else 
            max_index_phi_fu_434_p4 <= max_index_reg_430;
        end if; 
    end process;

    neuronIndex_fu_569_p2 <= std_logic_vector(unsigned(p_shl7_cast_fu_565_p1) + unsigned(p_shl_fu_549_p3));
    neuron_1_fu_645_p2 <= std_logic_vector(unsigned(neuron_0_i7_reg_353) + unsigned(ap_const_lv5_1));
    neuron_2_fu_796_p2 <= std_logic_vector(unsigned(neuron_0_i_reg_386) + unsigned(ap_const_lv4_1));
    neuron_fu_523_p2 <= std_logic_vector(unsigned(neuron_0_i1_reg_320) + unsigned(ap_const_lv5_1));
    number_1_fu_669_p2 <= std_logic_vector(unsigned(number_0_i9_reg_364) + unsigned(ap_const_lv5_1));
    number_2_fu_820_p2 <= std_logic_vector(unsigned(number_0_i_reg_397) + unsigned(ap_const_lv5_1));
    number_fu_543_p2 <= std_logic_vector(unsigned(number_0_i1_reg_331) + unsigned(ap_const_lv7_1));
    p_shl1_cast_fu_834_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl1_fu_826_p3),12));
    p_shl1_fu_826_p3 <= (number_0_i_reg_397 & ap_const_lv3_0);
    p_shl2_cast_cast_fu_846_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl2_fu_838_p3),7));
    p_shl2_fu_838_p3 <= (number_0_i_reg_397 & ap_const_lv1_0);
    p_shl7_cast_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl7_fu_557_p3),11));
    p_shl7_fu_557_p3 <= (number_0_i1_reg_331 & ap_const_lv2_0);
    p_shl8_cast_cast_fu_683_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl8_fu_675_p3),10));
    p_shl8_fu_675_p3 <= (number_0_i9_reg_364 & ap_const_lv4_0);
    p_shl9_cast_cast_fu_695_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl9_fu_687_p3),10));
    p_shl9_fu_687_p3 <= (number_0_i9_reg_364 & ap_const_lv2_0);
    p_shl_fu_549_p3 <= (number_0_i1_reg_331 & ap_const_lv4_0);

    result_input_layer1_address0_assign_proc : process(ap_CS_fsm_state2, result_input_layer1_1_reg_994, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_state13, ap_CS_fsm_state11, invdar_cast_fu_461_p1, tmp_3_fu_621_p1, ap_block_pp0_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0))) then 
            result_input_layer1_address0 <= tmp_3_fu_621_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            result_input_layer1_address0 <= result_input_layer1_1_reg_994;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            result_input_layer1_address0 <= invdar_cast_fu_461_p1(5 - 1 downto 0);
        else 
            result_input_layer1_address0 <= "XXXXX";
        end if; 
    end process;


    result_input_layer1_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, result_input_layer1_4_reg_1066, tmp_16_reg_1099, ap_CS_fsm_state19, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_flag00000000)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            result_input_layer1_address1 <= tmp_16_reg_1099(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1))) then 
            result_input_layer1_address1 <= result_input_layer1_4_reg_1066;
        else 
            result_input_layer1_address1 <= "XXXXX";
        end if; 
    end process;


    result_input_layer1_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter0, ap_CS_fsm_state13, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter0)) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            result_input_layer1_ce0 <= ap_const_logic_1;
        else 
            result_input_layer1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    result_input_layer1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_CS_fsm_state19, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1)))) then 
            result_input_layer1_ce1 <= ap_const_logic_1;
        else 
            result_input_layer1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    result_input_layer1_d0_assign_proc : process(ap_CS_fsm_state2, tmp_14_reg_1052, ap_CS_fsm_state13, ap_CS_fsm_state11, tmp_12_fu_593_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            result_input_layer1_d0 <= tmp_14_reg_1052;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            result_input_layer1_d0 <= tmp_12_fu_593_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            result_input_layer1_d0 <= ap_const_lv32_0;
        else 
            result_input_layer1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    result_input_layer1_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state13, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            result_input_layer1_we0 <= ap_const_logic_1;
        else 
            result_input_layer1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    result_input_layer1_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_flag00011001, ap_enable_reg_pp0_iter1, tmp_4_fu_626_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_block_pp0_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp0_iter1) and (ap_const_lv1_1 = tmp_4_fu_626_p3))) then 
            result_input_layer1_we1 <= ap_const_logic_1;
        else 
            result_input_layer1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    result_layer1_layer2_address0_assign_proc : process(ap_CS_fsm_state3, result_layer1_layer2_2_reg_1084, ap_CS_fsm_state18, ap_CS_fsm_state21, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_CS_fsm_state25, ap_CS_fsm_state23, invdar2_cast_fu_478_p1, tmp_18_fu_772_p1, ap_block_pp1_stage0_flag00000000)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0))) then 
            result_layer1_layer2_address0 <= tmp_18_fu_772_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            result_layer1_layer2_address0 <= result_layer1_layer2_2_reg_1084;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            result_layer1_layer2_address0 <= invdar2_cast_fu_478_p1(5 - 1 downto 0);
        else 
            result_layer1_layer2_address0 <= "XXXXX";
        end if; 
    end process;


    result_layer1_layer2_address1_assign_proc : process(ap_CS_fsm_pp1_stage0, result_layer1_layer2_5_reg_1156, tmp_29_reg_1193, ap_CS_fsm_state31, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_flag00000000)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            result_layer1_layer2_address1 <= tmp_29_reg_1193(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00000000 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1))) then 
            result_layer1_layer2_address1 <= result_layer1_layer2_5_reg_1156;
        else 
            result_layer1_layer2_address1 <= "XXXXX";
        end if; 
    end process;


    result_layer1_layer2_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state18, ap_CS_fsm_state21, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_flag00011001, ap_enable_reg_pp1_iter0, ap_CS_fsm_state25, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state21) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter0)) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            result_layer1_layer2_ce0 <= ap_const_logic_1;
        else 
            result_layer1_layer2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    result_layer1_layer2_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_flag00011001, ap_CS_fsm_state31, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state31) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1)))) then 
            result_layer1_layer2_ce1 <= ap_const_logic_1;
        else 
            result_layer1_layer2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    result_layer1_layer2_d0_assign_proc : process(ap_CS_fsm_state3, tmp_23_reg_1142, ap_CS_fsm_state25, ap_CS_fsm_state23, tmp_27_fu_744_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            result_layer1_layer2_d0 <= tmp_23_reg_1142;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            result_layer1_layer2_d0 <= tmp_27_fu_744_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            result_layer1_layer2_d0 <= ap_const_lv32_0;
        else 
            result_layer1_layer2_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    result_layer1_layer2_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state25, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state23))) then 
            result_layer1_layer2_we0 <= ap_const_logic_1;
        else 
            result_layer1_layer2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    result_layer1_layer2_we1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_flag00011001, ap_enable_reg_pp1_iter1, tmp_19_fu_777_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_block_pp1_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp1_iter1) and (ap_const_lv1_1 = tmp_19_fu_777_p3))) then 
            result_layer1_layer2_we1 <= ap_const_logic_1;
        else 
            result_layer1_layer2_we1 <= ap_const_logic_0;
        end if; 
    end process;


    result_layer2_output_address0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_CS_fsm_state4, ap_CS_fsm_state29, result_layer2_output_2_reg_1173, ap_CS_fsm_state30, ap_CS_fsm_state33, ap_enable_reg_pp2_iter0, ap_CS_fsm_state37, ap_CS_fsm_state35, ap_block_pp2_stage0_flag00000000, invdar5_cast_fu_495_p1, tmp_i_fu_921_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0) and (ap_block_pp2_stage0_flag00000000 = ap_const_boolean_0))) then 
            result_layer2_output_address0 <= tmp_i_fu_921_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            result_layer2_output_address0 <= result_layer2_output_2_reg_1173;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            result_layer2_output_address0 <= ap_const_lv32_0(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            result_layer2_output_address0 <= invdar5_cast_fu_495_p1(4 - 1 downto 0);
        else 
            result_layer2_output_address0 <= "XXXX";
        end if; 
    end process;


    result_layer2_output_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_flag00011001, ap_CS_fsm_state4, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state33, ap_enable_reg_pp2_iter0, ap_CS_fsm_state37, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state33) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_block_pp2_stage0_flag00011001 = ap_const_boolean_0) and (ap_const_logic_1 = ap_enable_reg_pp2_iter0)) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            result_layer2_output_ce0 <= ap_const_logic_1;
        else 
            result_layer2_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    result_layer2_output_d0_assign_proc : process(ap_CS_fsm_state4, tmp_32_reg_1236, ap_CS_fsm_state37, ap_CS_fsm_state35, tmp_36_fu_899_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            result_layer2_output_d0 <= tmp_32_reg_1236;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            result_layer2_output_d0 <= tmp_36_fu_899_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            result_layer2_output_d0 <= ap_const_lv32_0;
        else 
            result_layer2_output_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    result_layer2_output_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state37, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            result_layer2_output_we0 <= ap_const_logic_1;
        else 
            result_layer2_output_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_699_p2 <= std_logic_vector(unsigned(p_shl9_cast_cast_fu_695_p1) + unsigned(ap_const_lv10_240));
        tmp2_cast1_fu_856_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp2_fu_850_p2),11));

    tmp2_cast_fu_860_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_cast1_fu_856_p1),12));
    tmp2_fu_850_p2 <= std_logic_vector(unsigned(p_shl2_cast_cast_fu_846_p1) + unsigned(ap_const_lv7_50));
    tmp_12_fu_593_p2 <= std_logic_vector(unsigned(tmp_11_reg_1047) + unsigned(reg_446));
        tmp_13_fu_599_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bias_s_q0),32));

    tmp_14_fu_603_p2 <= std_logic_vector(unsigned(result_input_layer1_q0) + unsigned(tmp_13_fu_599_p1));
    tmp_16_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(number_0_i9_reg_364),32));
    tmp_18_fu_772_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_375),32));
    tmp_19_fu_777_p3 <= result_layer1_layer2_q0(31 downto 31);
    tmp_1_fu_634_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(neuron_0_i7_reg_353),32));
    tmp_1_i_fu_936_p2 <= "1" when (signed(max_1_reg_1255) > signed(max1_i_reg_408)) else "0";
    tmp_20_fu_716_p2 <= std_logic_vector(unsigned(tmp_24_cast1_reg_1089) + unsigned(ap_const_lv6_14));
    tmp_21_fu_785_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(neuron_0_i_reg_386),32));
        tmp_22_fu_750_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bias_s_q0),32));

    tmp_23_fu_754_p2 <= std_logic_vector(unsigned(result_layer1_layer2_q0) + unsigned(tmp_22_fu_750_p1));
    tmp_24_cast1_fu_651_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(neuron_0_i7_reg_353),6));
        tmp_24_cast2_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_24_reg_1112),11));

    tmp_24_cast_cast_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(neuron_0_i7_reg_353),10));
    tmp_24_fu_711_p2 <= std_logic_vector(unsigned(addconv_i_i1_fu_705_p2) + unsigned(tmp_24_cast_cast_reg_1094));
    tmp_25_cast_fu_729_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_cast2_fu_726_p1),32));
    tmp_27_fu_744_p2 <= std_logic_vector(signed(reg_451) + signed(tmp_26_reg_1137));
    tmp_29_fu_810_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(number_0_i_reg_397),32));
    tmp_30_cast_fu_721_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_716_p2),32));
    tmp_30_fu_875_p2 <= std_logic_vector(unsigned(tmp_37_cast6_reg_1178) + unsigned(ap_const_lv6_28));
        tmp_31_fu_905_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(bias_s_q0),32));

    tmp_32_fu_909_p2 <= std_logic_vector(unsigned(result_layer2_output_q0) + unsigned(tmp_31_fu_905_p1));
    tmp_33_fu_870_p2 <= std_logic_vector(unsigned(tmp_37_cast_reg_1183) + unsigned(addconv_i_i_fu_864_p2));
    tmp_36_fu_899_p2 <= std_logic_vector(unsigned(tmp_35_reg_1231) + unsigned(reg_456));
    tmp_37_cast6_fu_802_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(neuron_0_i_reg_386),6));
    tmp_37_cast_fu_806_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(neuron_0_i_reg_386),12));
    tmp_3_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i1_reg_342),32));
    tmp_42_cast_fu_880_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_30_fu_875_p2),32));
    tmp_43_cast_fu_885_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_33_reg_1206),32));
    tmp_4_cast_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(neuron_0_i1_reg_320),11));
    tmp_4_fu_626_p3 <= result_input_layer1_q0(31 downto 31);
    tmp_5_fu_489_p2 <= "1" when (invdar2_reg_298 = ap_const_lv5_13) else "0";
    tmp_6_fu_506_p2 <= "1" when (invdar5_reg_309 = ap_const_lv4_9) else "0";
    tmp_7_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(neuron_0_i1_reg_320),32));
    tmp_9_cast_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_reg_1017),32));
    tmp_9_fu_575_p2 <= std_logic_vector(unsigned(tmp_4_cast_reg_999) + unsigned(neuronIndex_fu_569_p2));
    tmp_fu_472_p2 <= "1" when (invdar_reg_287 = ap_const_lv5_13) else "0";
    tmp_i_fu_921_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_index_phi_fu_434_p4),32));
    tmp_s_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(number_0_i1_reg_331),32));

    weights_s_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state19, ap_CS_fsm_state31, tmp_9_cast_fu_580_p1, tmp_25_cast_fu_729_p1, tmp_43_cast_fu_885_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            weights_s_address0 <= tmp_43_cast_fu_885_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            weights_s_address0 <= tmp_25_cast_fu_729_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            weights_s_address0 <= tmp_9_cast_fu_580_p1(12 - 1 downto 0);
        else 
            weights_s_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    weights_s_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state19, ap_CS_fsm_state31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            weights_s_ce0 <= ap_const_logic_1;
        else 
            weights_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
