-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

--
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity NeuralNetwork_biahbi_ram is 
    generic(
            mem_type    : string := "distributed"; 
            dwidth     : integer := 8; 
            awidth     : integer := 6; 
            mem_size    : integer := 50
    ); 
    port (
          addr0     : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          d0        : in std_logic_vector(dwidth-1 downto 0); 
          we0       : in std_logic; 
          q0        : out std_logic_vector(dwidth-1 downto 0);
          clk        : in std_logic 
    ); 
end entity; 


architecture rtl of NeuralNetwork_biahbi_ram is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
shared variable ram : mem_array := (
    0 => "00000010", 1 => "11111111", 2 => "00000101", 3 => "00000011", 
    4 to 5=> "00000010", 6 => "00000001", 7 to 8=> "00000100", 9 => "00001000", 
    10 => "00000100", 11 => "00000000", 12 => "00000100", 13 to 14=> "00000010", 
    15 => "00000101", 16 => "00001010", 17 => "00000000", 18 => "11111110", 
    19 => "11111111", 20 => "00000000", 21 => "11111110", 22 => "00000100", 
    23 => "00000110", 24 => "00000010", 25 => "00000011", 26 => "00000001", 
    27 => "00000000", 28 => "11111111", 29 => "00000010", 30 => "00000101", 
    31 => "00000010", 32 to 33=> "00000011", 34 => "00000110", 35 => "00000010", 
    36 => "00000100", 37 => "00000011", 38 => "00000010", 39 => "00000100", 
    40 => "11111110", 41 to 42=> "11111111", 43 => "00000000", 44 => "00000001", 
    45 => "11111110", 46 => "00000010", 47 => "11111110", 48 => "00000100", 
    49 => "00000001" );

attribute syn_ramstyle : string; 
attribute syn_ramstyle of ram : variable is "select_ram";
attribute ram_style : string;
attribute ram_style of ram : variable is mem_type;
attribute EQUIVALENT_REGISTER_REMOVAL : string;

begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_memory_access_0: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            if (we0 = '1') then 
                ram(CONV_INTEGER(addr0_tmp)) := d0; 
            end if;
            q0 <= ram(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;


end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity NeuralNetwork_biahbi is
    generic (
        DataWidth : INTEGER := 8;
        AddressRange : INTEGER := 50;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0);
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of NeuralNetwork_biahbi is
    component NeuralNetwork_biahbi_ram is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            d0 : IN STD_LOGIC_VECTOR;
            we0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    NeuralNetwork_biahbi_ram_U :  component NeuralNetwork_biahbi_ram
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        d0 => d0,
        we0 => we0,
        q0 => q0);

end architecture;


